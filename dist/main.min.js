(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\group.js":[function(require,module,exports){
//controls flocking for a group of person objects
var util = require('../utils');

var Group = function (game) {
	this.game = game;
	this.members = [];
	this.minDist = 50;
}
Group.prototype.constructor = Group;
Group.prototype.update = function() {
	//console.log('update');
	//calculate center point
	var centerPoint = {x:0, y:0};
	for (var member in this.members) {
		centerPoint.x += member.x;
		centerPoint.y += member.y;
	}
	centerPoint.x /= this.members.length;
	centerPoint.y /= this.members.length;
	// aim towards center then push
	for (var member in this.members) {
		var velocity = {x:0, y:0};
		var diff = {x:0, y:0};
		diff.x = centerPoint.x - member.x;
		diff.y = centerPoint.y - member.y;
		velocity.x += diff.x;
		velocity.y += diff.y;
		for (var other in this.members) {
			//ignore self
			if (other === member) {
				continue;
			}
			var oDiff = {x:0, y:0};
			oDiff.x = other.x - member.x;
			oDiff.y = other.y - member.y;
			var totalDist = util.hypotenuse(oDiff.x, oDiff.y);
			if (totalDist <= this.minDist) {
				velocity.x += oDiff.x;
				velocity.y += oDiff.y;
			}
		}
		member.velocity = velocity;
	}
};
Group.prototype.addMember = function(member) {
	this.members.push(member);
};

module.exports = Group;
},{"../utils":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\utils.js"}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\person.js":[function(require,module,exports){
var Person = function (game, x, y) {
	Phaser.Sprite.call(this, game, x, y, 'person');
	this.velocity = {x:0, y:0};
	this.width = 10;
	this.height = 10;
	this.speed = 1;
};
Person.prototype = Object.create(Phaser.Sprite.prototype);
Person.prototype.constructor = Person;
Person.prototype.update = function() {
	this.x += this.velocity.x * this.speed;
	this.y += this.velocity.y * this.speed;
};

module.exports = Person;
},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\player.js":[function(require,module,exports){
var Player = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'testsprite');
    game.add.existing(this);
	this.speed = 0.1;
}

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
	//this.x += this.velocity;
};

module.exports = Player;

},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, '-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

//game.stage.backgroundColor = "#ffffff";

},{"./states/boot":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\boot.js","./states/game":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\game.js","./states/menu":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\menu.js","./states/preloader":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\preloader.js","./states/splash":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\splash.js","./utils":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\utils.js"}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\game.js":[function(require,module,exports){
var Player = require('../entities/player');
var Person = require('../entities/person');
var Group = require('../entities/group');

var Game = function () {
  this.testentity = null;
  this.flocks = [];
};

module.exports = Game;

Game.prototype = {

  create: function () {
	this.game.stage.backgroundColor = "#ffffff";
	  
    var x = (this.game.width / 2) - 100;
    var y = (this.game.height / 2) - 50;

    this.testentity = new Player(this.game, x, y);
    this.testentity.anchor.setTo(0.5, 0.5);

    this.input.onDown.add(this.onInputDown, this);
	
	var testFlock = new Group(this.game);
	this.flocks.push(testFlock);
	
	for (var i = 0; i < 10; i++) {
		var testPerson = new Person(this.game, this.game.width/2 + i * 15, this.game.height/2 + i * 15);
		this.game.add.existing(testPerson);
		testFlock.addMember(testPerson);
	}
  },

  update: function () {
    var x, y, cx, cy, dx, dy, angle, scale;

    x = this.input.position.x;
    y = this.input.position.y;
    cx = this.world.centerX;
    cy = this.world.centerY;

    angle = Math.atan2(y - cy, x - cx) * (180 / Math.PI);
    this.testentity.angle = angle;

    dx = x - cx;
    dy = y - cy;
    scale = Math.sqrt(dx * dx + dy * dy) / 100;

    this.testentity.scale.x = scale * 0.6;
    this.testentity.scale.y = scale * 0.6;
	
	this.flocks[0].update();
  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

},{"../entities/group":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\group.js","../entities/person":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\person.js","../entities/player":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\player.js"}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test.png');
	this.load.image('person', 'assets/person.png');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Game');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
	hypotenuse: function(a, b) {
		return Math.sqrt(Math.pow(a, 2), Math.pow(b, 2));
	}
};

module.exports = Utils;
},{}]},{},["C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

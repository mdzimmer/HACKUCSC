(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"C:\\HACKUCSC\\src\\js\\entities\\ProgressBar.js":[function(require,module,exports){
//NOTE: DON'T USE this code to create a ProgressBar. Instead, use the UIBuilder object and call buildProgressBar

var ProgressBar = function(setType, setMaxValue, setGraphics, setRenderables) {
	this.type = setType; //Two types, "growing" (starts at 0, triggers event when full) 
						 //and "shrinking" (starts full, triggers at 0)
	this.bgBorderSize = 2;			//default size of background border
	this.bgBorderColor = 0x00000;	//default color of background border
	this.bgColor = 0xffffff;		//default color of background
	this.paddingHoriz = 10;			//default sum of padding on left and right side inner value bar
	this.paddingVert = 10;			//default sum (i.e. half on each side) of vertical padding of inner value bar
	// this.valueBorderSize = 1;		//default size of value border
	// this.valueBorderColor = 0x8888FF; //default color of value border
	this.valueColor = 0x000000;		//default color of inner value bar
	this.x = null;
	this.y = null;
	this.width = null;
	this.height = null;
	this.maxValue = setMaxValue;
	this.graphics = setGraphics; //store graphics class (used to draw bar)
	this.renderables = setRenderables;
	
	this.onEvent = function() {}; //overwrite this function to make whatever you want happen when progressBar reaches limit
	
	//switch(this.type) {
	//case 'growing' : 
	if(setType === 'growing') {
		this.value = 0;
		//tryTrigger is called automatically when you add/subtract value, and will trigger the onEvent() function
		this.tryTrigger = function() {
			if(this.value >= this.maxValue) {
				this.onEvent();
			}
		};
		//break;
	}
	else if(setType === 'shrinking') {
	//case 'shrinking' :
		this.value = this.maxValue;
		this.tryTrigger = function() {
			if(this.value <= 0) {
				this.onEvent();
			}
		};
	}
};

ProgressBar.prototype.constructor = ProgressBar;

ProgressBar.prototype.destroy = function() {
	this.graphics.clear();
	this.renderables.unsubscribe(this);
};

//To subtract value, just use negative numbers as argument i.e. foo.addValue(-5);
ProgressBar.prototype.addValue = function (addThis) {
	this.value += addThis;
	if(this.value > this.maxValue) {
		this.value = this.maxValue;
	}
	if(this.value < 0) {
		this.value = 0;
	}
	this.tryTrigger();
};

//Sets the location where progress bar is rendered
ProgressBar.prototype.setLocation = function(setX, setY) {
	this.x = setX;
	this.y = setY;
};

//Sets the size of the progress bar
ProgressBar.prototype.setSize = function(setWidth, setHeight) {
	this.width = setWidth;
	this.height = setHeight;
};

ProgressBar.prototype.setStyle = function(bgBorderSize, bgBorderColor, bgColor, paddingHoriz, paddingVert, valueBorderSize, valueBorderColor, valueColor) {
	this.bgBorderSize = bgBorderSize;
	this.bgBorderColor = bgBorderColor;
	this.bgColor = bgColor;
	this.paddingHoriz = paddingHoriz;
	this.paddingVert = paddingVert;
	this.valueBorderSize = valueBorderSize;
	this.valueBorderColor = valueBorderColor;
	this.valueColor = valueColor;
};

//update for progress bar, called just before drawing progress bar
//Overwrite this function if desired
ProgressBar.prototype.update = function() {};

//Renders progressBar
ProgressBar.prototype.render = function() {
	this.update();
	this.graphics.clear();
	//Draw background of bar
	this.graphics.lineStyle(this.bgBorderSize, this.bgBorderColor, 1); //sets border color and size
	this.graphics.beginFill(this.bgColor); //sets color of background fill
	this.graphics.drawRect(this.x-this.width/2, this.y-this.height/2, this.width, this.height);
	this.graphics.endFill();
	//Draw value of bar
	var percentage = this.value / this.maxValue;
	var barWidth = this.width - this.paddingHoriz;
	var barHeight = this.height - this.paddingVert;
	this.graphics.lineStyle(this.valueBorderSize, this.valueBorderColor, 1);
	this.graphics.beginFill(this.valueColor);
	this.graphics.drawRect(this.x-(barWidth/2), this.y-(barHeight/2), barWidth*percentage, barHeight);
	this.graphics.endFill();
};

module.exports = ProgressBar;
},{}],"C:\\HACKUCSC\\src\\js\\entities\\background.js":[function(require,module,exports){
var Group_Manager = require('./groupManager');
var Person = require('./person');

var Background = function (game, baseX, baseY, hRatio, vRatio, income, type, state) {
    Phaser.Sprite.call(this, game, (baseX * hRatio * game.width), (baseY * vRatio * game.height) + 100, 'background');
    game.add.existing(this);
    this.baseX = baseX;
    this.baseY = baseY;
    this.hRatio = hRatio;
    this.vRatio = vRatio;
    // this.width = hRatio * game.width;
    // this.height = vRatio * game.height;
    this.newHRatio = hRatio;
    this.newVRatio = vRatio;
    this.minRatio = .1;
    this.maxRatio = .6;
    this.group_manager = new Group_Manager(this.game, state);
	this.group_manager.background = this;
   	this.type = type;
    this.incomeLevel = income;
	this.state = state
};

Background.prototype = Object.create(Phaser.Sprite.prototype);
Background.prototype.constructor = Background;

Background.prototype.getVars = function() {
    //return x & y and width & height of visible
    return [this.x, this.y, this.hRatio * (this.game.width), this.vRatio * (this.game.height - this.myManager.border)];
};

Background.prototype.getVarsCenter = function() {
    // //return x & y of center and width & height of visible
    var visWidth = this.hRatio * (this.game.width);
    var visHeight = this.vRatio * (this.game.height - this.myManager.border);
    return {width : visWidth, height : visHeight, center : {x : this.x + visWidth / 2, y : this.y + visHeight / 2}};
};

Background.prototype.numPeople = function() {
    // var num = this.group_manager.numPeople();
    // if (num === 0) return 1;
    // else return num;
    return this.group_manager.numPeople();
};

Background.prototype.updateVars = function(vars) {
    // console.log(this.type, this.incomeLevel);
    // console.log(this.type, this.incomeLevel, vars)
    this.x = vars.center.x - vars.width / 2;
    this.y = vars.center.y - vars.height / 2 + this.myManager.border;
    this.width = vars.width;
    this.height = vars.height;
    this.group_manager.updateVars();
};

Background.prototype.update = function() {
<<<<<<< HEAD
	// if (this.newHRatio < this.minRatio) this.newHRatio = this.minRatio;
 //    if (this.newVRatio < this.minRatio) this.newVRatio = this.minRatio;
 //    if (this.hRatio !== this.newHRatio) {
 //        if (this.hRatio + .01 < this.newHRatio) this.hRatio += .01;
 //        else if (this.hRatio - .01 > this.newHRatio) this.hRatio -= .01;
 //        else this.hRatio = this.newHRatio;
 //    }
 //    if (this.vRatio !== this.newVRatio) {
 //        if (this.vRatio + .01 < this.newVRatio) this.vRatio += .01;
 //        else if (this.vRatio - .01 > this.newVRatio) this.vRatio -= .01;
 //        else this.vRatio = this.newVRatio;
 //    }
 //    if (this.type === 'unemployed')
 //        this.hRatio = 1;
=======
	if (this.newHRatio < this.minRatio) this.newHRatio = this.minRatio;
    if (this.newVRatio < this.minRatio) this.newVRatio = this.minRatio;
    if (this.newHRatio > this.maxRatio) this.newHRatio = this.maxRatio;
    if (this.newVRatio > this.maxRatio) this.newVRatio = this.maxRatio;
    if (this.hRatio !== this.newHRatio) {
        if (this.hRatio + .01 < this.newHRatio) this.hRatio += .01;
        else if (this.hRatio - .01 > this.newHRatio) this.hRatio -= .01;
        else this.hRatio = this.newHRatio;
    }
    if (this.vRatio !== this.newVRatio) {
        if (this.vRatio + .01 < this.newVRatio) this.vRatio += .01;
        else if (this.vRatio - .01 > this.newVRatio) this.vRatio -= .01;
        else this.vRatio = this.newVRatio;
    }
    if (this.type === 'unemployed')
        this.hRatio = 1;
>>>>>>> 1f3ac272f7ca9f833fe9d59fb87f75f685ff6709
    this.group_manager.update();
};



module.exports = Background;
},{"./groupManager":"C:\\HACKUCSC\\src\\js\\entities\\groupManager.js","./person":"C:\\HACKUCSC\\src\\js\\entities\\person.js"}],"C:\\HACKUCSC\\src\\js\\entities\\background_manager.js":[function(require,module,exports){
//Controls background elements

var Background = require('./background');
var Person = require('./person');
var util = require('../utils');

var Group = require('./group');

var Background_Manager = function(game, state) {
	this.game = game;
	this.state = state;
	//Create array of backgrounds
	this.bgArray = [
		new Background(this.game, 0, 0, .33, .33, Person.EDULEVEL.low , 'work' , state),	// this.bgArray[0] == workLow
		new Background(this.game, 1, 0, .33, .33, Person.EDULEVEL.mid , 'work' , state),	// this.bgArray[1] == workMid
		new Background(this.game, 2, 0, .33, .33, Person.EDULEVEL.high, 'work' , state),	// this.bgArray[2] == workMid
		new Background(this.game, 0, 1, .33, .33, Person.EDULEVEL.low , 'house', state),	// this.bgArray[3] == houseLow
		new Background(this.game, 1, 1, .33, .33, Person.EDULEVEL.mid , 'house', state),	// this.bgArray[4] == houseMid
		new Background(this.game, 2, 1, .33, .33, Person.EDULEVEL.high, 'house', state),	// this.bgArray[5] == houseMid
		new Background(this.game, 0, 2,   1, .33, '',              'unemployed', state)		// this.bgArray[6] == unemployed
	];
	for (bg in this.bgArray) {
		this.bgArray[bg].myManager = this;
	}
	
	for (var i in this.bgArray) {
		if (this.bgArray[i].type == 'work') {
			if (this.bgArray[i].incomeLevel === Person.EDULEVEL.low) {
				this.bgArray[i].tint = 0xed5c5a;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.mid) {
				this.bgArray[i].tint = 0x6ae246;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.high) {
				this.bgArray[i].tint = 0x2b59e2;
			}
		}
		else if (this.bgArray[i].type == 'house') {
			if (this.bgArray[i].incomeLevel === Person.EDULEVEL.low) {
				this.bgArray[i].tint = 0xed8180;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.mid) {
				this.bgArray[i].tint = 0x94ea79;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.high) {
				this.bgArray[i].tint = 0x5476dd;
			}
		}
		else { // Unemployed background
			this.bgArray[i].tint = 0x808080;
		}
		// this.border = 100;
	}
	this.border = 100;
	this.minRatio = .2;
	this.updateRatios();

	// var test = this.bgArray[6].group_manager;
	// var testFlock = new Group(this.game, this.game.width / 2 + 100, (this.game.height - this.border) / 2 + 100, state);
 //    for (var i = 0; i < 10; i++) {
 //    	var testPerson = new Person(this.game, this.game.width / 2 + i * 15, (this.game.height - this.border) / 2 + i * 15, i);
 //    	this.game.add.existing(testPerson);
 //    	testFlock.addMember(testPerson);
 //    }
 //    test.addMember(testFlock);
	// testFlock = new Group(this.game, this.game.width / 2 - 100, (this.game.height - this.border) / 2 + 100, state);
	// for (var i = 0; i < 10; i++) {
    	// var testPerson = new Person(this.game, this.game.width / 2 + i * 15 - 100, (this.game.height - this.border) / 2 + i * 15 + 100, i);
    	// this.game.add.existing(testPerson);
    	// testFlock.addMember(testPerson);
    // }
    // test.addMember(testFlock);
};

Background_Manager.prototype.constructor = Background_Manager;

/*Background_Manager.BGNAMES = {
		workLow    : this.bgArray[0],
		workMid    : this.bgArray[1],
		workHigh   : this.bgArray[2],
		houseLow   : this.bgArray[3],
		houseMid   : this.bgArray[4],
		houseHigh  : this.bgArray[5],
		unemployed : this.bgArray[6]
};*/

Background_Manager.prototype.sendTo = function(source, destination, group) {
	// console.log('send to', source, destination, group);
	// console.log(destination);
	// console.log(source, destination);
	if (destination === null) {
		return;
	}
	var transType = this.transferType(source, destination, group)
	// console.log(source, destination, group, transType);
	if (transType.can) {	// Check if they can transfer up
		// console.log('can');
		source.group_manager.transfer(destination.group_manager, group);
		if (transType.educate) {
			group.startEducation();
		}
		// if (source.incomeLevel !== destination.incomeLevel) {
		// 	this.updateRatios(destination);
		// }
		// console.log(source, destination, group);
		this.updateRatios(destination);
        group.happinessModifier = transType.happinessModifier;
	}
	// console.log(group.happinessModifier);
};
Background_Manager.prototype.numPeople = function() {
	var count = 0;
	for (var i in this.bgArray) {
		count += this.bgArray[i].group_manager.numPeople();
	}
	return count;
};
Background_Manager.prototype.transferType = function(source, destination, group) {
    if (destination == null) {
        return;
    }
	var groupEdu = group.members[0].eduLevel;
	var can = this.canTransfer(source, destination, group);
	// console.log(destination);
	// console.log(destination.type, destination.incomeLevel);
	var educate = (destination.type === 'house' && destination.incomeLevel) > groupEdu;
    var happinessModifier = 0;
    if (this.state.curMoney < 0) {
    	happinessModifier -= 1;
    	this.negMoney = true;
    }
    else if (this.negMoney){
    	happinessModifier += 1;
    }
    if (destination.type == 'unemployed' && source.type != 'unemployed') {
    	// console.log('unemployment');
        happinessModifier -= 1;
    }
    if (destination.incomeLevel < groupEdu) {
    	// console.log('education');
        happinessModifier -= groupEdu - destination.incomeLevel;
    }
    if (destination.type == 'house') {
    	// console.log('housing');
    	happinessModifier += 1;
    }
    if (destination.type == 'work') {
    	// console.log('tax', destination.incomeLevel, this.state.taxMod.low);
    	if (destination.incomeLevel == 0) {
	    	if (this.state.taxMod.low == .5) {
	    		happinessModifier += 1;
	    	} else if (this.state.taxMod.low == 1) {
	    		
	    	} else if (this.state.taxMod.low == 1.5) {
	    		happinessModifier -= 1;
	    	}
    	} else if (destination.incomeLevel == 1) {
	    	if (this.state.taxMod.mid == .5) {
	    		happinessModifier += 1;
	    	} else if (this.state.taxMod.mid == 1) {
	    		
	    	} else if (this.state.taxMod.mid == 1.5) {
	    		happinessModifier -= 1;
	    	}
    	} else if (destination.incomeLevel == 2) {
	    	if (this.state.taxMod.high == .5) {
	    		happinessModifier += 1;
	    	} else if (this.state.taxMod.high == 1) {

	    	} else if (this.state.taxMod.high == 1.5) {
	    		happinessModifier -= 1;
	    	}
    	}
 	}
 	// console.log(happinessModifier, group.happinessModifier);
    var happinessChange = happinessModifier - group.happinessModifier;
    // console.log(happinessChange, happinessModifier, group.happinessModifier);
    var incomeChange = 0;
    var baseIncome = group.income();
    var newIncome = 0;
    var numPeople = group.numPeople();
    if (destination.type == 'work') {
    	// console.log('tax', destination.incomeLevel, this.state.taxMod.low);
    	if (destination.incomeLevel == 0) {
	    	newIncome += numPeople * Person.INCOMES.low * this.state.taxMod.low;
    	} else if (destination.incomeLevel == 1) {
	    	newIncome += numPeople * Person.INCOMES.mid * this.state.taxMod.mid;
    	} else if (destination.incomeLevel == 2) {
	    	newIncome += numPeople * Person.INCOMES.high * this.state.taxMod.high;
    	}
 	} else if (destination.type == 'home') {
 		if (destination.incomeLevel == 0) {
	    	newIncome -= numPeople * Person.INCOMES.low;
    	} else if (destination.incomeLevel == 1) {
	    	newIncome -= numPeople * Person.INCOMES.mid;
    	} else if (destination.incomeLevel == 2) {
	    	newIncome -= numPeople * Person.INCOMES.high;
    	}
 	}
 	// console.log(newIncome, baseIncome)
 	var incomeChange = newIncome - baseIncome;
 	// console.log(happinessModifier);
	return {can : can, educate : educate, happinessChange : happinessChange, incomeChange : incomeChange, happinessModifier : happinessModifier};
};
Background_Manager.prototype.canTransfer = function(source, destination, group) {
	// console.log(source, destination, group);
	if (source === null || destination === null) return false;
	if (source.type == destination.type && source.incomeLevel == destination.incomeLevel) {
		return false;
	}
	var sourceEdu = group.members[0].eduLevel;
	if (destination.type === 'unemployed') {
		return true;
	}
	if (sourceEdu === Person.EDULEVEL.unemployed) {
		if (destination.incomeLevel === Person.EDULEVEL.low && destination.type === 'house') {
			return true;
		}
	} else if (sourceEdu === Person.EDULEVEL.low) {
		if (destination.incomeLevel === Person.EDULEVEL.low) {
			return true;
		} else if (destination.incomeLevel === Person.EDULEVEL.mid) {
			if (destination.type === 'house') {
				return true;
			}
		}
	} else if (sourceEdu === Person.EDULEVEL.mid) {
		if (destination.incomeLevel === Person.EDULEVEL.low) {
			return true;
		} else if (destination.incomeLevel === Person.EDULEVEL.mid) {
			return true;
		} else if (destination.incomeLevel === Person.EDULEVEL.high) {
			if (destination.type === 'house') {
				return true;
			}
		}
	} else if (sourceEdu === Person.EDULEVEL.high) {
		return true;
	}
	return false;
};
Background_Manager.prototype.backgroundBy = function(type, incomeLevel) {
	for (var bg in this.bgArray) {
		bg = this.bgArray[bg];
		if (bg.type == type && bg.incomeLevel == incomeLevel) {
			return bg;
		}
	}
	return null;
};

Background_Manager.prototype.whereClicked = function() {
	// for (var i in this.bgArray) {
	// 	var curDimensions = this.bgArray[i].getVars();
	// 	var mouseX = this.game.input.x;
	// 	var mouseY = this.game.input.y;
	// 	// if(i == 6) console.log('curDimensions: ' + curDimensions);
	// 	if (mouseX > curDimensions[0] && mouseX <= curDimensions[0] + curDimensions[2]) {
	// 		if (mouseY > curDimensions[1] && mouseY <= curDimensions[1] + curDimensions[3]) {
	// 			return this.bgArray[i];
	// 		}
	// 	}
	// }
	var mouseX = this.game.input.x;
	var mouseY = this.game.input.y;
	if (mouseY >= this.border) {
		if (mouseY <= this.bgArray[0].height + this.border) {
			if (mouseX <= this.bgArray[0].width) {
				// console.log('0');
				return this.bgArray[0];
			} else if (mouseX <= this.bgArray[0].width + this.bgArray[1].width) {
				// console.log('1');
				return this.bgArray[1];
			} else {
				// console.log('2');
				return this.bgArray[2];
			}
		} else if (mouseY <= this.bgArray[4].height + this.bgArray[0].height + this.border) {
			if (mouseX <= this.bgArray[0].width) {
				// console.log('3');
				return this.bgArray[3];
			} else if (mouseX <= this.bgArray[0].width + this.bgArray[1].width) {
				// console.log('4');
				return this.bgArray[4];
			} else {
				// console.log('5');
				return this.bgArray[5];
			}
		} else {
			// console.log('6');
			return this.bgArray[6];
		}
	}
	return null;
};

Background_Manager.prototype.findOther = function(source, destination) {
	if (source.type === 'work' && destination.type === 'work') {
		if (source.incomeLevel === Person.EDULEVEL.low) {
			if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[2];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[1];
		}
		else if (source.incomeLevel === Person.EDULEVEL.mid) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[2];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[0];
		}
		else if (source.incomeLevel === Person.EDULEVEL.high) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[1];
			else if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[0];
		}
	}
	else if (source.type === 'house' && destination.type === 'house') {
		if (source.incomeLevel === Person.EDULEVEL.low) {
			if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[5];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[4];
		}
		else if (source.incomeLevel === Person.EDULEVEL.mid) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[5];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[3];
		}
		else if (source.incomeLevel === Person.EDULEVEL.high) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[4];
			else if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[3];
		}
	}
};

// Background_Manager.prototype.updateRatios = function(destination) {
	// work 0 - 2 house 3 - 5 unemployed 6
Background_Manager.prototype.updateRatios = function() {
	// if (destination.type === 'work') {
	// 	var hRatios = util.ratio(this.bgArray[0].numPeople(), this.bgArray[1].numPeople(), this.bgArray[2].numPeople());
	// }
	// else{
	// 	var hRatios = util.ratio(this.bgArray[3].numPeople(), this.bgArray[4].numPeople(), this.bgArray[5].numPeople());
	// }
	// var employed = 0;
	// for (var j = 0; j < 6; j++)
	// 	employed += this.bgArray[j].numPeople();
	// var vRatios = util.ratio(this.bgArray[6].numPeople(), employed);
	// for (var i = 0 in this.bgArray) {
	// 	if (i !== 6) {		// If not unemployed bg
	// 		if (i < 3) {	// If work bg
	// 			this.bgArray[i].newHRatio = hRatios[i];
	// 			this.bgArray[i].newVRatio = vRatios[1] / 2;
	// 		}
	// 		else {			// If house bg
	// 			this.bgArray[i].newHRatio = hRatios[i - 3];
	// 			this.bgArray[i].newVRatio = vRatios[1] / 2;
	// 		}
	// 	}
	// 	else bgArray[i].newVRatio = vRatios[0]; // Unemployed bg
	// }
	var lowSum = this.bgArray[0].numPeople() + this.bgArray[3].numPeople();
	var midSum = this.bgArray[1].numPeople() + this.bgArray[4].numPeople();
	var highSum = this.bgArray[2].numPeople() + this.bgArray[5].numPeople();
	// console.log('low', lowSum, 'mid', midSum, 'high', highSum);
	var hRatio = util.ratio(lowSum, midSum, highSum, this.minRatio);
	var workSum = this.bgArray[0].numPeople() + this.bgArray[1].numPeople() + this.bgArray[2].numPeople();
	var homeSum = this.bgArray[3].numPeople() + this.bgArray[4].numPeople() + this.bgArray[5].numPeople();
	var unemSum = this.bgArray[6].numPeople();
	var vRatio = util.ratio(workSum, homeSum, unemSum, this.minRatio);
	var gWidth = this.game.width;
	var gHeight = this.game.height - this.border;

	var offsetX = 0;
	var offsetY = 0;
	var workHeight = gHeight * vRatio.a;
	var houseHeight = gHeight * vRatio.b;
	var unemHeight = gHeight * vRatio.c;
	// console.log(gWidth, gHeight, workSum, homeSum, unemSum, hRatio, vRatio);

	var lowWork = {width : gWidth * hRatio.a, height : workHeight, center : null};
	lowWork.center = {x : offsetX + lowWork.width / 2, y : offsetY + workHeight / 2};;
	offsetX += lowWork.width;
	this.bgArray[0].updateVars(lowWork);
	var midWork = {width : gWidth * hRatio.b, height : workHeight, center : null};
	midWork.center = {x : offsetX + midWork.width / 2, y : offsetY + workHeight / 2};
	offsetX += midWork.width;
	this.bgArray[1].updateVars(midWork);
	var highWork = {width : gWidth * hRatio.c, height : workHeight, center : null}
	highWork.center = {x : offsetX + highWork.width / 2, y : offsetY + workHeight / 2};
	offsetX = 0;
	offsetY += workHeight;
	this.bgArray[2].updateVars(highWork);
	var lowHouse = {width : gWidth * hRatio.a, height : houseHeight, center : null};
	lowHouse.center = {x : offsetX + lowHouse.width / 2, y : offsetY + houseHeight / 2};
	offsetX += lowHouse.width;
	this.bgArray[3].updateVars(lowHouse);
	var midHouse = {width : gWidth * hRatio.b, height : houseHeight, center : null};
	midHouse.center = {x : offsetX + midHouse.width / 2, y : offsetY + houseHeight / 2};
	offsetX += midHouse.width;
	this.bgArray[4].updateVars(midHouse);
	var highHouse = {width : gWidth * hRatio.c, height : houseHeight, center : null};
	highHouse.center = {x : offsetX + highHouse.width / 2, y : offsetY + houseHeight / 2};
	offsetY += houseHeight;
	this.bgArray[5].updateVars(highHouse);
	var unemployed = {width : gWidth * 1, height : unemHeight, center : null};
	unemployed.center = {x : unemployed.width / 2, y : offsetY + unemHeight / 2};
	this.bgArray[6].updateVars(unemployed);
	// console.log(vRatios);
	// for (var bg in this.bgArray) {
	// 	bg = this.bgArray[bg];
	// 	bg.group_manager.updateVars();
	// }
};

Background_Manager.prototype.update = function() {
	// for (var i in this.bgArray) {
 //    	if (this.bgArray[i].incomeLevel === Person.EDULEVEL.mid) {
 //    		this.bgArray[i].x = this.bgArray[0].getVars()[2];
 //    	}
 //    	else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.high) {
 //    	    this.bgArray[i].x = this.bgArray[1].getVars()[0] + this.bgArray[1].getVars()[2];
 //    	}
 //    	this.bgArray[i].y = (this.bgArray[i].baseY * this.bgArray[i].vRatio * (this.game.height - this.border)) + this.border;
	// 	this.bgArray[i].update();
	// }
	// var test = this.bgArray[3].getVarsCenter();
};

Background_Manager.prototype.endQuit = function() {
    this.justQuit = false;
};

module.exports = Background_Manager;
},{"../utils":"C:\\HACKUCSC\\src\\js\\utils.js","./background":"C:\\HACKUCSC\\src\\js\\entities\\background.js","./group":"C:\\HACKUCSC\\src\\js\\entities\\group.js","./person":"C:\\HACKUCSC\\src\\js\\entities\\person.js"}],"C:\\HACKUCSC\\src\\js\\entities\\group.js":[function(require,module,exports){
//controls flocking for a group of person objects
var util = require('../utils');

var Group = function (game, centerX, centerY, state) {
	this.game = game;
	this.members = [];
	this.minDist = 20;
	//this.noise = 10;
	this.center = {x : centerX, y : centerY};
	this.clickDist = 50;
	this.selected = false;
	this.selection = this.game.add.sprite(this.center.x, this.center.y, 'selection');
	this.selection.anchor.setTo(0.5, 0.5);
	this.selection.width = 100;
	this.selection.height = 100;
	this.selection.visible = false;
	this.velocity = {x : 0, y : 0};
	this.speed = .05;
	this.state = state;
	this.book = this.game.add.sprite(this.center.x, this.center.y, 'book');
	this.book.anchor.setTo(0.5, 0.5);
	this.book.visible = false;
	this.learningTime = .01;
    this.hover = false;
    this.lock = this.game.add.sprite(this.center.x, this.center.y, 'lock');
	this.lock.anchor.setTo(0.5, 0.5);
	this.lock.width = 25;
	this.lock.height = 35;
	this.lock.visible = false;
	this.lockTime = 5;
	this.happinessModifier = 0;
	this.selectionWeight = 2.5;
	this.minSelectionSize = 40;
	this.clickWeight = 10;
	this.maxClickDist = 40;
	this.minClickDist = 20;
	this.maxMembers = 10;
	
	this.state.input.onDown.add(this.onInputDown, this);
    this.state.input.addMoveCallback(this.onMove, this);
};
Group.prototype.constructor = Group;
Group.prototype.update = function() {
	// console.log(this.center);
	//update center
	var newX = this.center.x + this.velocity.x * this.speed;
	var newY = this.center.y + this.velocity.y * this.speed;
	this.changeCenter({x : newX, y : newY});
	for (var member in this.members) {
		member = this.members[member];
		var velocity = {x:0, y:0};
		var diff = {x:0, y:0};
		diff.x = this.center.x - member.x;
		diff.y = this.center.y - member.y;
		velocity.x += diff.x;
		velocity.y += diff.y;
		for (var other in this.members) {
			other = this.members[other];
			//ignore self
			if (other === member) {
				continue;
			}
			var oDiff = {x:0, y:0};
			oDiff.x = other.x - member.x;
			oDiff.y = other.y - member.y;
			var totalDist = util.hypotenuse(oDiff.x, oDiff.y);
			if (totalDist <= this.minDist) {
				velocity.x = -1 * oDiff.x;
				velocity.y = -1 * oDiff.y;
				// velocity.x -= oDiff.x;
				// velocity.y -= oDiff.y;
				break;
			}
		}
		// if (util.hypotenuse(velocity.x, velocity.y) < this.minVelocity) {
			// velocity.x = velocity.y = 0;
		// }
		member.velocity = velocity;
	}

	// var average = 0;
	// for (var member in this.members) {
	// 	member = this.members[member];
	// 	var dist = util.hypotenuse(this.center.x - member.x, this.center.y - member.y);
	// 	// if (dist > furthest) {
	// 	// 	furthest = dist;
	// 	// }
	// 	average += dist;
	// }
	// average /= this.members.length;
	// // console.log(this.selectionWeight);
	// var newSelectionSize = average * this.selectionWeight;
	// if (newSelectionSize <= this.minSelectionSize) {
	// 	// console.log('a');
	// 	newSelectionSize = this.minSelectionSize;
	// }
	var newClickDist = 0;
	if (this.members.length >= this.maxMembers) {
		newClickDist = this.maxClickDist;
	} else {
		newClickDist = this.minClickDist + (this.maxClickDist - this.minClickDist) * (this.members.length / this.maxMembers);
	}
	this.clickDist = newClickDist;
	var newSelectionSize = this.minSelectionSize + this.members.length * this.selectionWeight;
	this.selection.width = newSelectionSize;
	this.selection.height = newSelectionSize;
};
Group.prototype.addMember = function(member) {
	this.members.push(member);
	member.group = this;
	this.myManager.background.myManager.updateRatios();
	// console.log(this.members);
};
Group.prototype.onInputDown = function() {
	// console.log('a');
	if (this.selected) {
		var bg = this.myManager.background.myManager.whereClicked();
		// console.log(bg);
		this.myManager.background.myManager.sendTo(this.myManager.background, bg, this);
		this.setSelected(false);
	} else if (this.clicked()) {
		this.click();
	}
};
Group.prototype.startEducation = function() {
	this.learning = false;
	this.book.visible = true;
	this.state.game.time.events.add(Phaser.Timer.SECOND * this.learningTime, this.endEducation, this);
};
Group.prototype.endEducation = function() {
	for (var member in this.members) {
		this.members[member].eduLevel += 1;
	}
	this.learning = false;
	this.book.visible = false;
};
Group.prototype.clicked = function() {
    if (this.members.length == 0) {
        return false;
    }
	var mouseX = this.game.input.x;
	var mouseY = this.game.input.y;
	var diffX = mouseX - this.center.x;
	var diffY = mouseY - this.center.y;
	var totalDiff = util.hypotenuse(diffX, diffY);
	if (totalDiff <= this.clickDist) {
		return true;
	}
	return false;
};
Group.prototype.click = function() {
	if (this.selected) {
        // this.state.hm.groupSelected = false;
		this.setSelected(false);
	} else if (!this.locked) {
        // this.state.hm.groupSelected = true;
		this.setSelected(true);
	}
};
Group.prototype.setSelected = function(newSelected) {
	this.selected = newSelected;
	this.selection.visible = newSelected;
    if (newSelected == true) {
        this.state.hm.groupSelected = this;
    } else {
        if (this.state.hm.groupSelected == this) {
            this.state.hm.groupSelected = null;
        }
    }
};
Group.prototype.changeCenter = function(newCenter) {
	this.selection.x = newCenter.x;
	this.selection.y = newCenter.y;
	this.book.x = newCenter.x;
	this.book.y = newCenter.y;
	this.lock.x = newCenter.x;
	this.lock.y = newCenter.y;
	this.center = newCenter;
};
Group.prototype.numPeople = function() {
	return this.members.length;
};
Group.prototype.lowestEducation = function() {
    var lowest = 3;
    for (var member in this.members) {
        member = this.members[member];
        if (member.eduLevel < lowest) {
            lowest = member.eduLevel;
        }
    }
    return lowest;
};
Group.prototype.averageHappiness = function() {
    var happiness = 0;
    for (var member in this.members) {
        member = this.members[member];
        happiness += member.happiness;
    }
    happiness /= this.members.length;
    return happiness;
};
Group.prototype.averageFatigue = function() {
    var fatigue = 0;
    for (var member in this.members) {
        member = this.members[member];
        fatigue += member.fatigue;
    }
    fatigue /= this.members.length;
    return fatigue;
};
Group.prototype.income = function() {
    var income = 0;
    for (var member in this.members) {
        member = this.members[member];
        income += member.getTax();
    }
    return income;
};
// Group.prototype.happinessChange = function() {
    
// };
// Group.prototype.incomeChange = function() {
    
// };
// Group.prototype.mouseDown = function() {
	
// };
Group.prototype.onMove = function() {
    if (this.members.length == 0) {
        return;
    }
    // console.log(this.members);
	var mouseX = this.game.input.x;
	var mouseY = this.game.input.y;
    var dist = util.hypotenuse(this.center.x - mouseX, this.center.y - mouseY);
    if (dist <= this.clickDist) {
        if (!this.state.hm.groupSelected || this.state.hm.groupSelected == this) {
            // console.log('a');
            // console.log(this.happinessModifier);
            this.state.hm.showStatic({people : this.numPeople(), education : this.lowestEducation(), happiness : this.averageHappiness(), fatigue : this.averageFatigue(), income : this.income(), happinessModifier : this.happinessModifier}, this.center.x, this.center.y - 50, 100);
            this.hover = true;
        }
    } else {
        if (this.hover) {
            this.hover = false;
            this.state.hm.hide();
        }
        if (this.state.hm.groupSelected == this && this.myManager.background.myManager.whereClicked() != this.myManager.background
            && this.myManager.background.myManager.canTransfer(this.myManager.background, this.myManager.background.myManager.whereClicked(), this)) {
            // console.log('a');
            var bgManager = this.myManager.background.myManager
            var transferType = bgManager.transferType(this.myManager.background, bgManager.whereClicked(), this);
            this.state.hm.showChange(transferType.can, {happinessChange : transferType.happinessChange, incomeChange : transferType.incomeChange}, mouseX, mouseY);
        } else {
            // console.log('b');
            this.state.hm.hide();
        }
    }
};
// Group.prototype.happinessModifier = function() {
//     return this.happinessModifier;
// };
Group.prototype.applyHappiness = function() {
	// console.log('apply');
	var flag = false;
	for (var member in this.members) {
		member = this.members[member];
		// console.log(member.happiness, this.happinessModifier);
		// console.logqmember.happiness, this.happinessModifier);
		member.happiness += this.happinessModifier;
		// member.happiness -= 50;
		if (member.happiness > 100) {
			member.happiness = 100;
		} else if (member.happiness <= 0) {
			member.happiness = 0;
			flag = true;
		}
	}
	if (flag) {
		this.getOutOfTown();
	}
};
Group.prototype.addFatigue = function(amt) {
	// console.log(amt);
	if (this.members[0].fatigue <= 0 && amt <= 0) {
		return;
	}
	var flag = false;
	for (var member in this.members) {
		this.members[member].fatigue += amt;
		if (this.members[member].fatigue >= 100) {
			flag = true;
		}
	}
	if (flag) {
		// console.log(this);
		this.getOutOfTown();
		//console.log('fatigue too dam high');
	}
};
Group.prototype.getOutOfTown = function() {
	var newBG = this.myManager.background.myManager.backgroundBy('house', this.myManager.background.incomeLevel);
	if (!newBG) {
		console.log('ERROR');
		return;
	}
	this.myManager.background.myManager.sendTo(this.myManager.background, newBG, this);
	this.lockIt();
}
Group.prototype.lockIt = function() {
    this.locked = true;
    this.lock.visible = true;
	this.state.game.time.events.add(Phaser.Timer.SECOND * this.lockTime, this.endLock, this);
};
Group.prototype.endLock = function() {
    this.locked = false;
    this.lock.visible = false;
};

module.exports = Group;













},{"../utils":"C:\\HACKUCSC\\src\\js\\utils.js"}],"C:\\HACKUCSC\\src\\js\\entities\\groupManager.js":[function(require,module,exports){
var Util = require('../utils');
var Group = require('./group');

var GroupManager = function (game, state) {
	this.game = game;
	this.members = [];
	this.state = state;
	this.splitChance = 0.1;
	this.maxSize = 2;
	this.margin = 50;
	this.width = 0;
	this.height = 0;
	this.center = {x : 0, y : 0};
};
GroupManager.prototype.constructor = GroupManager;
GroupManager.prototype.update = function() {
	// this.updateVars();
	// console.log(this.members);
	// console.log(this.center);
	//update bounds
	if (this.background) {
		var vars = this.background.getVarsCenter();
		this.width = vars.width;
		this.height = vars.height;
		this.center = vars.center;
		// console.log(vars);
	} else {
		return;
	}
	//update inter-group movement
	// console.log(Math.random());
	var largest = null;
	var largestSize = 0;
	for (var member in this.members) {
		member = this.members[member];
		var size = member.numPeople();
		if (size >= largestSize) {
			largestSize = size;
			largest = member;
		}
	}
	if (largestSize >= this.maxSize) {
		// console.log('split');
		var newGroup = new Group(this.game, this.center.x, this.center.y, this.state);
		this.addMember(newGroup);
		for (var i = 0; i < largestSize / 2; i++) {
			this.transferPeople(largest, newGroup, largest.members[0]);
		}
	}
	//update members
	for (member in this.members) {
		this.members[member].update();
	}
};
GroupManager.prototype.updateVars = function() {
	var vars = this.background.getVarsCenter();
	this.width = vars.width;
	this.height = vars.height;
	this.center = vars.center;
	// console.log(this.background.type, this.background.incomeLevel, vars.width, vars.height, vars.center.x, vars.center.y);
	var leftBound = this.center.x - this.width / 2;
	var rightBound = this.center.x + this.width / 2;
	var upperBound = this.center.y - this.height / 2;
	var lowerBound = this.center.y + this.height / 2;

	var myBG = this.background
	// console.log(myBG.type, myBG.incomeLevel, leftBound, rightBound, upperBound, lowerBound)

	for (var member in this.members) {
		member = this.members[member];
		if (member.center.x - this.margin <= leftBound || member.center.x + this.margin >= rightBound || member.center.y - this.margin <= upperBound || member.center.y + this.margin >= lowerBound) {
			console.log('person', member.center, leftBound, rightBound, upperBound, lowerBound);
			console.log('group manager', this.center, this.width, this.height);
			member.center.x = this.center.x - this.width / 2 + this.margin + (this.width - this.margin * 2) * Math.random();
			member.center.y = this.center.y - this.height / 2 + this.margin + (this.height - this.margin * 2) * Math.random();
		}
	}
};
GroupManager.prototype.transfer = function(otherGM, myMember) {
	// var testVals = otherGM.background.getVarsCenter();
	// console.log('transfer to', otherGM.background.type, otherGM.background.incomeLevel, testVals.center.y, testVals.y, testVals.visHeight, testVals.vRatio);
	var index = this.members.indexOf(myMember);
	this.members.splice(index, 1);
	otherGM.addMember(myMember);
};
GroupManager.prototype.transferPeople = function(source, destination, tPerson) {
	var index = source.members.indexOf(tPerson);
	source.members.splice(index, 1);
	destination.addMember(tPerson);
};
GroupManager.prototype.addMember = function(member) {
	this.members.push(member);
	member.myManager = this;
	member.center.x = this.center.x - this.width / 2 + this.margin + (this.width - this.margin * 2) * Math.random();
	member.center.y = this.center.y - this.height / 2 + this.margin + (this.height - this.margin * 2) * Math.random();
};
GroupManager.prototype.addPerson = function(newPerson) {
	if (this.members.length == 0) {
		// console.log(this.center);
		this.addMember(new Group(this.game, this.center.x, this.center.y, this.state), true);
		// console.log('new group');
	}
	this.members[0].addMember(newPerson);
};
GroupManager.prototype.numPeople = function() {
	var count = 0;
	for (var member in this.members) {
		member = this.members[member];
		count += member.numPeople();
	}
	return count;
};

module.exports = GroupManager;












},{"../utils":"C:\\HACKUCSC\\src\\js\\utils.js","./group":"C:\\HACKUCSC\\src\\js\\entities\\group.js"}],"C:\\HACKUCSC\\src\\js\\entities\\hoverMenu.js":[function(require,module,exports){
var HoverMenu = function (game, x, y, state) {
	Phaser.Sprite.call(this, game, x, y, 'bordered');
	game.add.existing(this);
	this.x = x;
	this.y = y;
    this.groupSelected = null;
	this.width = 256;
	this.height = 128;
    this.staticWidth = 256;
    this.staticHeight = 128;
    this.changeWidth = 224;
    this.changeHeight = 64;
    this.state = state;
	
	this.staticText = this.game.add.group();
	this.changeText = this.game.add.group();
    this.visible = false;

    this.chevron = this.game.add.sprite(this.x, this.y, 'chevrons');
    this.chevron.anchor.setTo(0.5, 0.5);
    this.chevron.frame = 3;
    this.chevron.y -= this.height;
    this.chevron.x += 25;
    
    // this.state.input.addMoveCallback(this.onInputMove, this);
	
	this.people = this.game.add.text(10, 10, 'People: 0');
	this.people.font = 'Roboto';
	this.people.fontSize = 18;
	this.people.fill = '#000000';
	
	this.education = this.game.add.text(10, 10, 'Education: Low');
	this.education.font = 'Roboto';
	this.education.fontSize = 18;
	this.education.fill = '#000000';
	
	this.happiness = this.game.add.text(10, 10, 'Happiness: %100');
	this.happiness.font = 'Roboto';
	this.happiness.fontSize = 18;
	this.happiness.fill = '#000000';
	
	this.fatigue = this.game.add.text(10, 10, 'Fatigue: %0');
	this.fatigue.font = 'Roboto';
	this.fatigue.fontSize = 18;
	this.fatigue.fill = '#000000';
	
    this.income = this.game.add.text(10, 10, 'Income: $0');
	this.income.font = 'Roboto';
	this.income.fontSize = 18;
	this.income.fill = '#000000';
    
	this.staticText.add(this.people);
	this.staticText.add(this.education);
    this.education.y += 22 * 1;
	this.staticText.add(this.happiness);
    this.happiness.y += 22 * 2;
	this.staticText.add(this.fatigue);
    this.fatigue.y += 22 * 3;
	this.staticText.add(this.income);
    this.income.y += 22 * 4;
    this.staticText.add(this.chevron);
    this.staticText.visible = false;
    this.staticText.x = this.x;
    this.staticText.y = this.y;
	
	this.happinessChange = this.game.add.text(10, 10, 'Happiness =');
	this.happinessChange.font = 'Roboto';
	this.happinessChange.fontSize = 18;
	this.happinessChange.fill = '#000000';
	
	this.incomeChange = this.game.add.text(10, 10, 'Income =');
	this.incomeChange.font = 'Roboto';
	this.incomeChange.fontSize = 18;
	this.incomeChange.fill = '#000000';
    
    this.changeText.add(this.happinessChange);
    this.changeText.add(this.incomeChange);
    this.incomeChange.y += 22 * 1;
    this.changeText.visible = false;
    this.changeText.x = this.x;
    this.changeText.y = this.y;
};
HoverMenu.prototype = Object.create(Phaser.Sprite.prototype);
HoverMenu.prototype.constructor = HoverMenu;
HoverMenu.prototype.update = function() {
	
};
//people, education, happiness, fatigue, income
HoverMenu.prototype.showStatic = function(state, x, y, over) {
    // console.log('static');
    x -= this.width / 2;
    y -= this.height;
	this.people.text = 'People: ' + state.people;
    this.education.text = 'Education: ' + state.education;
    this.happiness.text = 'Happiness: %' + state.happiness;
    this.fatigue.text = 'Fatigue: %' + state.fatigue;
    this.income.text = 'Income: $' + state.income;
    var happinessModifier = state.happinessModifier;
    if (happinessModifier == -3) {
        this.chevron.frame = 0;
    } else if (happinessModifier == -2) {
        this.chevron.frame = 1;
    } else if (happinessModifier == -1) {
        this.chevron.frame = 2;
    } else if (happinessModifier == 0) {
        this.chevron.frame = 3;
    } else if (happinessModifier == 1) {
        this.chevron.frame = 4;
    } else if (happinessModifier == 2) {
        this.chevron.frame = 5;
    } else if (happinessModifier == 3) {
        this.chevron.frame = 6;
    }
    this.staticText.visible = true;
    this.visible = true;
    this.width = this.staticWidth;
    this.height = this.staticHeight;
    this.x = x;
    this.y = y;
    this.staticText.x = x;
    this.staticText.y = y;
    this.adjustStatic(over);
};
//happinessChange, incomeChange
HoverMenu.prototype.showChange = function(can, state, x, y) {
    if (!can) {
        return;
    }
	this.happinessChange.text = 'Happiness change: ' + state.happinessChange;
    this.incomeChange.text = 'Income change: ' + state.incomeChange;
    this.changeText.visible = true;
    this.visible = true;
    this.width = this.changeWidth;
    this.height = this.changeHeight;
    y -= this.height;
    this.x = x;
    this.y = y;
    this.changeText.x = x;
    this.changeText.y = y;
    this.adjustChange();
};
HoverMenu.prototype.adjustStatic = function(over) {
    var maxWidth = this.game.width;
    var maxHeight = this.game.height;
    if (this.y - this.height <= 0) { // over top of screen
        this.y += over;
        this.y += this.height;
        this.staticText.y = this.y;
        this.changeText.y = this.y;
    }
    if (this.x - this.width / 2 < 0) { // over left of screen
        this.x += this.width / 2;
        this.staticText.x = this.x;
        this.changeText.x = this.x;
    } else if (this.x + this.width / 2 > maxWidth) { // over right of screen
        this.x -= this.width / 2;
        this.staticText.x = this.x;
        this.changeText.x = this.x;
    }
};
HoverMenu.prototype.adjustChange = function() {
    var maxWidth = this.game.width;
    var maxHeight = this.game.height;
    if (this.y - this.height <= 0) { // over top of screen
        this.y += this.height;
        this.staticText.y = this.y;
        this.changeText.y = this.y;
    }
    if (this.x + this.width > maxWidth) { // over right of screen
        this.x -= this.width;
        this.staticText.x = this.x;
        this.changeText.x = this.x;
    }
};
HoverMenu.prototype.hide = function() {
	this.staticText.visible = false;
    this.changeText.visible = false;
    this.visible = false;
};
// HoverMenu.prototype.onInputMove = function() {
  // console.log('move');
  
// };

module.exports = HoverMenu;



















},{}],"C:\\HACKUCSC\\src\\js\\entities\\person.js":[function(require,module,exports){
var Person = function (game, x, y, id) {
	Phaser.Sprite.call(this, game, x, y, 'ages');
	this.frame = 2;
	this.velocity = {x:0, y:0};
	this.width = 10;
	this.height = 10;
	this.speed = .05;
	this.id = id;
	this.eduLevel = Person.EDULEVEL.unemployed;
	this.happiness = 100;
    this.fatigue = 0;
    this.happinessModifier = 0;
    this.age = Person.AGE.young;
    this.turnCount = 0;
    this.ageThreshold = 5;
};
Person.prototype = Object.create(Phaser.Sprite.prototype);
Person.prototype.constructor = Person;

Person.EDULEVEL = {
	unemployed : -1,
	low  : 0,
	mid  : 1,
	high : 2
};

Person.INCOMES = {
	low : 10,
	mid : 20,
	high : 30
};

Person.AGE = {
	young : 0,
	adult : 1,
	old : 2
};

Person.prototype.update = function() {
	this.x += this.velocity.x * this.speed;
	this.y += this.velocity.y * this.speed;
	//console.log(this.velocity);
};

Person.prototype.ageTick = function() {
	// this.turnCount += 1;
	// if (this.turnCount >= this.ageThreshold) {
	// 	// console.log('happy birthday');
	// 	if (this.age == 0) {
	// 		this.age = Person.AGE.adult;
	// 		this.frame = 3;
	// 	} else if (this.age == 1) {
	// 		this.age = Person.AGE.old;
	// 		this.frame = 1;
	// 	} else if (this.age == 2) {

	// 	}
	// }
};

Person.prototype.getTax = function() {
	// console.log('get tax', this.group.myManager.background.type);
	if (this.group.myManager.background.type === 'house') {
		if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.low) {
			// console.log(this.group.myManager.background.myManager.state.taxMod.low);
			return -1 * Person.INCOMES.low;
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.mid) {
			return -2 * Person.INCOMES.mid;
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.high) {
			return -3 * Person.INCOMES.high;
		}
	} else if (this.group.myManager.background.type === 'work') {
		if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.low) {
			var overloadMult = 1;
			if ((this.group.myManager.background.myManager.bgArray[0].group_manager.numPeople() / this.group.myManager.background.myManager.numPeople()) > .5)
				overloadMult = .25;
			return overloadMult * (Person.INCOMES.low * this.group.myManager.background.myManager.state.taxMod.low);
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.mid) {
			var overloadMult = 1;
			if ((this.group.myManager.background.myManager.bgArray[1].group_manager.numPeople() / this.group.myManager.background.myManager.numPeople()) > .5)
				overloadMult = .25;
			return overloadMult * (Person.INCOMES.mid * this.group.myManager.background.myManager.state.taxMod.mid);
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.high) {
			var overloadMult = 1;
			if ((this.group.myManager.background.myManager.bgArray[2].group_manager.numPeople() / this.group.myManager.background.myManager.numPeople()) > .5)
				overloadMult = .25;
			return overloadMult * (Person.INCOMES.high * this.group.myManager.background.myManager.state.taxMod.high);
		}
	}
	return 0;
};

module.exports = Person;
},{}],"C:\\HACKUCSC\\src\\js\\entities\\player.js":[function(require,module,exports){
var Player = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'testsprite');
    game.add.existing(this);
	this.speed = 0.1;
}

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
	//this.x += this.velocity;
};

module.exports = Player;

},{}],"C:\\HACKUCSC\\src\\js\\entities\\uiBuilder.js":[function(require,module,exports){
var ProgressBar = require('./ProgressBar');

var UIBuilder = function(setGameState) {
	//Ensure that cannot create multiple instances of this class
	if(UIBuilder.prototype.exists) {
		return UIBuilder.prototype.existingReference;
	}
	
	this.gameState = setGameState;
	this.renderables = [];
	//Create and store a graphics object (used for stuff like drawing rectangles)
	UIBuilder.prototype.exists = true;
	UIBuilder.prototype.existingReference = this;
};

UIBuilder.prototype.constructor = UIBuilder;
//These var's help create the singleton functionality
UIBuilder.prototype.exists = false;
UIBuilder.prototype.existingReference = null;

//Use this function to create a progress bar
//Usage: type: can be "growing" or "shrinking", this will effect if bar starts at 0 and goes up or vis versa
//		 maxValue: sets the max value of the progress bar, i.e. using 100 creates a bar from 0 to 100
//		 x,y: sets location
//		 DON'T FORGET to overwrite the onEvent() function for the progress bar after creating it
//			-onEvent() is automatically called when bar fills/shrinks past limit (depending on bar type)
UIBuilder.prototype.buildProgressBar = function(type, x, y, width, height, maxValue) {
	//create and format new prog bar
	var graphics = this.gameState.game.add.graphics(0,0);
	var newProgBar = new ProgressBar(type, maxValue, graphics, this.renderables);
	newProgBar.setLocation(x,y);
	newProgBar.setSize(width, height);
	//subscribe to 'renderables' so that render() is called automatically
	// this.renderables.subscribe(newProgBar);
	this.renderables.push(newProgBar);
	return newProgBar;
};
UIBuilder.prototype.render = function() {
	for (renderable in this.renderables) {
		this.renderables[renderable].render();
	}
};

module.exports = UIBuilder;
},{"./ProgressBar":"C:\\HACKUCSC\\src\\js\\entities\\ProgressBar.js"}],"C:\\HACKUCSC\\src\\js\\main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, '-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
};


game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));
game.state.add('Game_Over', require('./states/game_over'));

game.state.start('Boot');

//game.stage.backgroundColor = "#ffffff";

},{"./states/boot":"C:\\HACKUCSC\\src\\js\\states\\boot.js","./states/game":"C:\\HACKUCSC\\src\\js\\states\\game.js","./states/game_over":"C:\\HACKUCSC\\src\\js\\states\\game_over.js","./states/menu":"C:\\HACKUCSC\\src\\js\\states\\menu.js","./states/preloader":"C:\\HACKUCSC\\src\\js\\states\\preloader.js","./states/splash":"C:\\HACKUCSC\\src\\js\\states\\splash.js","./utils":"C:\\HACKUCSC\\src\\js\\utils.js"}],"C:\\HACKUCSC\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"C:\\HACKUCSC\\src\\js\\states\\game.js":[function(require,module,exports){
var Player = require('../entities/player');
var Background_Manager = require('../entities/background_manager');
var Person = require('../entities/person');
var Group = require('../entities/group');
var GroupManager = require('../entities/groupManager');
var UIBuilder = require('../entities/uiBuilder');
var HoverMenu = require('../entities/hoverMenu');
var Utils = require('../utils');

var Game = function () {
  this.testentity = null;
  //this.flocks = [];
  this.bg_mg = null;
  // this.selectedGroup = null;
  this.money = null;
  this.moneyVal = 0;
  this.curMoney = 2000;
  this.moneyUpdateDelay = 0.001;
  this.moneyIncrementing = false;
  this.happinessVal = 0;
  this.curHappiness = 0;
  this.happinessUpdateDelay = 0.001;
  this.happinessIncrementing = false;
  this.taxTime = 5;
  this.taxMod = {low: 1, mid: 1, high: 1};
  this.minHappiness = 50;
	this.fatiguePerTick = 10;
	// this.moneyChangeFading = false;
	this.moneyChangeFadeDelay = 0.01;
	this.moneyChangeFadeRate = 0.025;
	this.moneyChangeHoldDelay = 1;
	this.migrantDelay = 5;
};

module.exports = Game;

Game.prototype = {

  create: function () {
  	console.log('foo');
	  // console.log(this);
    this.game.stage.backgroundColor = "#ededed";
    this.menu_bg = this.game.add.image(0, 0, 'menu_bg');  
    var x = (this.game.width / 2) - 100;
    var y = (this.game.height / 2) - 50;

    this.bg_mg = new Background_Manager(this.game, this);
	
    this.input.onDown.add(this.onInputDown, this);
	
	this.money = this.game.add.text(20, 15, '$0');
	this.money.font = "Roboto";
	this.money.fontSize = 24;
	this.money.fill = '#000000';
	this.money.text = '$0';

	this.moneyChange = this.game.add.text(120, 15, '$0');
	this.moneyChange.font = "Roboto";
	this.moneyChange.fontSize = 24;
	this.moneyChange.fill = '#000000';
	this.moneyChange.text = '+$0';
	this.moneyChange.alpha = 0;

	this.uib = new UIBuilder(this);
	this.bar = this.uib.buildProgressBar("growing", this.game.width / 2, 25, 300, 16, 100 - this.minHappiness);
	//this.bar.addValue(100);
	this.happy = this.game.add.sprite(this.game.width * .29, 25, 'happyface');
	this.happy.anchor.setTo(0.5, 0.5);

  // Tax buttons
  this.redTaxLow   = this.game.add.button(this.bg_mg.bgArray[0].getVarsCenter().center.x - 15, 75, 'taxReduce', this.decTaxLow, this);
  this.textTaxLow  = this.game.add.text(this.bg_mg.bgArray[0].getVars()[0], 78, '$$');
  this.textTaxLow.font = "Roboto";
  this.textTaxLow.fontSize = 18;
  this.addTaxLow   = this.game.add.button(this.bg_mg.bgArray[0].getVarsCenter().center.x + 15, 75, 'taxAdd', this.incTaxLow, this);
  this.redTaxLow.anchor.setTo(.5, .5);
  this.textTaxLow.anchor.setTo(0, .5);
  this.addTaxLow.anchor.setTo(.5, .5);
  this.redTaxMid   = this.game.add.button(this.bg_mg.bgArray[1].getVarsCenter().center.x - 15, 75, 'taxReduce', this.decTaxMid, this);
  this.textTaxMid  = this.game.add.text(this.bg_mg.bgArray[1].getVarsCenter().center.x, 78, '$$');
  this.textTaxMid.font = "Roboto";
  this.textTaxMid.fontSize = 18;
  this.addTaxMid   = this.game.add.button(this.bg_mg.bgArray[1].getVarsCenter().center.x + 15, 75, 'taxAdd', this.incTaxMid, this);
  this.redTaxMid.anchor.setTo(.5, .5);
  this.textTaxMid.anchor.setTo(0, .5);
  this.addTaxMid.anchor.setTo(.5, .5);
  this.redTaxHigh  = this.game.add.button(this.bg_mg.bgArray[2].getVarsCenter().center.x - 15, 75, 'taxReduce', this.decTaxHigh, this);
  this.textTaxHigh = this.game.add.text(this.bg_mg.bgArray[1].getVarsCenter().center.x, 78, '$$');
  this.textTaxHigh.font = "Roboto";
  this.textTaxHigh.fontSize = 18;
  this.addTaxHigh  = this.game.add.button(this.bg_mg.bgArray[2].getVarsCenter().center.x + 15, 75, 'taxAdd', this.incTaxHigh, this);
  this.redTaxHigh.anchor.setTo(.5, .5);
  this.textTaxHigh.anchor.setTo(0, .5);
  this.addTaxHigh.anchor.setTo(.5, .5);

	this.game.time.events.add(Phaser.Timer.SECOND * this.taxTime, this.collectTax, this);
    this.hm = new HoverMenu(this.game, 200, 200, this);
    // this.hm.anchor.setTo(0.5, 1);
	// this.hm.visible = false;
	this.game.time.events.add(Phaser.Timer.SECOND * this.moneyChangeFadeDelay, this.fadeMoneyChange, this);
	// this.game.time.events.add(Phaser.Timer.SECOND * this.migrantDelay, this.spawnMigrant, this);

	this.game.input.keyboard.onPressCallback = this.spawnMigrantNoRepeat;
	this.game.input.keyboard.state = this;
	this.game.input.keyboard.utils = Utils;
  this.input.addMoveCallback(this.onMouseMove, this);
  },
  testFun: function() {
  	// console.log('fun');
  		this.spawnMigrantNoRepeat()
  },
  update: function () {
	this.bg_mg.update();
	//this.gm.update();
	this.uib.render();
	var happiness = 0;
	  for (var bg in this.bg_mg.bgArray) {
		  for (var group in this.bg_mg.bgArray[bg].group_manager.members) {
			  for (var person in this.bg_mg.bgArray[bg].group_manager.members[group].members) {
				  happiness += this.bg_mg.bgArray[bg].group_manager.members[group].members[person].happiness;
			  }
		  }
	  }
	  happiness /= this.bg_mg.numPeople();
	  this.setHappiness(happiness);
	  happiness -= this.minHappiness;
	  // console.log(happiness);
	  // console.log(happiness);
    this.redTaxLow.x   = this.bg_mg.bgArray[0].getVarsCenter().center.x - 30;
    this.textTaxLow.x  = this.bg_mg.bgArray[0].getVarsCenter().center.x - 15;
    this.addTaxLow.x   = this.bg_mg.bgArray[0].getVarsCenter().center.x + 30;
    this.redTaxMid.x   = this.bg_mg.bgArray[1].getVarsCenter().center.x - 30;
    this.textTaxMid.x  = this.bg_mg.bgArray[1].getVarsCenter().center.x - 15;
    this.addTaxMid.x   = this.bg_mg.bgArray[1].getVarsCenter().center.x + 30;
    this.redTaxHigh.x  = this.bg_mg.bgArray[2].getVarsCenter().center.x - 30;
    this.textTaxHigh.x = this.bg_mg.bgArray[2].getVarsCenter().center.x - 15;
    this.addTaxHigh.x  = this.bg_mg.bgArray[2].getVarsCenter().center.x + 30;

    if (this.curHappiness < this.minHappiness) {
      this.game.state.start('Game_Over');
  	}
  	// console.log(this.moneyChange.alpha);
  },

  onInputDown: function () {
     var bg = this.bg_mg.whereClicked();
     var gm = bg.group_manager;
	   console.log(this.input.x, this.input.y, gm.center, gm.width, gm.height);
  },
  onMouseMove: function () {
    // var here = this.bg_mg.whereClicked();
    // console.log(this.input.x, this.input.y, here.type, here.incomeLevel, here.width, here.height);
  },
  spawnMigrant: function () {
  	// var newMigrant = new Person(this.game, this.game.width / 2, this.game.height + 15);
  	var newMigrant = new Person(this.game, this.game.width / 2 + Math.random() * 800 - 400, this.game.height + 15);
  	this.game.add.existing(newMigrant);
  	var bg = this.bg_mg.bgArray[6];
  	bg.group_manager.addPerson(newMigrant);
  	this.game.time.events.add(Phaser.Timer.SECOND * this.migrantDelay, this.spawnMigrant, this);
  	// console.log(bg)
  },
  spawnMigrantNoRepeat: function () {
  	// console.log(this);
	   var newMigrant = new Person(this.game, this.game.width / 2 + Math.random() * 800 - 400, this.game.height + 15);
  	this.game.add.existing(newMigrant);
  	// console.log(this.state);s
  	var bg = this.state.bg_mg.bgArray[6];
  	bg.group_manager.addPerson(newMigrant);

  	// console.log(this.utils.ratio(0, 0, 0, .2));
  },
  collectTax: function () {
	  // console.log('collect tax');
	  var taxes = 0;
	  for (var bg in this.bg_mg.bgArray) {
		  for (var group in this.bg_mg.bgArray[bg].group_manager.members) {
	  		// console.log(this.bg_mg.bgArray[bg].group_manager.members[group], this.bg_mg.bgArray[bg].group_manager.members[group].happinessModifier);
			  for (var person in this.bg_mg.bgArray[bg].group_manager.members[group].members) {
				  taxes += this.bg_mg.bgArray[bg].group_manager.members[group].members[person].getTax();
				  this.bg_mg.bgArray[bg].group_manager.members[group].members[person].ageTick();
			  }
			  if (this.bg_mg.bgArray[bg].group_manager.background.type == 'work') {
			  	this.bg_mg.bgArray[bg].group_manager.members[group].addFatigue(this.fatiguePerTick);
			  } else {
			  	this.bg_mg.bgArray[bg].group_manager.members[group].addFatigue(-1 * this.fatiguePerTick);
			  }
			  if (this.bg_mg.bgArray[bg].group_manager.members[group]) {
			  	// console.log('a');
			  	// console.log(this.bg_mg.bgArray[bg].group_manager.members[group], this.bg_mg.bgArray[bg].group_manager.members[group].happinessModifier);
			  	this.bg_mg.bgArray[bg].group_manager.members[group].applyHappiness();
			  }
		  }
	  }
	  this.addMoney(taxes);
	  this.moneyChange.text = ((taxes >= 0) ? '+' : '-') + '$' + taxes;
	  this.moneyChange.fill = (taxes >= 0) ? '#16fb04' : '#ff0000';
	  this.moneyChange.alpha = 1;
	  this.moneyChangeHold = true;

	  this.game.time.events.add(Phaser.Timer.SECOND * this.taxTime, this.collectTax, this);
  },
  fadeMoneyChange: function () {
  		// console.log(this.moneyChange.alpha);
  		if (this.moneyChangeHold) {
  			this.moneyChangeHold = false;
  			this.game.time.events.add(Phaser.Timer.SECOND * this.moneyChangeHoldDelay, this.fadeMoneyChange, this);
  		} else {
	  		this.moneyChange.alpha -= this.moneyChangeFadeRate;
	  		this.game.time.events.add(Phaser.Timer.SECOND * this.moneyChangeFadeDelay, this.fadeMoneyChange, this);
	  	}
  },
  setHappiness: function (amt) {
	  this.curHappiness = amt;
	  if (!this.happinessIncrementing) {
		  this.game.time.events.add(Phaser.Timer.SECOND * this.happinessUpdateDelay, this.incrementHappiness, this);
		  this.happinessIncrementing = true;
	  }
  },
  incrementHappiness: function () {
	if (this.happinessVal === this.curHappiness) {
		this.happinessIncrementing = false;
		return;
	}
	if (this.curHappiness > this.happinessVal) {
		this.bar.addValue(1);
		this.happinessVal += 1;
	} else if (this.curHappiness < this.happinessVal) {
		this.bar.addValue(-1);
		this.happinessVal -= 1;
	}
	this.game.time.events.add(Phaser.Timer.SECOND * this.happinessUpdateDelay, this.incrementHappiness, this);
  },
  addMoney: function (amt) {
	  this.curMoney += amt;
	  //this.money.text = '$' + newMoney;
	  if (!this.moneyIncrementing) {
		this.game.time.events.add(Phaser.Timer.SECOND * this.moneyUpdateDelay, this.incrementMoney, this);
		this.moneyIncrementing = true;
	  }
  },
  incrementMoney: function () {
	if (this.moneyVal === this.curMoney) {
		this.moneyIncrementing = false;
		return;
	}
	if (this.curMoney > this.moneyVal) {
		this.moneyVal += 10;
	} else if (this.curMoney < this.moneyVal) {
		this.moneyVal -= 10;
	}
	this.money.text = '$' + this.moneyVal;
	this.game.time.events.add(Phaser.Timer.SECOND * this.moneyUpdateDelay, this.incrementMoney, this);
  },
  decTaxLow: function () {
    if (this.taxMod.low == 1) {
      this.taxMod.low = .5;
      this.textTaxLow.text = '$';
    }
    else if (this.taxMod.low == 1.5) {
      this.taxMod.low = 1;
      this.textTaxLow.text = '$$';
    }
  },
  incTaxLow: function () {
    if (this.taxMod.low == .5) {
      this.taxMod.low = 1;
      this.textTaxLow.text = '$$';
    }
    else if (this.taxMod.low == 1) {
      this.taxMod.low = 1.5;
      this.textTaxLow.text = '$$$';
    }
  },
  decTaxMid: function () {
    if (this.taxMod.mid == 1) {
      this.taxMod.mid = .5;
      this.textTaxMid.text = '$';
    }
    else if (this.taxMod.mid == 1.5) {
      this.taxMod.mid = 1;
      this.textTaxMid.text = '$$';
    }
  },
  incTaxMid: function () {
    if (this.taxMod.mid == .5) {
      this.taxMod.mid = 1;
      this.textTaxMid.text = '$$';
    }
    else if (this.taxMod.mid == 1) {
      this.taxMod.mid = 1.5;
      this.textTaxMid.text = '$$$';
    }
  },
  decTaxHigh: function () {
    if (this.taxMod.high == 1) {
      this.taxMod.high = .5;
      this.textTaxHigh.text = '$';
    }
    else if (this.taxMod.high == 1.5) {
      this.taxMod.high = 1;
      this.textTaxHigh.text = '$$';
    }
  },
  incTaxHigh: function () {
    if (this.taxMod.high == .5) {
      this.taxMod.high = 1;
      this.textTaxHigh.text = '$$';
    }
    else if (this.taxMod.high == 1) {
      this.taxMod.high = 1.5;
      this.textTaxHigh.text = '$$$';
    }
  }
};














<<<<<<< HEAD
},{"../entities/background_manager":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\background_manager.js","../entities/group":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\group.js","../entities/groupManager":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\groupManager.js","../entities/hoverMenu":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\hoverMenu.js","../entities/person":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\person.js","../entities/player":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\player.js","../entities/uiBuilder":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\uiBuilder.js","../utils":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\utils.js"}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\game_over.js":[function(require,module,exports){
=======
},{"../entities/background_manager":"C:\\HACKUCSC\\src\\js\\entities\\background_manager.js","../entities/group":"C:\\HACKUCSC\\src\\js\\entities\\group.js","../entities/groupManager":"C:\\HACKUCSC\\src\\js\\entities\\groupManager.js","../entities/hoverMenu":"C:\\HACKUCSC\\src\\js\\entities\\hoverMenu.js","../entities/person":"C:\\HACKUCSC\\src\\js\\entities\\person.js","../entities/player":"C:\\HACKUCSC\\src\\js\\entities\\player.js","../entities/uiBuilder":"C:\\HACKUCSC\\src\\js\\entities\\uiBuilder.js"}],"C:\\HACKUCSC\\src\\js\\states\\game_over.js":[function(require,module,exports){
>>>>>>> 1f3ac272f7ca9f833fe9d59fb87f75f685ff6709
var Game_Over = function () {
  this.text = null;
  this.textSmall = null;
};

module.exports = Game_Over;

Game_Over.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "Roboto", fontSize: 64, fill: "#000000", align: "center" };
    var smallStyle = { font: "Roboto", fontSize: 32, fill: "#000000", align: "left" };

    this.text = this.add.text(x - 300, y - 200, "Game Over", style);
    this.textSmall = this.add.text(x - 300, y - 100, "your happiness went under 50%\n" + "click to continue", smallStyle);
    this.game.time.events.add(Phaser.Timer.SECOND * 3, this.doThing, this);
  },

  update: function () {

  },

  doThing: function() {
    this.input.onDown.add(this.onDown, this);
  },

  onDown: function () {
    this.game.state.start('Menu');
  }
};
},{}],"C:\\HACKUCSC\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "Roboto", fontSize: 64, fill: "#000000", align: "center" };

    this.text = this.add.text(x, y, "Click to Start", style);
    this.text.anchor.setTo(.5, .5);
    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],"C:\\HACKUCSC\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test.png');
    this.load.image('menu_bg', 'assets/menu_bg.png');
    this.load.image('background', 'assets/sectorBG.png')
    this.load.image('person', 'assets/person.png');
    this.load.image('selection', 'assets/selection.png');
    this.load.image('book', 'assets/book.png');
    this.load.image('young', 'assets/young.png');
    this.load.image('adult', 'assets/adult.png');
    this.load.image('old', 'assets/old.png');
    this.load.image('taxReduce', 'assets/taxReduce.png');
    this.load.image('taxAdd', 'assets/taxAdd.png');
    this.load.image('lock', 'assets/lock.png');
    this.load.spritesheet('chevrons', 'assets/chevron_sheet.png', 40, 50);
    // this.load.atlasJSONHash('chevrons', 'assets/chevrons.png', 'assets/chevrons.json');
    this.load.atlasJSONHash('ages', 'assets/ages.png', 'assets/ages.json');
    this.load.image('happyface', 'assets/happyface_better.png');
    this.load.image('bordered', 'assets/bordered.png');
    this.load.image('low_dollar', 'assets/low_dollar.png');
    this.load.image('med_dollar', 'assets/med_dollar.png');
    this.load.image('high_dollar', 'assets/high_dollar.png');
    this.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Game');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"C:\\HACKUCSC\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"C:\\HACKUCSC\\src\\js\\utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
	hypotenuse: function(a, b) {
		return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
	},
	ratio: function(a, b, c, min) {
		if (a == 0 && b == 0 && c == 0) {
			return {a : 1 / 3, b : 1 / 3, c : 1 / 3};
		}
		var sum = a + b + c
		// var aRatio = (a == 0) ? 0 : a / sum;
		// var bRatio = (b == 0) ? 0 : b / sum;
		// var cRatio = (c == 0) ? 0 : c / sum;
		var aRatio = a / sum;
		var bRatio = b / sum;
		var cRatio = c / sum;

		// if (arguments.length === 1) {
		// 	return [a / a];
		// }
		// else if (arguments.length === 2) {
		// 	return [a / (a + b), b / (a + b)];
		// }
		// else if (arguments.length === 3) {
		// 	return [a / (a + b + c), b / (a + b + c), c / (a + b + c)];
		// }
		// else {
		// 	return [];
		// }
		// console.log('util recieves', a, b, c, aRatio, bRatio, cRatio);
		if (aRatio < min) {
			if (bRatio < min) {
				// console.log(aRatio, bRatio, cRatio);
				var diffA = min - aRatio;
				var diffB = min - bRatio;
				// console.log(cRatio, diffA, diffB);
				cRatio -= diffA + diffB;
				aRatio = min;
				bRatio = min;
			} else if (cRatio < min) {
				var diffA = min - aRatio;
				var diffC = min - cRatio;
				// console.log(aRatio, bRatio, diffA, diffC);
				bRatio -= diffA + diffC;
				// console.log(bRatio);
				aRatio = min;
				cRatio = min;
			} else {
				var diff = min - aRatio;
				if (bRatio - diff / 2 < min) {
					var allowed = bRatio - min;
					var needed = diff - allowed;
					bRatio = min;
					cRatio -= needed;
					aRatio = min;
				} else if (cRatio - diff / 2 < min) {
					var allowed = cRatio - min;
					var needed = diff - allowed;
					cRatio = min;
					bRatio -= needed;
					aRatio = min;
				} else {
					aRatio = min;
					bRatio -= diff / 2;
					cRatio -= diff / 2;
				}
			}
		} else if (bRatio < min) {
			if (cRatio < min) {
				var diffB = min - bRatio;
				var diffC = min - cRatio;
				aRatio -= diffB + diffC;
				bRatio = min;
				cRatio = min;
			} else {
				var diff = min - bRatio;
				if (aRatio - diff / 2 < min) {
					var allowed = aRatio - min;
					var needed = diff - allowed;
					aRatio = min;
					cRatio -= needed;
					bRatio = min;
				} else if (cRatio - diff / 2 < min) {
					var allowed = cRatio - min;
					var needed = diff - allowed;
					cRatio = min;
					aRatio -= needed;
					bRatio = min;
				} else {
					bRatio = min;
					aRatio -= diff / 2;
					cRatio -= diff / 2;
				}
			}
		} else if (cRatio < min) {
			// console.log('case a');
			var diff = min - cRatio;
			if (aRatio - diff / 2 < min) {
				// console.log('case b');
				var allowed = aRatio - min;
				var needed = diff - allowed;
				aRatio = min;
				bRatio -= needed;
				cRatio = min;
			} else if (bRatio - diff / 2 < min) {
				// console.log('case c');
				var allowed = bRatio - min;
				var needed = diff - allowed;
				bRatio = min;
				aRatio -= needed;
				cRatio = min;
			} else {
				// console.log('case d');
				cRatio = min;
				aRatio -= diff / 2;
				cRatio -= diff / 2;
			}
		}
		// console.log('util returns', aRatio, bRatio, cRatio);
		return {a : aRatio, b : bRatio, c : cRatio};
	}
};


module.exports = Utils;
<<<<<<< HEAD
},{}]},{},["C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
},{}]},{},["C:\\HACKUCSC\\src\\js\\main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> 1f3ac272f7ca9f833fe9d59fb87f75f685ff6709

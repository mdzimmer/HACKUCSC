(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\ProgressBar.js":[function(require,module,exports){
//NOTE: DON'T USE this code to create a ProgressBar. Instead, use the UIBuilder object and call buildProgressBar

var ProgressBar = function(setType, setMaxValue, setGraphics, setRenderables) {
	this.type = setType; //Two types, "growing" (starts at 0, triggers event when full) 
						 //and "shrinking" (starts full, triggers at 0)
	this.bgBorderSize = 2;			//default size of background border
	this.bgBorderColor = 0x00000;	//default color of background border
	this.bgColor = 0xffffff;		//default color of background
	this.paddingHoriz = 10;			//default sum of padding on left and right side inner value bar
	this.paddingVert = 10;			//default sum (i.e. half on each side) of vertical padding of inner value bar
	// this.valueBorderSize = 1;		//default size of value border
	// this.valueBorderColor = 0x8888FF; //default color of value border
	this.valueColor = 0x000000;		//default color of inner value bar
	this.x = null;
	this.y = null;
	this.width = null;
	this.height = null;
	this.maxValue = setMaxValue;
	this.graphics = setGraphics; //store graphics class (used to draw bar)
	this.renderables = setRenderables;
	
	this.onEvent = function() {}; //overwrite this function to make whatever you want happen when progressBar reaches limit
	
	//switch(this.type) {
	//case 'growing' : 
	if(setType === 'growing') {
		this.value = 0;
		//tryTrigger is called automatically when you add/subtract value, and will trigger the onEvent() function
		this.tryTrigger = function() {
			if(this.value >= this.maxValue) {
				this.onEvent();
			}
		};
		//break;
	}
	else if(setType === 'shrinking') {
	//case 'shrinking' :
		this.value = this.maxValue;
		this.tryTrigger = function() {
			if(this.value <= 0) {
				this.onEvent();
			}
		};
	}
};

ProgressBar.prototype.constructor = ProgressBar;

ProgressBar.prototype.destroy = function() {
	this.graphics.clear();
	this.renderables.unsubscribe(this);
};

//To subtract value, just use negative numbers as argument i.e. foo.addValue(-5);
ProgressBar.prototype.addValue = function (addThis) {
	this.value += addThis;
	if(this.value > this.maxValue) {
		this.value = this.maxValue;
	}
	if(this.value < 0) {
		this.value = 0;
	}
	this.tryTrigger();
};

//Sets the location where progress bar is rendered
ProgressBar.prototype.setLocation = function(setX, setY) {
	this.x = setX;
	this.y = setY;
};

//Sets the size of the progress bar
ProgressBar.prototype.setSize = function(setWidth, setHeight) {
	this.width = setWidth;
	this.height = setHeight;
};

ProgressBar.prototype.setStyle = function(bgBorderSize, bgBorderColor, bgColor, paddingHoriz, paddingVert, valueBorderSize, valueBorderColor, valueColor) {
	this.bgBorderSize = bgBorderSize;
	this.bgBorderColor = bgBorderColor;
	this.bgColor = bgColor;
	this.paddingHoriz = paddingHoriz;
	this.paddingVert = paddingVert;
	this.valueBorderSize = valueBorderSize;
	this.valueBorderColor = valueBorderColor;
	this.valueColor = valueColor;
};

//update for progress bar, called just before drawing progress bar
//Overwrite this function if desired
ProgressBar.prototype.update = function() {};

//Renders progressBar
ProgressBar.prototype.render = function() {
	this.update();
	this.graphics.clear();
	//Draw background of bar
	this.graphics.lineStyle(this.bgBorderSize, this.bgBorderColor, 1); //sets border color and size
	this.graphics.beginFill(this.bgColor); //sets color of background fill
	this.graphics.drawRect(this.x-this.width/2, this.y-this.height/2, this.width, this.height);
	this.graphics.endFill();
	//Draw value of bar
	var percentage = this.value / this.maxValue;
	var barWidth = this.width - this.paddingHoriz;
	var barHeight = this.height - this.paddingVert;
	this.graphics.lineStyle(this.valueBorderSize, this.valueBorderColor, 1);
	this.graphics.beginFill(this.valueColor);
	this.graphics.drawRect(this.x-(barWidth/2), this.y-(barHeight/2), barWidth*percentage, barHeight);
	this.graphics.endFill();
};

module.exports = ProgressBar;
},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\background.js":[function(require,module,exports){
var Group_Manager = require('./groupManager');
var Person = require('./person');

var Background = function (game, baseX, baseY, hRatio, vRatio, income, type, state) {
    Phaser.Sprite.call(this, game, (baseX * hRatio * game.width), (baseY * vRatio * game.height) + 100, 'background');
    game.add.existing(this);
    this.baseX = baseX;
    this.baseY = baseY;
    this.hRatio = hRatio;
    this.vRatio = vRatio;
    this.newHRatio = hRatio;
    this.newVRatio = vRatio;
    this.minRatio = .1;
    this.group_manager = new Group_Manager(this.game, state);
	this.group_manager.background = this;
   	this.type = type;
    this.incomeLevel = income;
	this.state = state
};

Background.prototype = Object.create(Phaser.Sprite.prototype);
Background.prototype.constructor = Background;

Background.prototype.getVars = function() {
    //return x & y and width & height of visible
    return [this.x, this.y, this.hRatio * (this.game.width), this.vRatio * (this.game.height - this.myManager.border)];
};

Background.prototype.getVarsCenter = function() {
    // //return x & y of center and width & height of visible
    var visWidth = this.hRatio * (this.game.width);
    var visHeight = this.vRatio * (this.game.height - this.myManager.border);
    return {width : visWidth, height : visHeight, center : {x : this.x + visWidth / 2, y : this.y + visHeight / 2}};
};

Background.prototype.numPeople = function() {
    var num = this.group_manager.numPeople();
    if (num === 0) return 1;
    else return num;
};

Background.prototype.update = function() {
	if (this.newHRatio < this.minRatio) this.newHRatio = this.minRatio;
    if (this.newVRatio < this.minRatio) this.newVRatio = this.minRatio;
    if (this.hRatio !== this.newHRatio) {
        if (this.hRatio + .01 < this.newHRatio) this.hRatio += .01;
        else if (this.hRatio - .01 > this.newHRatio) this.hRatio -= .01;
        else this.hRatio = this.newHRatio;
    }
    if (this.vRatio !== this.newVRatio) {
        if (this.vRatio + .01 < this.newVRatio) this.vRatio += .01;
        else if (this.vRatio - .01 > this.newVRatio) this.vRatio -= .01;
        else this.vRatio = this.newVRatio;
    }
    if (this.type === 'unemployed')
        this.hRatio = 1;
    this.group_manager.update();
};



module.exports = Background;
},{"./groupManager":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\groupManager.js","./person":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\person.js"}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\background_manager.js":[function(require,module,exports){
//Controls background elements

var Background = require('./background');
var Person = require('./person');
var util = require('../utils');

var Group = require('./group');

var Background_Manager = function(game, state) {
	this.game = game;
	this.state = state;
	//Create array of backgrounds
	this.bgArray = [
		new Background(this.game, 0, 0, .33, .33, Person.EDULEVEL.low , 'work' , state),	// this.bgArray[0] == workLow
		new Background(this.game, 1, 0, .33, .33, Person.EDULEVEL.mid , 'work' , state),	// this.bgArray[1] == workMid
		new Background(this.game, 2, 0, .33, .33, Person.EDULEVEL.high, 'work' , state),	// this.bgArray[2] == workMid
		new Background(this.game, 0, 1, .33, .33, Person.EDULEVEL.low , 'house', state),	// this.bgArray[3] == houseLow
		new Background(this.game, 1, 1, .33, .33, Person.EDULEVEL.mid , 'house', state),	// this.bgArray[4] == houseMid
		new Background(this.game, 2, 1, .33, .33, Person.EDULEVEL.high, 'house', state),	// this.bgArray[5] == houseMid
		new Background(this.game, 0, 2,   1, .33, '',              'unemployed', state)		// this.bgArray[6] == unemployed
	];
	for (bg in this.bgArray) {
		this.bgArray[bg].myManager = this;
	}
	
	for (var i in this.bgArray) {
		if (this.bgArray[i].type == 'work') {
			if (this.bgArray[i].incomeLevel === Person.EDULEVEL.low) {
				this.bgArray[i].tint = 0xed5c5a;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.mid) {
				this.bgArray[i].tint = 0x6ae246;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.high) {
				this.bgArray[i].tint = 0x2b59e2;
			}
		}
		else if (this.bgArray[i].type == 'house') {
			if (this.bgArray[i].incomeLevel === Person.EDULEVEL.low) {
				this.bgArray[i].tint = 0xed8180;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.mid) {
				this.bgArray[i].tint = 0x94ea79;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.high) {
				this.bgArray[i].tint = 0x5476dd;
			}
		}
		else { // Unemployed background
			this.bgArray[i].tint = 0xe7e7e7;
		}
		this.border = 100;
	}
	
	// var test = this.bgArray[6].group_manager;
	// var testFlock = new Group(this.game, this.game.width / 2 + 100, (this.game.height - this.border) / 2 + 100, state);
 //    for (var i = 0; i < 10; i++) {
 //    	var testPerson = new Person(this.game, this.game.width / 2 + i * 15, (this.game.height - this.border) / 2 + i * 15, i);
 //    	this.game.add.existing(testPerson);
 //    	testFlock.addMember(testPerson);
 //    }
 //    test.addMember(testFlock);
	// testFlock = new Group(this.game, this.game.width / 2 - 100, (this.game.height - this.border) / 2 + 100, state);
	// for (var i = 0; i < 10; i++) {
    	// var testPerson = new Person(this.game, this.game.width / 2 + i * 15 - 100, (this.game.height - this.border) / 2 + i * 15 + 100, i);
    	// this.game.add.existing(testPerson);
    	// testFlock.addMember(testPerson);
    // }
    // test.addMember(testFlock);
};

Background_Manager.prototype.constructor = Background_Manager;

/*Background_Manager.BGNAMES = {
		workLow    : this.bgArray[0],
		workMid    : this.bgArray[1],
		workHigh   : this.bgArray[2],
		houseLow   : this.bgArray[3],
		houseMid   : this.bgArray[4],
		houseHigh  : this.bgArray[5],
		unemployed : this.bgArray[6]
};*/

Background_Manager.prototype.sendTo = function(source, destination, group) {
	// console.log(destination);
	// console.log(source, destination);
	if (destination === null) {
		return;
	}
	var transType = this.transferType(source, destination, group)
	// console.log(source, destination, group, transType);
	if (transType.can) {	// Check if they can transfer up
		// console.log('b');
		source.group_manager.transfer(destination.group_manager, group, transType.happiness);
		if (transType.educate) {
			group.startEducation();
		}
		if (source.incomeLevel !== destination.incomeLevel)
			this.updateRatios(destination);
        // console.log(transType.happinessModifier);
		// console.log(transType.happinessModifier);
        group.happinessModifier = transType.happinessModifier;
		// console.log(group.happinessModifier);
        // for (var person in group.members) {
        // 	// console.log(transType.happinessModifier);
        //     // group.happinessModifier = transType.happinessMsodifier;
        // 	// console.log(group.happinessModifier);
        // }
		// var test = destination.getVarsCenter();
		// console.log(test);
	}
	// console.log(group.happinessModifier);
};
Background_Manager.prototype.numPeople = function() {
	var count = 0;
	for (var i in this.bgArray) {
		count += this.bgArray[i].group_manager.numPeople();
	}
	return count;
};
Background_Manager.prototype.transferType = function(source, destination, group) {
    if (destination == null) {
        return;
    }
	var groupEdu = group.members[0].eduLevel;
	var can = this.canTransfer(source, destination, group);
	// console.log(destination);
	// console.log(destination.type, destination.incomeLevel);
	var educate = (destination.type === 'house' && destination.incomeLevel) > groupEdu;
    var happinessModifier = 0;
    if (destination.type == 'unemployed' && source.type != 'unemployed') {
    	// console.log('unemployment');
        happinessModifier -= 1;
    }
    if (destination.incomeLevel < groupEdu) {
    	// console.log('education');
        happinessModifier -= groupEdu - destination.incomeLevel;
    }
    if (destination.type == 'house') {
    	// console.log('housing');
    	happinessModifier += 1;
    }
    if (destination.type == 'work') {
    	// console.log('tax', destination.incomeLevel, this.state.taxMod.low);
    	if (destination.incomeLevel == 0) {
	    	if (this.state.taxMod.low == .5) {
	    		happinessModifier += 1;
	    	} else if (this.state.taxMod.low == 1) {
	    		
	    	} else if (this.state.taxMod.low == 1.5) {
	    		happinessModifier -= 1;
	    	}
    	} else if (destination.incomeLevel == 1) {
	    	if (this.state.taxMod.mid == .5) {
	    		happinessModifier += 1;
	    	} else if (this.state.taxMod.mid == 1) {
	    		
	    	} else if (this.state.taxMod.mid == 1.5) {
	    		happinessModifier -= 1;
	    	}
    	} else if (destination.incomeLevel == 2) {
	    	if (this.state.taxMod.high == .5) {
	    		happinessModifier += 1;
	    	} else if (this.state.taxMod.high == 1) {

	    	} else if (this.state.taxMod.high == 1.5) {
	    		happinessModifier -= 1;
	    	}
    	}
 	}
 	// console.log(happinessModifier, group.happinessModifier);
    var happinessChange = happinessModifier - group.happinessModifier;
    // console.log(happinessChange, happinessModifier, group.happinessModifier);
    var incomeChange = 0;
    var baseIncome = group.income();
    var newIncome = 0;
    var numPeople = group.numPeople();
    if (destination.type == 'work') {
    	// console.log('tax', destination.incomeLevel, this.state.taxMod.low);
    	if (destination.incomeLevel == 0) {
	    	newIncome += numPeople * Person.INCOMES.low * this.state.taxMod.low;
    	} else if (destination.incomeLevel == 1) {
	    	newIncome += numPeople * Person.INCOMES.mid * this.state.taxMod.mid;
    	} else if (destination.incomeLevel == 2) {
	    	newIncome += numPeople * Person.INCOMES.high * this.state.taxMod.high;
    	}
 	} else if (destination.type == 'home') {
 		if (destination.incomeLevel == 0) {
	    	newIncome -= numPeople * Person.INCOMES.low;
    	} else if (destination.incomeLevel == 1) {
	    	newIncome -= numPeople * Person.INCOMES.mid;
    	} else if (destination.incomeLevel == 2) {
	    	newIncome -= numPeople * Person.INCOMES.high;
    	}
 	}
 	// console.log(newIncome, baseIncome)
 	var incomeChange = newIncome - baseIncome;
 	// console.log(happinessModifier);
	return {can : can, educate : educate, happinessChange : happinessChange, incomeChange : incomeChange, happinessModifier : happinessModifier};
};
Background_Manager.prototype.canTransfer = function(source, destination, group) {
	// console.log(source, destination, group);
	if (source === null || destination === null) return false;
	var sourceEdu = group.members[0].eduLevel;
	if (destination.type === 'unemployed') {
		return true;
	}
	if (sourceEdu === Person.EDULEVEL.unemployed) {
		if (destination.incomeLevel === Person.EDULEVEL.low && destination.type === 'house') {
			return true;
		}
	} else if (sourceEdu === Person.EDULEVEL.low) {
		if (destination.incomeLevel === Person.EDULEVEL.low) {
			return true;
		} else if (destination.incomeLevel === Person.EDULEVEL.mid) {
			if (destination.type === 'house') {
				return true;
			}
		}
	} else if (sourceEdu === Person.EDULEVEL.mid) {
		if (destination.incomeLevel === Person.EDULEVEL.low) {
			return true;
		} else if (destination.incomeLevel === Person.EDULEVEL.mid) {
			return true;
		} else if (destination.incomeLevel === Person.EDULEVEL.high) {
			if (destination.type === 'house') {
				return true;
			}
		}
	} else if (sourceEdu === Person.EDULEVEL.high) {
		return true;
	}
	return false;
};
Background_Manager.prototype.backgroundBy = function(type, incomeLevel) {
	for (var bg in this.bgArray) {
		bg = this.bgArray[bg];
		if (bg.type == type && bg.incomeLevel == incomeLevel) {
			return bg;
		}
	}
	return null;
};

Background_Manager.prototype.whereClicked = function() {
	for (var i in this.bgArray) {
		var curDimensions = this.bgArray[i].getVars();
		var mouseX = this.game.input.x;
		var mouseY = this.game.input.y;
		// if(i == 6) console.log('curDimensions: ' + curDimensions);
		if (mouseX > curDimensions[0] && mouseX <= curDimensions[0] + curDimensions[2]) {
			if (mouseY > curDimensions[1] && mouseY <= curDimensions[1] + curDimensions[3]) {
				return this.bgArray[i];
			}
		}
	}
	return null;
};

Background_Manager.prototype.findOther = function(source, destination) {
	if (source.type === 'work' && destination.type === 'work') {
		if (source.incomeLevel === Person.EDULEVEL.low) {
			if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[2];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[1];
		}
		else if (source.incomeLevel === Person.EDULEVEL.mid) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[2];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[0];
		}
		else if (source.incomeLevel === Person.EDULEVEL.high) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[1];
			else if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[0];
		}
	}
	else if (source.type === 'house' && destination.type === 'house') {
		if (source.incomeLevel === Person.EDULEVEL.low) {
			if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[5];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[4];
		}
		else if (source.incomeLevel === Person.EDULEVEL.mid) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[5];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[3];
		}
		else if (source.incomeLevel === Person.EDULEVEL.high) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[4];
			else if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[3];
		}
	}
};

Background_Manager.prototype.updateRatios = function(destination) {
	if (destination.type === 'work') {
		var hRatios = util.ratio(this.bgArray[0].numPeople(), this.bgArray[1].numPeople(), this.bgArray[2].numPeople());
	}
	else{
		var hRatios = util.ratio(this.bgArray[3].numPeople(), this.bgArray[4].numPeople(), this.bgArray[5].numPeople());
	}
	var employed = 0;
	for (var j = 0; j < 6; j++)
		employed += this.bgArray[j].numPeople();
	var vRatios = util.ratio(this.bgArray[6].numPeople(), employed);
	for (var i = 0 in this.bgArray) {
		if (i !== 6) {		// If not unemployed bg
			if (i < 3) {	// If work bg
				this.bgArray[i].newHRatio = hRatios[i];
				this.bgArray[i].newVRatio = vRatios[1] / 2;
			}
			else {			// If house bg
				this.bgArray[i].newHRatio = hRatios[i - 3];
				this.bgArray[i].newVRatio = vRatios[1] / 2;
			}
		}
		else bgArray[i].newVRatio = vRatios[0]; // Unemployed bg
	}
};

Background_Manager.prototype.update = function() {
	for (var i in this.bgArray) {
    	if (this.bgArray[i].incomeLevel === Person.EDULEVEL.mid) {
    		this.bgArray[i].x = this.bgArray[0].getVars()[2];
    	}
    	else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.high) {
    	    this.bgArray[i].x = this.bgArray[1].getVars()[0] + this.bgArray[1].getVars()[2];
    	}
    	this.bgArray[i].y = (this.bgArray[i].baseY * this.bgArray[i].vRatio * (this.game.height - this.border)) + this.border;
		this.bgArray[i].update();
	}
	var test = this.bgArray[3].getVarsCenter();
};

module.exports = Background_Manager;
},{"../utils":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\utils.js","./background":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\background.js","./group":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\group.js","./person":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\person.js"}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\group.js":[function(require,module,exports){
//controls flocking for a group of person objects
var util = require('../utils');

var Group = function (game, centerX, centerY, state) {
	this.game = game;
	this.members = [];
	this.minDist = 20;
	//this.noise = 10;
	this.center = {x : centerX, y : centerY};
	this.clickDist = 50;
	this.selected = false;
	this.selection = this.game.add.sprite(this.center.x, this.center.y, 'selection');
	this.selection.anchor.setTo(0.5, 0.5);
	this.selection.width = 100;
	this.selection.height = 100;
	this.selection.visible = false;
	this.velocity = {x : 0, y : 0};
	this.speed = .05;
	this.state = state;
	this.book = this.game.add.sprite(this.center.x, this.center.y, 'book');
	this.book.anchor.setTo(0.5, 0.5);
	this.book.width = 25;
	this.book.height = 25;
	this.book.visible = false;
	this.learningTime = .01;
    this.hover = false;
    this.lock = this.game.add.sprite(this.center.x, this.center.y, 'lock');
	this.lock.anchor.setTo(0.5, 0.5);
	this.lock.width = 25;
	this.lock.height = 35;
	this.lock.visible = false;
	this.lockTime = 5;
	this.happinessModifier = 0;
	this.selecionWeight = 1;
	this.minSelectionSize = 10;
	
	this.state.input.onDown.add(this.onInputDown, this);
    this.state.input.addMoveCallback(this.onMove, this);
}
Group.prototype.constructor = Group;
Group.prototype.update = function() {
	// console.log(this.center);
	//update center
	var newX = this.center.x + this.velocity.x * this.speed;
	var newY = this.center.y + this.velocity.y * this.speed;
	this.changeCenter({x : newX, y : newY});
	for (var member in this.members) {
		member = this.members[member];
		var velocity = {x:0, y:0};
		var diff = {x:0, y:0};
		diff.x = this.center.x - member.x;
		diff.y = this.center.y - member.y;
		velocity.x += diff.x;
		velocity.y += diff.y;
		for (var other in this.members) {
			other = this.members[other];
			//ignore self
			if (other === member) {
				continue;
			}
			var oDiff = {x:0, y:0};
			oDiff.x = other.x - member.x;
			oDiff.y = other.y - member.y;
			var totalDist = util.hypotenuse(oDiff.x, oDiff.y);
			if (totalDist <= this.minDist) {
				velocity.x = -1 * oDiff.x;
				velocity.y = -1 * oDiff.y;
				// velocity.x -= oDiff.x;
				// velocity.y -= oDiff.y;
				break;
			}
		}
		// if (util.hypotenuse(velocity.x, velocity.y) < this.minVelocity) {
			// velocity.x = velocity.y = 0;
		// }
		member.velocity = velocity;
	}
	// var furthest = 0;
	// for (var member in this.members) {
	// 	member = this.members[member];
	// 	var dist = util.hypotenuse(this.center.x - member.x, this.center.y - member.y));
	// 	if (dist > furthest) {
	// 		furthest = dist;
	// 	}
	// }
	// var newSelectionSize = furthest * this.selectionWeight;
	// if (newSelectionSize <= this.minSelectionSize) {
	// 	console.log('a');
	// 	newSelectionSize = this.minSelectionSize;
	// }
	// this.selection.width = newSelectionSize;
	// this.selection.height = newSelectionSize;
};
Group.prototype.addMember = function(member) {
	this.members.push(member);
	member.group = this;
	// console.log(this.members);
};
Group.prototype.onInputDown = function() {
	// console.log('a');
	if (this.selected) {
		// console.log('c');
		// console.log(this.myManager, this.myManager.background);
		var bg = this.myManager.background.myManager.whereClicked();
		// console.log(bg);
		this.myManager.background.myManager.sendTo(this.myManager.background, bg, this);
		this.setSelected(false);
	} else if (this.clicked()) {
		this.click();
	}
};
Group.prototype.startEducation = function() {
	this.learning = false;
	this.book.visible = true;
	this.state.game.time.events.add(Phaser.Timer.SECOND * this.learningTime, this.endEducation, this);
};
Group.prototype.endEducation = function() {
	for (var member in this.members) {
		this.members[member].eduLevel += 1;
	}
	this.learning = false;
	this.book.visible = false;
};
Group.prototype.clicked = function() {
    if (this.members.length == 0) {
        return false;
    }
	var mouseX = this.game.input.x;
	var mouseY = this.game.input.y;
	var diffX = mouseX - this.center.x;
	var diffY = mouseY - this.center.y;
	var totalDiff = util.hypotenuse(diffX, diffY);
	if (totalDiff <= this.clickDist) {
		return true;
	}
	return false;
};
Group.prototype.click = function() {
	if (this.selected) {
        // this.state.hm.groupSelected = false;
		this.setSelected(false);
	} else if (!this.locked) {
        // this.state.hm.groupSelected = true;
		this.setSelected(true);
	}
};
Group.prototype.setSelected = function(newSelected) {
	this.selected = newSelected;
	this.selection.visible = newSelected;
    if (newSelected == true) {
        this.state.hm.groupSelected = this;
    } else {
        if (this.state.hm.groupSelected == this) {
            this.state.hm.groupSelected = null;
        }
    }
};
Group.prototype.changeCenter = function(newCenter) {
	this.selection.x = newCenter.x;
	this.selection.y = newCenter.y;
	this.book.x = newCenter.x;
	this.book.y = newCenter.y;
	this.lock.x = newCenter.x;
	this.lock.y = newCenter.y;
	this.center = newCenter;
};
Group.prototype.numPeople = function() {
	return this.members.length;
};
Group.prototype.lowestEducation = function() {
    var lowest = 3;
    for (var member in this.members) {
        member = this.members[member];
        if (member.eduLevel < lowest) {
            lowest = member.eduLevel;
        }
    }
    return lowest;
};
Group.prototype.averageHappiness = function() {
    var happiness = 0;
    for (var member in this.members) {
        member = this.members[member];
        happiness += member.happiness;
    }
    happiness /= this.members.length;
    return happiness;
};
Group.prototype.averageFatigue = function() {
    var fatigue = 0;
    for (var member in this.members) {
        member = this.members[member];
        fatigue += member.fatigue;
    }
    fatigue /= this.members.length;
    return fatigue;
};
Group.prototype.income = function() {
    var income = 0;
    for (var member in this.members) {
        member = this.members[member];
        income += member.getTax();
    }
    return income;
};
// Group.prototype.happinessChange = function() {
    
// };
// Group.prototype.incomeChange = function() {
    
// };
// Group.prototype.mouseDown = function() {
	
// };
Group.prototype.onMove = function() {
    if (this.members.length == 0) {
        return;
    }
	var mouseX = this.game.input.x;
	var mouseY = this.game.input.y;
    var dist = util.hypotenuse(this.center.x - mouseX, this.center.y - mouseY);
    if (dist <= this.clickDist) {
        if (!this.state.hm.groupSelected || this.state.hm.groupSelected == this) {
            // console.log('a');
            // console.log(this.happinessModifier);
            this.state.hm.showStatic({people : this.numPeople(), education : this.lowestEducation(), happiness : this.averageHappiness(), fatigue : this.averageFatigue(), income : this.income(), happinessModifier : this.happinessModifier}, this.center.x, this.center.y - 50, 100);
            this.hover = true;
        }
    } else {
        if (this.hover) {
            this.hover = false;
            this.state.hm.hide();
        }
        if (this.state.hm.groupSelected == this && this.myManager.background.myManager.whereClicked() != this.myManager.background
            && this.myManager.background.myManager.canTransfer(this.myManager.background, this.myManager.background.myManager.whereClicked(), this)) {
            // console.log('a');
            var bgManager = this.myManager.background.myManager
            var transferType = bgManager.transferType(this.myManager.background, bgManager.whereClicked(), this);
            this.state.hm.showChange(transferType.can, {happinessChange : transferType.happinessChange, incomeChange : transferType.incomeChange}, mouseX, mouseY);
        } else {
            // console.log('b');
            this.state.hm.hide();
        }
    }
};
// Group.prototype.happinessModifier = function() {
//     return this.happinessModifier;
// };
Group.prototype.applyHappiness = function() {
	// console.log('apply');
	var flag = false;
	for (var member in this.members) {
		member = this.members[member];
		// console.log(member.happiness, this.happinessModifier);
		// console.logqmember.happiness, this.happinessModifier);
		member.happiness += this.happinessModifier;
		// member.happiness -= 50;
		if (member.happiness > 100) {
			member.happiness = 100;
		} else if (member.happiness <= 0) {
			member.happiness = 0;
			flag = true;
		}
	}
	if (flag) {
		this.getOutOfTown();
	}
};
Group.prototype.addFatigue = function(amt) {
	// console.log(amt);
	if (this.members[0].fatigue <= 0 && amt <= 0) {
		return;
	}
	var flag = false;
	for (var member in this.members) {
		this.members[member].fatigue += amt;
		if (this.members[member].fatigue >= 100) {
			flag = true;
		}
	}
	if (flag) {
		// console.log(this);
		this.getOutOfTown();
		//console.log('fatigue too dam high');
	}
};
Group.prototype.getOutOfTown = function() {
	var newBG = this.myManager.background.myManager.backgroundBy('house', this.myManager.background.incomeLevel);
	if (!newBG) {
		console.log('ERROR');
		return;
	}
	this.myManager.background.myManager.sendTo(this.myManager.background, newBG, this);
	this.lockIt();
}
Group.prototype.lockIt = function() {
    this.locked = true;
    this.lock.visible = true;
	this.state.game.time.events.add(Phaser.Timer.SECOND * this.lockTime, this.endLock, this);
};
Group.prototype.endLock = function() {
    this.locked = false;
    this.lock.visible = false;
};

module.exports = Group;













},{"../utils":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\utils.js"}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\groupManager.js":[function(require,module,exports){
var Util = require('../utils');
var Group = require('./group');

var GroupManager = function (game, state) {
	this.game = game;
	this.members = [];
	this.state = state;
};
GroupManager.prototype.constructor = GroupManager;
GroupManager.prototype.update = function() {
	// console.log(this.center);
	//update bounds
	if (this.background) {
		var vars = this.background.getVarsCenter();
		this.width = vars.width;
		this.height = vars.height;
		this.center = vars.center;
		// console.log(vars);
	} else {
		return;
	}
	//update member velocity
	for (var member in this.members) {
		member = this.members[member];
		var velocity = {x : 0, y : 0};
		// console.log(this.center, member.center);
		var diffX = this.center.x - member.center.x;
		var diffY = this.center.y - member.center.y;
		velocity.x = diffX;
		velocity.y = diffY;
		for (var other in this.members) {
			other = this.members[other];
			if (other === member) {
				continue;
			}
			var oDiffx = other.center.x - member.center.x;
			var oDiffy = other.center.y - member.center.y;
			var hyp = Util.hypotenuse(oDiffx, oDiffy);
			//console.log(hyp);
			if (hyp <= this.minDist) {
				// console.log('b', hyp);
				velocity.x = -1 * oDiffx;
				velocity.y = -1 * oDiffy;
				break;
			} else {
				// console.log('a');
			}
		}
		member.velocity = velocity;
	}
	//update members
	for (member in this.members) {
		this.members[member].update();
	}
};
GroupManager.prototype.transfer = function(otherGM, myMember) {
	var testVals = otherGM.background.getVarsCenter();
	// console.log('transfer to', otherGM.background.type, otherGM.background.incomeLevel, testVals.center.y, testVals.y, testVals.visHeight, testVals.vRatio);
	var index = this.members.indexOf(myMember);
	this.members.splice(index, 1);
	otherGM.addMember(myMember);
};
GroupManager.prototype.addMember = function(member) {
	this.members.push(member);
	member.myManager = this;
	var smaller = (this.width < this.height) ? this.width : this.height;
	this.minDist = smaller / this.members.length;
	// console.log(this.minDist);
};
GroupManager.prototype.addPerson = function(newPerson) {
	if (this.members.length == 0) {
		// console.log(this.center);
		this.addMember(new Group(this.game, this.center.x, this.center.y, this.state));
		// console.log('new group');
	}
	this.members[0].addMember(newPerson);
};
GroupManager.prototype.numPeople = function() {
	var count = 0;
	for (var member in this.members) {
		member = this.members[member];
		count += member.numPeople();
	}
	return count;
};

module.exports = GroupManager;












},{"../utils":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\utils.js","./group":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\group.js"}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\hoverMenu.js":[function(require,module,exports){
var HoverMenu = function (game, x, y, state) {
	Phaser.Sprite.call(this, game, x, y, 'bordered');
	game.add.existing(this);
	this.x = x;
	this.y = y;
    this.groupSelected = null;
	this.width = 256;
	this.height = 128;
    this.staticWidth = 256;
    this.staticHeight = 128;
    this.changeWidth = 224;
    this.changeHeight = 64;
    this.state = state;
	
	this.staticText = this.game.add.group();
	this.changeText = this.game.add.group();
    this.visible = false;

    this.chevron = this.game.add.sprite(this.x, this.y, 'chevrons');
    this.chevron.anchor.setTo(0.5, 0.5);
    this.chevron.width = 50;
    this.chevron.height = 50;
    this.chevron.y -= this.height;
    this.chevron.x += 25;
    
    // this.state.input.addMoveCallback(this.onInputMove, this);
	
	this.people = this.game.add.text(10, 10, 'People: 0');
	this.people.font = 'Roboto';
	this.people.fontSize = 18;
	this.people.fill = '#000000';
	
	this.education = this.game.add.text(10, 10, 'Education: Low');
	this.education.font = 'Roboto';
	this.education.fontSize = 18;
	this.education.fill = '#000000';
	
	this.happiness = this.game.add.text(10, 10, 'Happiness: %100');
	this.happiness.font = 'Roboto';
	this.happiness.fontSize = 18;
	this.happiness.fill = '#000000';
	
	this.fatigue = this.game.add.text(10, 10, 'Fatigue: %0');
	this.fatigue.font = 'Roboto';
	this.fatigue.fontSize = 18;
	this.fatigue.fill = '#000000';
	
    this.income = this.game.add.text(10, 10, 'Income: $0');
	this.income.font = 'Roboto';
	this.income.fontSize = 18;
	this.income.fill = '#000000';
    
	this.staticText.add(this.people);
	this.staticText.add(this.education);
    this.education.y += 22 * 1;
	this.staticText.add(this.happiness);
    this.happiness.y += 22 * 2;
	this.staticText.add(this.fatigue);
    this.fatigue.y += 22 * 3;
	this.staticText.add(this.income);
    this.income.y += 22 * 4;
    this.staticText.add(this.chevron);
    this.staticText.visible = false;
    this.staticText.x = this.x;
    this.staticText.y = this.y;
	
	this.happinessChange = this.game.add.text(10, 10, 'Happiness =');
	this.happinessChange.font = 'Roboto';
	this.happinessChange.fontSize = 18;
	this.happinessChange.fill = '#000000';
	
	this.incomeChange = this.game.add.text(10, 10, 'Income =');
	this.incomeChange.font = 'Roboto';
	this.incomeChange.fontSize = 18;
	this.incomeChange.fill = '#000000';
    
    this.changeText.add(this.happinessChange);
    this.changeText.add(this.incomeChange);
    this.incomeChange.y += 22 * 1;
    this.changeText.visible = false;
    this.changeText.x = this.x;
    this.changeText.y = this.y;
};
HoverMenu.prototype = Object.create(Phaser.Sprite.prototype);
HoverMenu.prototype.constructor = HoverMenu;
HoverMenu.prototype.update = function() {
	
};
//people, education, happiness, fatigue, income
HoverMenu.prototype.showStatic = function(state, x, y, over) {
    x -= this.width / 2;
    y -= this.height;
	this.people.text = 'People: ' + state.people;
    this.education.text = 'Education: ' + state.education;
    this.happiness.text = 'Happiness: %' + state.happiness;
    this.fatigue.text = 'Fatigue: %' + state.fatigue;
    this.income.text = 'Income: $' + state.income;
    var happinessModifier = state.happinessModifier;
    if (happinessModifier == -3) {
        this.chevron.frame = 2;
    } else if (happinessModifier == -2) {
        this.chevron.frame = 1;
    } else if (happinessModifier == -1) {
        this.chevron.frame = 0;
    } else if (happinessModifier == 0) {
        this.chevron.frame = 3;
    } else if (happinessModifier == 1) {
        this.chevron.frame = 4;
    } else if (happinessModifier == 2) {
        this.chevron.frame = 5;
    } else if (happinessModifier == 3) {
        this.chevron.frame = 6;
    }
    this.staticText.visible = true;
    this.visible = true;
    this.width = this.staticWidth;
    this.height = this.staticHeight;
    this.x = x;
    this.y = y;
    this.staticText.x = x;
    this.staticText.y = y;
    this.adjustStatic(over);
};
//happinessChange, incomeChange
HoverMenu.prototype.showChange = function(can, state, x, y) {
    if (!can) {
        return;
    }
	this.happinessChange.text = 'Happiness change: ' + state.happinessChange;
    this.incomeChange.text = 'Income change: ' + state.incomeChange;
    this.changeText.visible = true;
    this.visible = true;
    this.width = this.changeWidth;
    this.height = this.changeHeight;
    y -= this.height;
    this.x = x;
    this.y = y;
    this.changeText.x = x;
    this.changeText.y = y;
    this.adjustChange();
};
HoverMenu.prototype.adjustStatic = function(over) {
    var maxWidth = this.game.width;
    var maxHeight = this.game.height;
    if (this.y - this.height <= 0) { // over top of screen
        this.y += over;
        this.y += this.height;
        this.staticText.y = this.y;
        this.changeText.y = this.y;
    }
    if (this.x - this.width / 2 < 0) { // over left of screen
        this.x += this.width / 2;
        this.staticText.x = this.x;
        this.changeText.x = this.x;
    } else if (this.x + this.width / 2 > maxWidth) { // over right of screen
        this.x -= this.width / 2;
        this.staticText.x = this.x;
        this.changeText.x = this.x;
    }
};
HoverMenu.prototype.adjustChange = function() {
    var maxWidth = this.game.width;
    var maxHeight = this.game.height;
    if (this.y - this.height <= 0) { // over top of screen
        this.y += this.height;
        this.staticText.y = this.y;
        this.changeText.y = this.y;
    }
    if (this.x + this.width > maxWidth) { // over right of screen
        this.x -= this.width;
        this.staticText.x = this.x;
        this.changeText.x = this.x;
    }
};
HoverMenu.prototype.hide = function() {
	this.staticText.visible = false;
    this.changeText.visible = false;
    this.visible = false;
};
// HoverMenu.prototype.onInputMove = function() {
  // console.log('move');
  
// };

module.exports = HoverMenu;



















},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\person.js":[function(require,module,exports){
var Person = function (game, x, y, id) {
	Phaser.Sprite.call(this, game, x, y, 'ages');
	this.frame = 2;
	this.velocity = {x:0, y:0};
	this.width = 10;
	this.height = 10;
	this.speed = .05;
	this.id = id;
	this.eduLevel = Person.EDULEVEL.unemployed;
	this.happiness = 100;
    this.fatigue = 0;
    this.happinessModifier = 0;
    this.age = Person.AGE.young;
    this.turnCount = 0;
    this.ageThreshold = 5;
};
Person.prototype = Object.create(Phaser.Sprite.prototype);
Person.prototype.constructor = Person;

Person.EDULEVEL = {
	unemployed : -1,
	low  : 0,
	mid  : 1,
	high : 2
};

Person.INCOMES = {
	low : 10,
	mid : 20,
	high : 30
};

Person.AGE = {
	young : 0,
	adult : 1,
	old : 2
};

Person.prototype.update = function() {
	this.x += this.velocity.x * this.speed;
	this.y += this.velocity.y * this.speed;
	//console.log(this.velocity);
};

Person.prototype.ageTick = function() {
	// this.turnCount += 1;
	// if (this.turnCount >= this.ageThreshold) {
	// 	// console.log('happy birthday');
	// 	if (this.age == 0) {
	// 		this.age = Person.AGE.adult;
	// 		this.frame = 3;
	// 	} else if (this.age == 1) {
	// 		this.age = Person.AGE.old;
	// 		this.frame = 1;
	// 	} else if (this.age == 2) {

	// 	}
	// }
};

Person.prototype.getTax = function() {
	// console.log('get tax', this.group.myManager.background.type);
	if (this.group.myManager.background.type === 'house') {
		if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.low) {
			// console.log(this.group.myManager.background.myManager.state.taxMod.low);
			return -1 * Person.INCOMES.low;
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.mid) {
			return -2 * Person.INCOMES.mid;
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.high) {
			return -3 * Person.INCOMES.high;
		}
	} else if (this.group.myManager.background.type === 'work') {
		if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.low) {
			return Person.INCOMES.low * this.group.myManager.background.myManager.state.taxMod.low;
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.mid) {
			return Person.INCOMES.mid * this.group.myManager.background.myManager.state.taxMod.mid;
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.high) {
			return Person.INCOMES.high * this.group.myManager.background.myManager.state.taxMod.high;
		}
	}
	return 0;
};

module.exports = Person;
},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\player.js":[function(require,module,exports){
var Player = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'testsprite');
    game.add.existing(this);
	this.speed = 0.1;
}

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
	//this.x += this.velocity;
};

module.exports = Player;

},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\uiBuilder.js":[function(require,module,exports){
var ProgressBar = require('./ProgressBar');

var UIBuilder = function(setGameState) {
	//Ensure that cannot create multiple instances of this class
	if(UIBuilder.prototype.exists) {
		return UIBuilder.prototype.existingReference;
	}
	
	this.gameState = setGameState;
	this.renderables = [];
	//Create and store a graphics object (used for stuff like drawing rectangles)
	UIBuilder.prototype.exists = true;
	UIBuilder.prototype.existingReference = this;
};

UIBuilder.prototype.constructor = UIBuilder;
//These var's help create the singleton functionality
UIBuilder.prototype.exists = false;
UIBuilder.prototype.existingReference = null;

//Use this function to create a progress bar
//Usage: type: can be "growing" or "shrinking", this will effect if bar starts at 0 and goes up or vis versa
//		 maxValue: sets the max value of the progress bar, i.e. using 100 creates a bar from 0 to 100
//		 x,y: sets location
//		 DON'T FORGET to overwrite the onEvent() function for the progress bar after creating it
//			-onEvent() is automatically called when bar fills/shrinks past limit (depending on bar type)
UIBuilder.prototype.buildProgressBar = function(type, x, y, width, height, maxValue) {
	//create and format new prog bar
	var graphics = this.gameState.game.add.graphics(0,0);
	var newProgBar = new ProgressBar(type, maxValue, graphics, this.renderables);
	newProgBar.setLocation(x,y);
	newProgBar.setSize(width, height);
	//subscribe to 'renderables' so that render() is called automatically
	// this.renderables.subscribe(newProgBar);
	this.renderables.push(newProgBar);
	return newProgBar;
};
UIBuilder.prototype.render = function() {
	for (renderable in this.renderables) {
		this.renderables[renderable].render();
	}
};

module.exports = UIBuilder;
},{"./ProgressBar":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\ProgressBar.js"}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, '-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
};


game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));
game.state.add('Game_Over', require('./states/game_over'));

game.state.start('Boot');

//game.stage.backgroundColor = "#ffffff";

},{"./states/boot":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\boot.js","./states/game":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\game.js","./states/game_over":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\game_over.js","./states/menu":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\menu.js","./states/preloader":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\preloader.js","./states/splash":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\splash.js","./utils":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\utils.js"}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\game.js":[function(require,module,exports){
var Player = require('../entities/player');
var Background_Manager = require('../entities/background_manager');
var Person = require('../entities/person');
var Group = require('../entities/group');
var GroupManager = require('../entities/groupManager');
var UIBuilder = require('../entities/uiBuilder');
var HoverMenu = require('../entities/hoverMenu');

var Game = function () {
  this.testentity = null;
  //this.flocks = [];
  this.bg_mg = null;
  // this.selectedGroup = null;
  this.money = null;
  this.moneyVal = 0;
  this.curMoney = 0;
  this.moneyUpdateDelay = 0.001;
  this.moneyIncrementing = false;
  this.happinessVal = 0;
  this.curHappiness = 0;
  this.happinessUpdateDelay = 0.001;
  this.happinessIncrementing = false;
  this.taxTime = 2;
  this.taxMod = {low: 1, mid: 1, high: 1};
  this.minHappiness = 50;
	this.fatiguePerTick = 10;
	// this.moneyChangeFading = false;
	this.moneyChangeFadeDelay = 0.01;
	this.moneyChangeFadeRate = 0.025;
	this.moneyChangeHoldDelay = 1;
	this.migrantDelay = 1;
};

module.exports = Game;

Game.prototype = {

  create: function () {
  	// console.log('fooff');
	  // console.log(this);
    this.game.stage.backgroundColor = "#ededed";
    this.menu_bg = this.game.add.image(0, 0, 'menu_bg');  
    var x = (this.game.width / 2) - 100;
    var y = (this.game.height / 2) - 50;

    this.bg_mg = new Background_Manager(this.game, this);
	
    this.input.onDown.add(this.onInputDown, this);
	
	this.money = this.game.add.text(20, 20, '$0');
	this.money.font = "Roboto";
	this.money.fontSize = 24;
	this.money.fill = '#000000';
	this.money.text = '$0';

	this.moneyChange = this.game.add.text(80, 20, '$0');
	this.moneyChange.font = "Roboto";
	this.moneyChange.fontSize = 24;
	this.moneyChange.fill = '#000000';
	this.moneyChange.text = '+$0';
	this.moneyChange.alpha = 0;

	this.uib = new UIBuilder(this);
	this.bar = this.uib.buildProgressBar("growing", this.game.width / 2, 25, 300, 16, 100 - this.minHappiness);
	//this.bar.addValue(100);
	this.happy = this.game.add.sprite(this.game.width * .29, 25, 'happyface');
	this.happy.anchor.setTo(0.5, 0.5);

  // Tax buttons
  this.redTaxLow   = this.game.add.button(this.bg_mg.bgArray[0].getVarsCenter().center.x - 15, 75, 'taxReduce', this.decTaxLow, this);
  this.textTaxLow  = this.game.add.text(this.bg_mg.bgArray[0].getVars()[0], 78, '$$');
  this.textTaxLow.font = "Roboto";
  this.textTaxLow.fontSize = 18;
  this.addTaxLow   = this.game.add.button(this.bg_mg.bgArray[0].getVarsCenter().center.x + 15, 75, 'taxAdd', this.incTaxLow, this);
  this.redTaxLow.anchor.setTo(.5, .5);
  this.textTaxLow.anchor.setTo(0, .5);
  this.addTaxLow.anchor.setTo(.5, .5);
  this.redTaxMid   = this.game.add.button(this.bg_mg.bgArray[1].getVarsCenter().center.x - 15, 75, 'taxReduce', this.decTaxMid, this);
  this.textTaxMid  = this.game.add.text(this.bg_mg.bgArray[1].getVarsCenter().center.x, 78, '$$');
  this.textTaxMid.font = "Roboto";
  this.textTaxMid.fontSize = 18;
  this.addTaxMid   = this.game.add.button(this.bg_mg.bgArray[1].getVarsCenter().center.x + 15, 75, 'taxAdd', this.incTaxMid, this);
  this.redTaxMid.anchor.setTo(.5, .5);
  this.textTaxMid.anchor.setTo(0, .5);
  this.addTaxMid.anchor.setTo(.5, .5);
  this.redTaxHigh  = this.game.add.button(this.bg_mg.bgArray[2].getVarsCenter().center.x - 15, 75, 'taxReduce', this.decTaxHigh, this);
  this.textTaxHigh = this.game.add.text(this.bg_mg.bgArray[1].getVarsCenter().center.x, 78, '$$');
  this.textTaxHigh.font = "Roboto";
  this.textTaxHigh.fontSize = 18;
  this.addTaxHigh  = this.game.add.button(this.bg_mg.bgArray[2].getVarsCenter().center.x + 15, 75, 'taxAdd', this.incTaxHigh, this);
  this.redTaxHigh.anchor.setTo(.5, .5);
  this.textTaxHigh.anchor.setTo(0, .5);
  this.addTaxHigh.anchor.setTo(.5, .5);

	this.game.time.events.add(Phaser.Timer.SECOND * this.taxTime, this.collectTax, this);
    this.hm = new HoverMenu(this.game, 200, 200, this);
    // this.hm.anchor.setTo(0.5, 1);
	// this.hm.visible = false;
	this.game.time.events.add(Phaser.Timer.SECOND * this.moneyChangeFadeDelay, this.fadeMoneyChange, this);
	this.game.time.events.add(Phaser.Timer.SECOND * this.migrantDelay, this.spawnMigrant, this);
  },

  update: function () {
	this.bg_mg.update();
	//this.gm.update();
	this.uib.render();
	var happiness = 0;
	  for (var bg in this.bg_mg.bgArray) {
		  for (var group in this.bg_mg.bgArray[bg].group_manager.members) {
			  for (var person in this.bg_mg.bgArray[bg].group_manager.members[group].members) {
				  happiness += this.bg_mg.bgArray[bg].group_manager.members[group].members[person].happiness;
			  }
		  }
	  }
	  happiness /= this.bg_mg.numPeople();
	  this.setHappiness(happiness);
	  happiness -= this.minHappiness;
	  // console.log(happiness);
	  // console.log(happiness);
    this.redTaxLow.x   = this.bg_mg.bgArray[0].getVarsCenter().center.x - 30;
    this.textTaxLow.x  = this.bg_mg.bgArray[0].getVarsCenter().center.x - 15;
    this.addTaxLow.x   = this.bg_mg.bgArray[0].getVarsCenter().center.x + 30;
    this.redTaxMid.x   = this.bg_mg.bgArray[1].getVarsCenter().center.x - 30;
    this.textTaxMid.x  = this.bg_mg.bgArray[1].getVarsCenter().center.x - 15;
    this.addTaxMid.x   = this.bg_mg.bgArray[1].getVarsCenter().center.x + 30;
    this.redTaxHigh.x  = this.bg_mg.bgArray[2].getVarsCenter().center.x - 30;
    this.textTaxHigh.x = this.bg_mg.bgArray[2].getVarsCenter().center.x - 15;
    this.addTaxHigh.x  = this.bg_mg.bgArray[2].getVarsCenter().center.x + 30;

    if (this.curHappiness < this.minHappiness) {
      this.game.state.start('Game_Over');
  	}
  	// console.log(this.moneyChange.alpha);
  },

  onInputDown: function () {
	 // console.log(this.game.width, this.game.height);
  },
  spawnMigrant: function () {
  	// console.log('spawn');
  	// var newMigrant = new Person(this.game, this.game.width / 2, this.game.height + 15);
  	var newMigrant = new Person(this.game, this.game.width / 2 + Math.random() * 800 - 400, this.game.height + 15);
  	this.game.add.existing(newMigrant);
  	var bg = this.bg_mg.bgArray[6];
  	bg.group_manager.addPerson(newMigrant);
  	this.game.time.events.add(Phaser.Timer.SECOND * this.migrantDelay, this.spawnMigrant, this);
  	// console.log(bg)
  },
  collectTax: function () {
	  // console.log('collect tax');
	  var taxes = 0;
	  for (var bg in this.bg_mg.bgArray) {
		  for (var group in this.bg_mg.bgArray[bg].group_manager.members) {
	  		// console.log(this.bg_mg.bgArray[bg].group_manager.members[group], this.bg_mg.bgArray[bg].group_manager.members[group].happinessModifier);
			  for (var person in this.bg_mg.bgArray[bg].group_manager.members[group].members) {
				  taxes += this.bg_mg.bgArray[bg].group_manager.members[group].members[person].getTax();
				  this.bg_mg.bgArray[bg].group_manager.members[group].members[person].ageTick();
			  }
			  if (this.bg_mg.bgArray[bg].group_manager.background.type == 'work') {
			  	this.bg_mg.bgArray[bg].group_manager.members[group].addFatigue(this.fatiguePerTick);
			  } else {
			  	this.bg_mg.bgArray[bg].group_manager.members[group].addFatigue(-1 * this.fatiguePerTick);
			  }
			  if (this.bg_mg.bgArray[bg].group_manager.members[group]) {
			  	// console.log('a');
			  	// console.log(this.bg_mg.bgArray[bg].group_manager.members[group], this.bg_mg.bgArray[bg].group_manager.members[group].happinessModifier);
			  	this.bg_mg.bgArray[bg].group_manager.members[group].applyHappiness();
			  }
		  }
	  }
	  this.addMoney(taxes);
	  this.moneyChange.text = ((taxes >= 0) ? '+' : '-') + '$' + taxes;
	  this.moneyChange.fill = (taxes >= 0) ? '#16fb04' : '#ff0000';
	  this.moneyChange.alpha = 1;
	  this.moneyChangeHold = true;

	  this.game.time.events.add(Phaser.Timer.SECOND * this.taxTime, this.collectTax, this);
  },
  fadeMoneyChange: function () {
  		// console.log(this.moneyChange.alpha);
  		if (this.moneyChangeHold) {
  			this.moneyChangeHold = false;
  			this.game.time.events.add(Phaser.Timer.SECOND * this.moneyChangeHoldDelay, this.fadeMoneyChange, this);
  		} else {
	  		this.moneyChange.alpha -= this.moneyChangeFadeRate;
	  		this.game.time.events.add(Phaser.Timer.SECOND * this.moneyChangeFadeDelay, this.fadeMoneyChange, this);
	  	}
  },
  setHappiness: function (amt) {
	  this.curHappiness = amt;
	  if (!this.happinessIncrementing) {
		  this.game.time.events.add(Phaser.Timer.SECOND * this.happinessUpdateDelay, this.incrementHappiness, this);
		  this.happinessIncrementing = true;
	  }
  },
  incrementHappiness: function () {
	if (this.happinessVal === this.curHappiness) {
		this.happinessIncrementing = false;
		return;
	}
	if (this.curHappiness > this.happinessVal) {
		this.bar.addValue(1);
		this.happinessVal += 1;
	} else if (this.curHappiness < this.happinessVal) {
		this.bar.addValue(-1);
		this.happinessVal -= 1;
	}
	this.game.time.events.add(Phaser.Timer.SECOND * this.happinessUpdateDelay, this.incrementHappiness, this);
  },
  addMoney: function (amt) {
	  this.curMoney += amt;
	  //this.money.text = '$' + newMoney;
	  if (!this.moneyIncrementing) {
		this.game.time.events.add(Phaser.Timer.SECOND * this.moneyUpdateDelay, this.incrementMoney, this);
		this.moneyIncrementing = true;
	  }
  },
  incrementMoney: function () {
	if (this.moneyVal === this.curMoney) {
		this.moneyIncrementing = false;
		return;
	}
	if (this.curMoney > this.moneyVal) {
		this.moneyVal += 5;
	} else if (this.curMoney < this.moneyVal) {
		this.moneyVal -= 5;
	}
	this.money.text = '$' + this.moneyVal;
	this.game.time.events.add(Phaser.Timer.SECOND * this.moneyUpdateDelay, this.incrementMoney, this);
  },
  decTaxLow: function () {
    if (this.taxMod.low == 1) {
      this.taxMod.low = .5;
      this.textTaxLow.text = '$';
    }
    else if (this.taxMod.low == 1.5) {
      this.taxMod.low = 1;
      this.textTaxLow.text = '$$';
    }
  },
  incTaxLow: function () {
    if (this.taxMod.low == .5) {
      this.taxMod.low = 1;
      this.textTaxLow.text = '$$';
    }
    else if (this.taxMod.low == 1) {
      this.taxMod.low = 1.5;
      this.textTaxLow.text = '$$$';
    }
  },
  decTaxMid: function () {
    if (this.taxMod.mid == 1) {
      this.taxMod.mid = .5;
      this.textTaxMid.text = '$';
    }
    else if (this.taxMod.mid == 1.5) {
      this.taxMod.mid = 1;
      this.textTaxMid.text = '$$';
    }
  },
  incTaxMid: function () {
    if (this.taxMod.mid == .5) {
      this.taxMod.mid = 1;
      this.textTaxMid.text = '$$';
    }
    else if (this.taxMod.mid == 1) {
      this.taxMod.mid = 1.5;
      this.textTaxMid.text = '$$$';
    }
  },
  decTaxHigh: function () {
    if (this.taxMod.high == 1) {
      this.taxMod.high = .5;
      this.textTaxHigh.text = '$';
    }
    else if (this.taxMod.high == 1.5) {
      this.taxMod.high = 1;
      this.textTaxHigh.text = '$$';
    }
  },
  incTaxHigh: function () {
    if (this.taxMod.high == .5) {
      this.taxMod.high = 1;
      this.textTaxHigh.text = '$$';
    }
    else if (this.taxMod.high == 1) {
      this.taxMod.high = 1.5;
      this.textTaxHigh.text = '$$$';
    }
  }
};














},{"../entities/background_manager":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\background_manager.js","../entities/group":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\group.js","../entities/groupManager":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\groupManager.js","../entities/hoverMenu":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\hoverMenu.js","../entities/person":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\person.js","../entities/player":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\player.js","../entities/uiBuilder":"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\entities\\uiBuilder.js"}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\game_over.js":[function(require,module,exports){
var Game_Over = function () {
  this.text = null;
  this.textSmall = null;
};

module.exports = Game_Over;

Game_Over.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };
    var smallStyle = { font: '35px "Lucida Console"', fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Game Over", style);
    this.textSmall = this.add.text(x - 300, y - 100, "your happiness went under 50%\n" + "click to continue", smallStyle);
    this.game.time.events.add(Phaser.Timer.SECOND * 3, this.doThing, this);
  },

  update: function () {

  },

  doThing: function() {
    this.input.onDown.add(this.onDown, this);
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};
},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test.png');
    this.load.image('menu_bg', 'assets/menu_bg.png');
    this.load.image('background', 'assets/sectorBG.png')
    this.load.image('person', 'assets/person.png');
    this.load.image('selection', 'assets/selection.png');
    this.load.image('book', 'assets/book.png');
    this.load.image('young', 'assets/young.png');
    this.load.image('adult', 'assets/adult.png');
    this.load.image('old', 'assets/old.png');
    this.load.image('taxReduce', 'assets/taxReduce.png');
    this.load.image('taxAdd', 'assets/taxAdd.png');
    this.load.image('lock', 'assets/lock.png');
    this.load.atlasJSONHash('chevrons', 'assets/chevrons.png', 'assets/chevrons.json');
    this.load.atlasJSONHash('ages', 'assets/ages.png', 'assets/ages.json');
    this.load.image('happyface', 'assets/happyface_better.png');
    this.load.image('bordered', 'assets/bordered.png');
    this.load.image('low_dollar', 'assets/low_dollar.png');
    this.load.image('med_dollar', 'assets/med_dollar.png');
    this.load.image('high_dollar', 'assets/high_dollar.png');
    this.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Game');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
	hypotenuse: function(a, b) {
		return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
	},
	ratio: function(a, b, c) {
		if (arguments.length === 1) {
			return [a / a];
		}
		else if (arguments.length === 2) {
			return [a / (a + b), b / (a + b)];
		}
		else if (arguments.length === 3) {
			return [a / (a + b + c), b / (a + b + c), c / (a + b + c)];
		}
		else {
			return [];
		}
	}
};


module.exports = Utils;
},{}]},{},["C:\\Users\\Matthew D Zimmerman\\Work\\Hackathon\\first_build\\src\\js\\main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvZW50aXRpZXMvUHJvZ3Jlc3NCYXIuanMiLCJzcmMvanMvZW50aXRpZXMvYmFja2dyb3VuZC5qcyIsInNyYy9qcy9lbnRpdGllcy9iYWNrZ3JvdW5kX21hbmFnZXIuanMiLCJzcmMvanMvZW50aXRpZXMvZ3JvdXAuanMiLCJzcmMvanMvZW50aXRpZXMvZ3JvdXBNYW5hZ2VyLmpzIiwic3JjL2pzL2VudGl0aWVzL2hvdmVyTWVudS5qcyIsInNyYy9qcy9lbnRpdGllcy9wZXJzb24uanMiLCJzcmMvanMvZW50aXRpZXMvcGxheWVyLmpzIiwic3JjL2pzL2VudGl0aWVzL3VpQnVpbGRlci5qcyIsInNyYy9qcy9tYWluLmpzIiwic3JjL2pzL3N0YXRlcy9ib290LmpzIiwic3JjL2pzL3N0YXRlcy9nYW1lLmpzIiwic3JjL2pzL3N0YXRlcy9nYW1lX292ZXIuanMiLCJzcmMvanMvc3RhdGVzL21lbnUuanMiLCJzcmMvanMvc3RhdGVzL3ByZWxvYWRlci5qcyIsInNyYy9qcy9zdGF0ZXMvc3BsYXNoLmpzIiwic3JjL2pzL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5VEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM01BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvL05PVEU6IERPTidUIFVTRSB0aGlzIGNvZGUgdG8gY3JlYXRlIGEgUHJvZ3Jlc3NCYXIuIEluc3RlYWQsIHVzZSB0aGUgVUlCdWlsZGVyIG9iamVjdCBhbmQgY2FsbCBidWlsZFByb2dyZXNzQmFyXHJcblxyXG52YXIgUHJvZ3Jlc3NCYXIgPSBmdW5jdGlvbihzZXRUeXBlLCBzZXRNYXhWYWx1ZSwgc2V0R3JhcGhpY3MsIHNldFJlbmRlcmFibGVzKSB7XHJcblx0dGhpcy50eXBlID0gc2V0VHlwZTsgLy9Ud28gdHlwZXMsIFwiZ3Jvd2luZ1wiIChzdGFydHMgYXQgMCwgdHJpZ2dlcnMgZXZlbnQgd2hlbiBmdWxsKSBcclxuXHRcdFx0XHRcdFx0IC8vYW5kIFwic2hyaW5raW5nXCIgKHN0YXJ0cyBmdWxsLCB0cmlnZ2VycyBhdCAwKVxyXG5cdHRoaXMuYmdCb3JkZXJTaXplID0gMjtcdFx0XHQvL2RlZmF1bHQgc2l6ZSBvZiBiYWNrZ3JvdW5kIGJvcmRlclxyXG5cdHRoaXMuYmdCb3JkZXJDb2xvciA9IDB4MDAwMDA7XHQvL2RlZmF1bHQgY29sb3Igb2YgYmFja2dyb3VuZCBib3JkZXJcclxuXHR0aGlzLmJnQ29sb3IgPSAweGZmZmZmZjtcdFx0Ly9kZWZhdWx0IGNvbG9yIG9mIGJhY2tncm91bmRcclxuXHR0aGlzLnBhZGRpbmdIb3JpeiA9IDEwO1x0XHRcdC8vZGVmYXVsdCBzdW0gb2YgcGFkZGluZyBvbiBsZWZ0IGFuZCByaWdodCBzaWRlIGlubmVyIHZhbHVlIGJhclxyXG5cdHRoaXMucGFkZGluZ1ZlcnQgPSAxMDtcdFx0XHQvL2RlZmF1bHQgc3VtIChpLmUuIGhhbGYgb24gZWFjaCBzaWRlKSBvZiB2ZXJ0aWNhbCBwYWRkaW5nIG9mIGlubmVyIHZhbHVlIGJhclxyXG5cdC8vIHRoaXMudmFsdWVCb3JkZXJTaXplID0gMTtcdFx0Ly9kZWZhdWx0IHNpemUgb2YgdmFsdWUgYm9yZGVyXHJcblx0Ly8gdGhpcy52YWx1ZUJvcmRlckNvbG9yID0gMHg4ODg4RkY7IC8vZGVmYXVsdCBjb2xvciBvZiB2YWx1ZSBib3JkZXJcclxuXHR0aGlzLnZhbHVlQ29sb3IgPSAweDAwMDAwMDtcdFx0Ly9kZWZhdWx0IGNvbG9yIG9mIGlubmVyIHZhbHVlIGJhclxyXG5cdHRoaXMueCA9IG51bGw7XHJcblx0dGhpcy55ID0gbnVsbDtcclxuXHR0aGlzLndpZHRoID0gbnVsbDtcclxuXHR0aGlzLmhlaWdodCA9IG51bGw7XHJcblx0dGhpcy5tYXhWYWx1ZSA9IHNldE1heFZhbHVlO1xyXG5cdHRoaXMuZ3JhcGhpY3MgPSBzZXRHcmFwaGljczsgLy9zdG9yZSBncmFwaGljcyBjbGFzcyAodXNlZCB0byBkcmF3IGJhcilcclxuXHR0aGlzLnJlbmRlcmFibGVzID0gc2V0UmVuZGVyYWJsZXM7XHJcblx0XHJcblx0dGhpcy5vbkV2ZW50ID0gZnVuY3Rpb24oKSB7fTsgLy9vdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiB0byBtYWtlIHdoYXRldmVyIHlvdSB3YW50IGhhcHBlbiB3aGVuIHByb2dyZXNzQmFyIHJlYWNoZXMgbGltaXRcclxuXHRcclxuXHQvL3N3aXRjaCh0aGlzLnR5cGUpIHtcclxuXHQvL2Nhc2UgJ2dyb3dpbmcnIDogXHJcblx0aWYoc2V0VHlwZSA9PT0gJ2dyb3dpbmcnKSB7XHJcblx0XHR0aGlzLnZhbHVlID0gMDtcclxuXHRcdC8vdHJ5VHJpZ2dlciBpcyBjYWxsZWQgYXV0b21hdGljYWxseSB3aGVuIHlvdSBhZGQvc3VidHJhY3QgdmFsdWUsIGFuZCB3aWxsIHRyaWdnZXIgdGhlIG9uRXZlbnQoKSBmdW5jdGlvblxyXG5cdFx0dGhpcy50cnlUcmlnZ2VyID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmKHRoaXMudmFsdWUgPj0gdGhpcy5tYXhWYWx1ZSkge1xyXG5cdFx0XHRcdHRoaXMub25FdmVudCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0Ly9icmVhaztcclxuXHR9XHJcblx0ZWxzZSBpZihzZXRUeXBlID09PSAnc2hyaW5raW5nJykge1xyXG5cdC8vY2FzZSAnc2hyaW5raW5nJyA6XHJcblx0XHR0aGlzLnZhbHVlID0gdGhpcy5tYXhWYWx1ZTtcclxuXHRcdHRoaXMudHJ5VHJpZ2dlciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZih0aGlzLnZhbHVlIDw9IDApIHtcclxuXHRcdFx0XHR0aGlzLm9uRXZlbnQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcbn07XHJcblxyXG5Qcm9ncmVzc0Jhci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQcm9ncmVzc0JhcjtcclxuXHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblx0dGhpcy5ncmFwaGljcy5jbGVhcigpO1xyXG5cdHRoaXMucmVuZGVyYWJsZXMudW5zdWJzY3JpYmUodGhpcyk7XHJcbn07XHJcblxyXG4vL1RvIHN1YnRyYWN0IHZhbHVlLCBqdXN0IHVzZSBuZWdhdGl2ZSBudW1iZXJzIGFzIGFyZ3VtZW50IGkuZS4gZm9vLmFkZFZhbHVlKC01KTtcclxuUHJvZ3Jlc3NCYXIucHJvdG90eXBlLmFkZFZhbHVlID0gZnVuY3Rpb24gKGFkZFRoaXMpIHtcclxuXHR0aGlzLnZhbHVlICs9IGFkZFRoaXM7XHJcblx0aWYodGhpcy52YWx1ZSA+IHRoaXMubWF4VmFsdWUpIHtcclxuXHRcdHRoaXMudmFsdWUgPSB0aGlzLm1heFZhbHVlO1xyXG5cdH1cclxuXHRpZih0aGlzLnZhbHVlIDwgMCkge1xyXG5cdFx0dGhpcy52YWx1ZSA9IDA7XHJcblx0fVxyXG5cdHRoaXMudHJ5VHJpZ2dlcigpO1xyXG59O1xyXG5cclxuLy9TZXRzIHRoZSBsb2NhdGlvbiB3aGVyZSBwcm9ncmVzcyBiYXIgaXMgcmVuZGVyZWRcclxuUHJvZ3Jlc3NCYXIucHJvdG90eXBlLnNldExvY2F0aW9uID0gZnVuY3Rpb24oc2V0WCwgc2V0WSkge1xyXG5cdHRoaXMueCA9IHNldFg7XHJcblx0dGhpcy55ID0gc2V0WTtcclxufTtcclxuXHJcbi8vU2V0cyB0aGUgc2l6ZSBvZiB0aGUgcHJvZ3Jlc3MgYmFyXHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS5zZXRTaXplID0gZnVuY3Rpb24oc2V0V2lkdGgsIHNldEhlaWdodCkge1xyXG5cdHRoaXMud2lkdGggPSBzZXRXaWR0aDtcclxuXHR0aGlzLmhlaWdodCA9IHNldEhlaWdodDtcclxufTtcclxuXHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS5zZXRTdHlsZSA9IGZ1bmN0aW9uKGJnQm9yZGVyU2l6ZSwgYmdCb3JkZXJDb2xvciwgYmdDb2xvciwgcGFkZGluZ0hvcml6LCBwYWRkaW5nVmVydCwgdmFsdWVCb3JkZXJTaXplLCB2YWx1ZUJvcmRlckNvbG9yLCB2YWx1ZUNvbG9yKSB7XHJcblx0dGhpcy5iZ0JvcmRlclNpemUgPSBiZ0JvcmRlclNpemU7XHJcblx0dGhpcy5iZ0JvcmRlckNvbG9yID0gYmdCb3JkZXJDb2xvcjtcclxuXHR0aGlzLmJnQ29sb3IgPSBiZ0NvbG9yO1xyXG5cdHRoaXMucGFkZGluZ0hvcml6ID0gcGFkZGluZ0hvcml6O1xyXG5cdHRoaXMucGFkZGluZ1ZlcnQgPSBwYWRkaW5nVmVydDtcclxuXHR0aGlzLnZhbHVlQm9yZGVyU2l6ZSA9IHZhbHVlQm9yZGVyU2l6ZTtcclxuXHR0aGlzLnZhbHVlQm9yZGVyQ29sb3IgPSB2YWx1ZUJvcmRlckNvbG9yO1xyXG5cdHRoaXMudmFsdWVDb2xvciA9IHZhbHVlQ29sb3I7XHJcbn07XHJcblxyXG4vL3VwZGF0ZSBmb3IgcHJvZ3Jlc3MgYmFyLCBjYWxsZWQganVzdCBiZWZvcmUgZHJhd2luZyBwcm9ncmVzcyBiYXJcclxuLy9PdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiBpZiBkZXNpcmVkXHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cclxuLy9SZW5kZXJzIHByb2dyZXNzQmFyXHJcblByb2dyZXNzQmFyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcclxuXHR0aGlzLnVwZGF0ZSgpO1xyXG5cdHRoaXMuZ3JhcGhpY3MuY2xlYXIoKTtcclxuXHQvL0RyYXcgYmFja2dyb3VuZCBvZiBiYXJcclxuXHR0aGlzLmdyYXBoaWNzLmxpbmVTdHlsZSh0aGlzLmJnQm9yZGVyU2l6ZSwgdGhpcy5iZ0JvcmRlckNvbG9yLCAxKTsgLy9zZXRzIGJvcmRlciBjb2xvciBhbmQgc2l6ZVxyXG5cdHRoaXMuZ3JhcGhpY3MuYmVnaW5GaWxsKHRoaXMuYmdDb2xvcik7IC8vc2V0cyBjb2xvciBvZiBiYWNrZ3JvdW5kIGZpbGxcclxuXHR0aGlzLmdyYXBoaWNzLmRyYXdSZWN0KHRoaXMueC10aGlzLndpZHRoLzIsIHRoaXMueS10aGlzLmhlaWdodC8yLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcblx0dGhpcy5ncmFwaGljcy5lbmRGaWxsKCk7XHJcblx0Ly9EcmF3IHZhbHVlIG9mIGJhclxyXG5cdHZhciBwZXJjZW50YWdlID0gdGhpcy52YWx1ZSAvIHRoaXMubWF4VmFsdWU7XHJcblx0dmFyIGJhcldpZHRoID0gdGhpcy53aWR0aCAtIHRoaXMucGFkZGluZ0hvcml6O1xyXG5cdHZhciBiYXJIZWlnaHQgPSB0aGlzLmhlaWdodCAtIHRoaXMucGFkZGluZ1ZlcnQ7XHJcblx0dGhpcy5ncmFwaGljcy5saW5lU3R5bGUodGhpcy52YWx1ZUJvcmRlclNpemUsIHRoaXMudmFsdWVCb3JkZXJDb2xvciwgMSk7XHJcblx0dGhpcy5ncmFwaGljcy5iZWdpbkZpbGwodGhpcy52YWx1ZUNvbG9yKTtcclxuXHR0aGlzLmdyYXBoaWNzLmRyYXdSZWN0KHRoaXMueC0oYmFyV2lkdGgvMiksIHRoaXMueS0oYmFySGVpZ2h0LzIpLCBiYXJXaWR0aCpwZXJjZW50YWdlLCBiYXJIZWlnaHQpO1xyXG5cdHRoaXMuZ3JhcGhpY3MuZW5kRmlsbCgpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQcm9ncmVzc0JhcjsiLCJ2YXIgR3JvdXBfTWFuYWdlciA9IHJlcXVpcmUoJy4vZ3JvdXBNYW5hZ2VyJyk7XHJcbnZhciBQZXJzb24gPSByZXF1aXJlKCcuL3BlcnNvbicpO1xyXG5cclxudmFyIEJhY2tncm91bmQgPSBmdW5jdGlvbiAoZ2FtZSwgYmFzZVgsIGJhc2VZLCBoUmF0aW8sIHZSYXRpbywgaW5jb21lLCB0eXBlLCBzdGF0ZSkge1xyXG4gICAgUGhhc2VyLlNwcml0ZS5jYWxsKHRoaXMsIGdhbWUsIChiYXNlWCAqIGhSYXRpbyAqIGdhbWUud2lkdGgpLCAoYmFzZVkgKiB2UmF0aW8gKiBnYW1lLmhlaWdodCkgKyAxMDAsICdiYWNrZ3JvdW5kJyk7XHJcbiAgICBnYW1lLmFkZC5leGlzdGluZyh0aGlzKTtcclxuICAgIHRoaXMuYmFzZVggPSBiYXNlWDtcclxuICAgIHRoaXMuYmFzZVkgPSBiYXNlWTtcclxuICAgIHRoaXMuaFJhdGlvID0gaFJhdGlvO1xyXG4gICAgdGhpcy52UmF0aW8gPSB2UmF0aW87XHJcbiAgICB0aGlzLm5ld0hSYXRpbyA9IGhSYXRpbztcclxuICAgIHRoaXMubmV3VlJhdGlvID0gdlJhdGlvO1xyXG4gICAgdGhpcy5taW5SYXRpbyA9IC4xO1xyXG4gICAgdGhpcy5ncm91cF9tYW5hZ2VyID0gbmV3IEdyb3VwX01hbmFnZXIodGhpcy5nYW1lLCBzdGF0ZSk7XHJcblx0dGhpcy5ncm91cF9tYW5hZ2VyLmJhY2tncm91bmQgPSB0aGlzO1xyXG4gICBcdHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLmluY29tZUxldmVsID0gaW5jb21lO1xyXG5cdHRoaXMuc3RhdGUgPSBzdGF0ZVxyXG59O1xyXG5cclxuQmFja2dyb3VuZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBoYXNlci5TcHJpdGUucHJvdG90eXBlKTtcclxuQmFja2dyb3VuZC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCYWNrZ3JvdW5kO1xyXG5cclxuQmFja2dyb3VuZC5wcm90b3R5cGUuZ2V0VmFycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy9yZXR1cm4geCAmIHkgYW5kIHdpZHRoICYgaGVpZ2h0IG9mIHZpc2libGVcclxuICAgIHJldHVybiBbdGhpcy54LCB0aGlzLnksIHRoaXMuaFJhdGlvICogKHRoaXMuZ2FtZS53aWR0aCksIHRoaXMudlJhdGlvICogKHRoaXMuZ2FtZS5oZWlnaHQgLSB0aGlzLm15TWFuYWdlci5ib3JkZXIpXTtcclxufTtcclxuXHJcbkJhY2tncm91bmQucHJvdG90eXBlLmdldFZhcnNDZW50ZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIC8vcmV0dXJuIHggJiB5IG9mIGNlbnRlciBhbmQgd2lkdGggJiBoZWlnaHQgb2YgdmlzaWJsZVxyXG4gICAgdmFyIHZpc1dpZHRoID0gdGhpcy5oUmF0aW8gKiAodGhpcy5nYW1lLndpZHRoKTtcclxuICAgIHZhciB2aXNIZWlnaHQgPSB0aGlzLnZSYXRpbyAqICh0aGlzLmdhbWUuaGVpZ2h0IC0gdGhpcy5teU1hbmFnZXIuYm9yZGVyKTtcclxuICAgIHJldHVybiB7d2lkdGggOiB2aXNXaWR0aCwgaGVpZ2h0IDogdmlzSGVpZ2h0LCBjZW50ZXIgOiB7eCA6IHRoaXMueCArIHZpc1dpZHRoIC8gMiwgeSA6IHRoaXMueSArIHZpc0hlaWdodCAvIDJ9fTtcclxufTtcclxuXHJcbkJhY2tncm91bmQucHJvdG90eXBlLm51bVBlb3BsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG51bSA9IHRoaXMuZ3JvdXBfbWFuYWdlci5udW1QZW9wbGUoKTtcclxuICAgIGlmIChudW0gPT09IDApIHJldHVybiAxO1xyXG4gICAgZWxzZSByZXR1cm4gbnVtO1xyXG59O1xyXG5cclxuQmFja2dyb3VuZC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcblx0aWYgKHRoaXMubmV3SFJhdGlvIDwgdGhpcy5taW5SYXRpbykgdGhpcy5uZXdIUmF0aW8gPSB0aGlzLm1pblJhdGlvO1xyXG4gICAgaWYgKHRoaXMubmV3VlJhdGlvIDwgdGhpcy5taW5SYXRpbykgdGhpcy5uZXdWUmF0aW8gPSB0aGlzLm1pblJhdGlvO1xyXG4gICAgaWYgKHRoaXMuaFJhdGlvICE9PSB0aGlzLm5ld0hSYXRpbykge1xyXG4gICAgICAgIGlmICh0aGlzLmhSYXRpbyArIC4wMSA8IHRoaXMubmV3SFJhdGlvKSB0aGlzLmhSYXRpbyArPSAuMDE7XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5oUmF0aW8gLSAuMDEgPiB0aGlzLm5ld0hSYXRpbykgdGhpcy5oUmF0aW8gLT0gLjAxO1xyXG4gICAgICAgIGVsc2UgdGhpcy5oUmF0aW8gPSB0aGlzLm5ld0hSYXRpbztcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnZSYXRpbyAhPT0gdGhpcy5uZXdWUmF0aW8pIHtcclxuICAgICAgICBpZiAodGhpcy52UmF0aW8gKyAuMDEgPCB0aGlzLm5ld1ZSYXRpbykgdGhpcy52UmF0aW8gKz0gLjAxO1xyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudlJhdGlvIC0gLjAxID4gdGhpcy5uZXdWUmF0aW8pIHRoaXMudlJhdGlvIC09IC4wMTtcclxuICAgICAgICBlbHNlIHRoaXMudlJhdGlvID0gdGhpcy5uZXdWUmF0aW87XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy50eXBlID09PSAndW5lbXBsb3llZCcpXHJcbiAgICAgICAgdGhpcy5oUmF0aW8gPSAxO1xyXG4gICAgdGhpcy5ncm91cF9tYW5hZ2VyLnVwZGF0ZSgpO1xyXG59O1xyXG5cclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tncm91bmQ7IiwiLy9Db250cm9scyBiYWNrZ3JvdW5kIGVsZW1lbnRzXHJcblxyXG52YXIgQmFja2dyb3VuZCA9IHJlcXVpcmUoJy4vYmFja2dyb3VuZCcpO1xyXG52YXIgUGVyc29uID0gcmVxdWlyZSgnLi9wZXJzb24nKTtcclxudmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlscycpO1xyXG5cclxudmFyIEdyb3VwID0gcmVxdWlyZSgnLi9ncm91cCcpO1xyXG5cclxudmFyIEJhY2tncm91bmRfTWFuYWdlciA9IGZ1bmN0aW9uKGdhbWUsIHN0YXRlKSB7XHJcblx0dGhpcy5nYW1lID0gZ2FtZTtcclxuXHR0aGlzLnN0YXRlID0gc3RhdGU7XHJcblx0Ly9DcmVhdGUgYXJyYXkgb2YgYmFja2dyb3VuZHNcclxuXHR0aGlzLmJnQXJyYXkgPSBbXHJcblx0XHRuZXcgQmFja2dyb3VuZCh0aGlzLmdhbWUsIDAsIDAsIC4zMywgLjMzLCBQZXJzb24uRURVTEVWRUwubG93ICwgJ3dvcmsnICwgc3RhdGUpLFx0Ly8gdGhpcy5iZ0FycmF5WzBdID09IHdvcmtMb3dcclxuXHRcdG5ldyBCYWNrZ3JvdW5kKHRoaXMuZ2FtZSwgMSwgMCwgLjMzLCAuMzMsIFBlcnNvbi5FRFVMRVZFTC5taWQgLCAnd29yaycgLCBzdGF0ZSksXHQvLyB0aGlzLmJnQXJyYXlbMV0gPT0gd29ya01pZFxyXG5cdFx0bmV3IEJhY2tncm91bmQodGhpcy5nYW1lLCAyLCAwLCAuMzMsIC4zMywgUGVyc29uLkVEVUxFVkVMLmhpZ2gsICd3b3JrJyAsIHN0YXRlKSxcdC8vIHRoaXMuYmdBcnJheVsyXSA9PSB3b3JrTWlkXHJcblx0XHRuZXcgQmFja2dyb3VuZCh0aGlzLmdhbWUsIDAsIDEsIC4zMywgLjMzLCBQZXJzb24uRURVTEVWRUwubG93ICwgJ2hvdXNlJywgc3RhdGUpLFx0Ly8gdGhpcy5iZ0FycmF5WzNdID09IGhvdXNlTG93XHJcblx0XHRuZXcgQmFja2dyb3VuZCh0aGlzLmdhbWUsIDEsIDEsIC4zMywgLjMzLCBQZXJzb24uRURVTEVWRUwubWlkICwgJ2hvdXNlJywgc3RhdGUpLFx0Ly8gdGhpcy5iZ0FycmF5WzRdID09IGhvdXNlTWlkXHJcblx0XHRuZXcgQmFja2dyb3VuZCh0aGlzLmdhbWUsIDIsIDEsIC4zMywgLjMzLCBQZXJzb24uRURVTEVWRUwuaGlnaCwgJ2hvdXNlJywgc3RhdGUpLFx0Ly8gdGhpcy5iZ0FycmF5WzVdID09IGhvdXNlTWlkXHJcblx0XHRuZXcgQmFja2dyb3VuZCh0aGlzLmdhbWUsIDAsIDIsICAgMSwgLjMzLCAnJywgICAgICAgICAgICAgICd1bmVtcGxveWVkJywgc3RhdGUpXHRcdC8vIHRoaXMuYmdBcnJheVs2XSA9PSB1bmVtcGxveWVkXHJcblx0XTtcclxuXHRmb3IgKGJnIGluIHRoaXMuYmdBcnJheSkge1xyXG5cdFx0dGhpcy5iZ0FycmF5W2JnXS5teU1hbmFnZXIgPSB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHRmb3IgKHZhciBpIGluIHRoaXMuYmdBcnJheSkge1xyXG5cdFx0aWYgKHRoaXMuYmdBcnJheVtpXS50eXBlID09ICd3b3JrJykge1xyXG5cdFx0XHRpZiAodGhpcy5iZ0FycmF5W2ldLmluY29tZUxldmVsID09PSBQZXJzb24uRURVTEVWRUwubG93KSB7XHJcblx0XHRcdFx0dGhpcy5iZ0FycmF5W2ldLnRpbnQgPSAweGVkNWM1YTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICh0aGlzLmJnQXJyYXlbaV0uaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5taWQpIHtcclxuXHRcdFx0XHR0aGlzLmJnQXJyYXlbaV0udGludCA9IDB4NmFlMjQ2O1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKHRoaXMuYmdBcnJheVtpXS5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLmhpZ2gpIHtcclxuXHRcdFx0XHR0aGlzLmJnQXJyYXlbaV0udGludCA9IDB4MmI1OWUyO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLmJnQXJyYXlbaV0udHlwZSA9PSAnaG91c2UnKSB7XHJcblx0XHRcdGlmICh0aGlzLmJnQXJyYXlbaV0uaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5sb3cpIHtcclxuXHRcdFx0XHR0aGlzLmJnQXJyYXlbaV0udGludCA9IDB4ZWQ4MTgwO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKHRoaXMuYmdBcnJheVtpXS5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLm1pZCkge1xyXG5cdFx0XHRcdHRoaXMuYmdBcnJheVtpXS50aW50ID0gMHg5NGVhNzk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAodGhpcy5iZ0FycmF5W2ldLmluY29tZUxldmVsID09PSBQZXJzb24uRURVTEVWRUwuaGlnaCkge1xyXG5cdFx0XHRcdHRoaXMuYmdBcnJheVtpXS50aW50ID0gMHg1NDc2ZGQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGVsc2UgeyAvLyBVbmVtcGxveWVkIGJhY2tncm91bmRcclxuXHRcdFx0dGhpcy5iZ0FycmF5W2ldLnRpbnQgPSAweGU3ZTdlNztcclxuXHRcdH1cclxuXHRcdHRoaXMuYm9yZGVyID0gMTAwO1xyXG5cdH1cclxuXHRcclxuXHQvLyB2YXIgdGVzdCA9IHRoaXMuYmdBcnJheVs2XS5ncm91cF9tYW5hZ2VyO1xyXG5cdC8vIHZhciB0ZXN0RmxvY2sgPSBuZXcgR3JvdXAodGhpcy5nYW1lLCB0aGlzLmdhbWUud2lkdGggLyAyICsgMTAwLCAodGhpcy5nYW1lLmhlaWdodCAtIHRoaXMuYm9yZGVyKSAvIDIgKyAxMDAsIHN0YXRlKTtcclxuIC8vICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xyXG4gLy8gICAgXHR2YXIgdGVzdFBlcnNvbiA9IG5ldyBQZXJzb24odGhpcy5nYW1lLCB0aGlzLmdhbWUud2lkdGggLyAyICsgaSAqIDE1LCAodGhpcy5nYW1lLmhlaWdodCAtIHRoaXMuYm9yZGVyKSAvIDIgKyBpICogMTUsIGkpO1xyXG4gLy8gICAgXHR0aGlzLmdhbWUuYWRkLmV4aXN0aW5nKHRlc3RQZXJzb24pO1xyXG4gLy8gICAgXHR0ZXN0RmxvY2suYWRkTWVtYmVyKHRlc3RQZXJzb24pO1xyXG4gLy8gICAgfVxyXG4gLy8gICAgdGVzdC5hZGRNZW1iZXIodGVzdEZsb2NrKTtcclxuXHQvLyB0ZXN0RmxvY2sgPSBuZXcgR3JvdXAodGhpcy5nYW1lLCB0aGlzLmdhbWUud2lkdGggLyAyIC0gMTAwLCAodGhpcy5nYW1lLmhlaWdodCAtIHRoaXMuYm9yZGVyKSAvIDIgKyAxMDAsIHN0YXRlKTtcclxuXHQvLyBmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcclxuICAgIFx0Ly8gdmFyIHRlc3RQZXJzb24gPSBuZXcgUGVyc29uKHRoaXMuZ2FtZSwgdGhpcy5nYW1lLndpZHRoIC8gMiArIGkgKiAxNSAtIDEwMCwgKHRoaXMuZ2FtZS5oZWlnaHQgLSB0aGlzLmJvcmRlcikgLyAyICsgaSAqIDE1ICsgMTAwLCBpKTtcclxuICAgIFx0Ly8gdGhpcy5nYW1lLmFkZC5leGlzdGluZyh0ZXN0UGVyc29uKTtcclxuICAgIFx0Ly8gdGVzdEZsb2NrLmFkZE1lbWJlcih0ZXN0UGVyc29uKTtcclxuICAgIC8vIH1cclxuICAgIC8vIHRlc3QuYWRkTWVtYmVyKHRlc3RGbG9jayk7XHJcbn07XHJcblxyXG5CYWNrZ3JvdW5kX01hbmFnZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQmFja2dyb3VuZF9NYW5hZ2VyO1xyXG5cclxuLypCYWNrZ3JvdW5kX01hbmFnZXIuQkdOQU1FUyA9IHtcclxuXHRcdHdvcmtMb3cgICAgOiB0aGlzLmJnQXJyYXlbMF0sXHJcblx0XHR3b3JrTWlkICAgIDogdGhpcy5iZ0FycmF5WzFdLFxyXG5cdFx0d29ya0hpZ2ggICA6IHRoaXMuYmdBcnJheVsyXSxcclxuXHRcdGhvdXNlTG93ICAgOiB0aGlzLmJnQXJyYXlbM10sXHJcblx0XHRob3VzZU1pZCAgIDogdGhpcy5iZ0FycmF5WzRdLFxyXG5cdFx0aG91c2VIaWdoICA6IHRoaXMuYmdBcnJheVs1XSxcclxuXHRcdHVuZW1wbG95ZWQgOiB0aGlzLmJnQXJyYXlbNl1cclxufTsqL1xyXG5cclxuQmFja2dyb3VuZF9NYW5hZ2VyLnByb3RvdHlwZS5zZW5kVG8gPSBmdW5jdGlvbihzb3VyY2UsIGRlc3RpbmF0aW9uLCBncm91cCkge1xyXG5cdC8vIGNvbnNvbGUubG9nKGRlc3RpbmF0aW9uKTtcclxuXHQvLyBjb25zb2xlLmxvZyhzb3VyY2UsIGRlc3RpbmF0aW9uKTtcclxuXHRpZiAoZGVzdGluYXRpb24gPT09IG51bGwpIHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0dmFyIHRyYW5zVHlwZSA9IHRoaXMudHJhbnNmZXJUeXBlKHNvdXJjZSwgZGVzdGluYXRpb24sIGdyb3VwKVxyXG5cdC8vIGNvbnNvbGUubG9nKHNvdXJjZSwgZGVzdGluYXRpb24sIGdyb3VwLCB0cmFuc1R5cGUpO1xyXG5cdGlmICh0cmFuc1R5cGUuY2FuKSB7XHQvLyBDaGVjayBpZiB0aGV5IGNhbiB0cmFuc2ZlciB1cFxyXG5cdFx0Ly8gY29uc29sZS5sb2coJ2InKTtcclxuXHRcdHNvdXJjZS5ncm91cF9tYW5hZ2VyLnRyYW5zZmVyKGRlc3RpbmF0aW9uLmdyb3VwX21hbmFnZXIsIGdyb3VwLCB0cmFuc1R5cGUuaGFwcGluZXNzKTtcclxuXHRcdGlmICh0cmFuc1R5cGUuZWR1Y2F0ZSkge1xyXG5cdFx0XHRncm91cC5zdGFydEVkdWNhdGlvbigpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHNvdXJjZS5pbmNvbWVMZXZlbCAhPT0gZGVzdGluYXRpb24uaW5jb21lTGV2ZWwpXHJcblx0XHRcdHRoaXMudXBkYXRlUmF0aW9zKGRlc3RpbmF0aW9uKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0cmFuc1R5cGUuaGFwcGluZXNzTW9kaWZpZXIpO1xyXG5cdFx0Ly8gY29uc29sZS5sb2codHJhbnNUeXBlLmhhcHBpbmVzc01vZGlmaWVyKTtcclxuICAgICAgICBncm91cC5oYXBwaW5lc3NNb2RpZmllciA9IHRyYW5zVHlwZS5oYXBwaW5lc3NNb2RpZmllcjtcclxuXHRcdC8vIGNvbnNvbGUubG9nKGdyb3VwLmhhcHBpbmVzc01vZGlmaWVyKTtcclxuICAgICAgICAvLyBmb3IgKHZhciBwZXJzb24gaW4gZ3JvdXAubWVtYmVycykge1xyXG4gICAgICAgIC8vIFx0Ly8gY29uc29sZS5sb2codHJhbnNUeXBlLmhhcHBpbmVzc01vZGlmaWVyKTtcclxuICAgICAgICAvLyAgICAgLy8gZ3JvdXAuaGFwcGluZXNzTW9kaWZpZXIgPSB0cmFuc1R5cGUuaGFwcGluZXNzTXNvZGlmaWVyO1xyXG4gICAgICAgIC8vIFx0Ly8gY29uc29sZS5sb2coZ3JvdXAuaGFwcGluZXNzTW9kaWZpZXIpO1xyXG4gICAgICAgIC8vIH1cclxuXHRcdC8vIHZhciB0ZXN0ID0gZGVzdGluYXRpb24uZ2V0VmFyc0NlbnRlcigpO1xyXG5cdFx0Ly8gY29uc29sZS5sb2codGVzdCk7XHJcblx0fVxyXG5cdC8vIGNvbnNvbGUubG9nKGdyb3VwLmhhcHBpbmVzc01vZGlmaWVyKTtcclxufTtcclxuQmFja2dyb3VuZF9NYW5hZ2VyLnByb3RvdHlwZS5udW1QZW9wbGUgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgY291bnQgPSAwO1xyXG5cdGZvciAodmFyIGkgaW4gdGhpcy5iZ0FycmF5KSB7XHJcblx0XHRjb3VudCArPSB0aGlzLmJnQXJyYXlbaV0uZ3JvdXBfbWFuYWdlci5udW1QZW9wbGUoKTtcclxuXHR9XHJcblx0cmV0dXJuIGNvdW50O1xyXG59O1xyXG5CYWNrZ3JvdW5kX01hbmFnZXIucHJvdG90eXBlLnRyYW5zZmVyVHlwZSA9IGZ1bmN0aW9uKHNvdXJjZSwgZGVzdGluYXRpb24sIGdyb3VwKSB7XHJcbiAgICBpZiAoZGVzdGluYXRpb24gPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHR2YXIgZ3JvdXBFZHUgPSBncm91cC5tZW1iZXJzWzBdLmVkdUxldmVsO1xyXG5cdHZhciBjYW4gPSB0aGlzLmNhblRyYW5zZmVyKHNvdXJjZSwgZGVzdGluYXRpb24sIGdyb3VwKTtcclxuXHQvLyBjb25zb2xlLmxvZyhkZXN0aW5hdGlvbik7XHJcblx0Ly8gY29uc29sZS5sb2coZGVzdGluYXRpb24udHlwZSwgZGVzdGluYXRpb24uaW5jb21lTGV2ZWwpO1xyXG5cdHZhciBlZHVjYXRlID0gKGRlc3RpbmF0aW9uLnR5cGUgPT09ICdob3VzZScgJiYgZGVzdGluYXRpb24uaW5jb21lTGV2ZWwpID4gZ3JvdXBFZHU7XHJcbiAgICB2YXIgaGFwcGluZXNzTW9kaWZpZXIgPSAwO1xyXG4gICAgaWYgKGRlc3RpbmF0aW9uLnR5cGUgPT0gJ3VuZW1wbG95ZWQnICYmIHNvdXJjZS50eXBlICE9ICd1bmVtcGxveWVkJykge1xyXG4gICAgXHQvLyBjb25zb2xlLmxvZygndW5lbXBsb3ltZW50Jyk7XHJcbiAgICAgICAgaGFwcGluZXNzTW9kaWZpZXIgLT0gMTtcclxuICAgIH1cclxuICAgIGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA8IGdyb3VwRWR1KSB7XHJcbiAgICBcdC8vIGNvbnNvbGUubG9nKCdlZHVjYXRpb24nKTtcclxuICAgICAgICBoYXBwaW5lc3NNb2RpZmllciAtPSBncm91cEVkdSAtIGRlc3RpbmF0aW9uLmluY29tZUxldmVsO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlc3RpbmF0aW9uLnR5cGUgPT0gJ2hvdXNlJykge1xyXG4gICAgXHQvLyBjb25zb2xlLmxvZygnaG91c2luZycpO1xyXG4gICAgXHRoYXBwaW5lc3NNb2RpZmllciArPSAxO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlc3RpbmF0aW9uLnR5cGUgPT0gJ3dvcmsnKSB7XHJcbiAgICBcdC8vIGNvbnNvbGUubG9nKCd0YXgnLCBkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCwgdGhpcy5zdGF0ZS50YXhNb2QubG93KTtcclxuICAgIFx0aWYgKGRlc3RpbmF0aW9uLmluY29tZUxldmVsID09IDApIHtcclxuXHQgICAgXHRpZiAodGhpcy5zdGF0ZS50YXhNb2QubG93ID09IC41KSB7XHJcblx0ICAgIFx0XHRoYXBwaW5lc3NNb2RpZmllciArPSAxO1xyXG5cdCAgICBcdH0gZWxzZSBpZiAodGhpcy5zdGF0ZS50YXhNb2QubG93ID09IDEpIHtcclxuXHQgICAgXHRcdFxyXG5cdCAgICBcdH0gZWxzZSBpZiAodGhpcy5zdGF0ZS50YXhNb2QubG93ID09IDEuNSkge1xyXG5cdCAgICBcdFx0aGFwcGluZXNzTW9kaWZpZXIgLT0gMTtcclxuXHQgICAgXHR9XHJcbiAgICBcdH0gZWxzZSBpZiAoZGVzdGluYXRpb24uaW5jb21lTGV2ZWwgPT0gMSkge1xyXG5cdCAgICBcdGlmICh0aGlzLnN0YXRlLnRheE1vZC5taWQgPT0gLjUpIHtcclxuXHQgICAgXHRcdGhhcHBpbmVzc01vZGlmaWVyICs9IDE7XHJcblx0ICAgIFx0fSBlbHNlIGlmICh0aGlzLnN0YXRlLnRheE1vZC5taWQgPT0gMSkge1xyXG5cdCAgICBcdFx0XHJcblx0ICAgIFx0fSBlbHNlIGlmICh0aGlzLnN0YXRlLnRheE1vZC5taWQgPT0gMS41KSB7XHJcblx0ICAgIFx0XHRoYXBwaW5lc3NNb2RpZmllciAtPSAxO1xyXG5cdCAgICBcdH1cclxuICAgIFx0fSBlbHNlIGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PSAyKSB7XHJcblx0ICAgIFx0aWYgKHRoaXMuc3RhdGUudGF4TW9kLmhpZ2ggPT0gLjUpIHtcclxuXHQgICAgXHRcdGhhcHBpbmVzc01vZGlmaWVyICs9IDE7XHJcblx0ICAgIFx0fSBlbHNlIGlmICh0aGlzLnN0YXRlLnRheE1vZC5oaWdoID09IDEpIHtcclxuXHJcblx0ICAgIFx0fSBlbHNlIGlmICh0aGlzLnN0YXRlLnRheE1vZC5oaWdoID09IDEuNSkge1xyXG5cdCAgICBcdFx0aGFwcGluZXNzTW9kaWZpZXIgLT0gMTtcclxuXHQgICAgXHR9XHJcbiAgICBcdH1cclxuIFx0fVxyXG4gXHQvLyBjb25zb2xlLmxvZyhoYXBwaW5lc3NNb2RpZmllciwgZ3JvdXAuaGFwcGluZXNzTW9kaWZpZXIpO1xyXG4gICAgdmFyIGhhcHBpbmVzc0NoYW5nZSA9IGhhcHBpbmVzc01vZGlmaWVyIC0gZ3JvdXAuaGFwcGluZXNzTW9kaWZpZXI7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhoYXBwaW5lc3NDaGFuZ2UsIGhhcHBpbmVzc01vZGlmaWVyLCBncm91cC5oYXBwaW5lc3NNb2RpZmllcik7XHJcbiAgICB2YXIgaW5jb21lQ2hhbmdlID0gMDtcclxuICAgIHZhciBiYXNlSW5jb21lID0gZ3JvdXAuaW5jb21lKCk7XHJcbiAgICB2YXIgbmV3SW5jb21lID0gMDtcclxuICAgIHZhciBudW1QZW9wbGUgPSBncm91cC5udW1QZW9wbGUoKTtcclxuICAgIGlmIChkZXN0aW5hdGlvbi50eXBlID09ICd3b3JrJykge1xyXG4gICAgXHQvLyBjb25zb2xlLmxvZygndGF4JywgZGVzdGluYXRpb24uaW5jb21lTGV2ZWwsIHRoaXMuc3RhdGUudGF4TW9kLmxvdyk7XHJcbiAgICBcdGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PSAwKSB7XHJcblx0ICAgIFx0bmV3SW5jb21lICs9IG51bVBlb3BsZSAqIFBlcnNvbi5JTkNPTUVTLmxvdyAqIHRoaXMuc3RhdGUudGF4TW9kLmxvdztcclxuICAgIFx0fSBlbHNlIGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PSAxKSB7XHJcblx0ICAgIFx0bmV3SW5jb21lICs9IG51bVBlb3BsZSAqIFBlcnNvbi5JTkNPTUVTLm1pZCAqIHRoaXMuc3RhdGUudGF4TW9kLm1pZDtcclxuICAgIFx0fSBlbHNlIGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PSAyKSB7XHJcblx0ICAgIFx0bmV3SW5jb21lICs9IG51bVBlb3BsZSAqIFBlcnNvbi5JTkNPTUVTLmhpZ2ggKiB0aGlzLnN0YXRlLnRheE1vZC5oaWdoO1xyXG4gICAgXHR9XHJcbiBcdH0gZWxzZSBpZiAoZGVzdGluYXRpb24udHlwZSA9PSAnaG9tZScpIHtcclxuIFx0XHRpZiAoZGVzdGluYXRpb24uaW5jb21lTGV2ZWwgPT0gMCkge1xyXG5cdCAgICBcdG5ld0luY29tZSAtPSBudW1QZW9wbGUgKiBQZXJzb24uSU5DT01FUy5sb3c7XHJcbiAgICBcdH0gZWxzZSBpZiAoZGVzdGluYXRpb24uaW5jb21lTGV2ZWwgPT0gMSkge1xyXG5cdCAgICBcdG5ld0luY29tZSAtPSBudW1QZW9wbGUgKiBQZXJzb24uSU5DT01FUy5taWQ7XHJcbiAgICBcdH0gZWxzZSBpZiAoZGVzdGluYXRpb24uaW5jb21lTGV2ZWwgPT0gMikge1xyXG5cdCAgICBcdG5ld0luY29tZSAtPSBudW1QZW9wbGUgKiBQZXJzb24uSU5DT01FUy5oaWdoO1xyXG4gICAgXHR9XHJcbiBcdH1cclxuIFx0Ly8gY29uc29sZS5sb2cobmV3SW5jb21lLCBiYXNlSW5jb21lKVxyXG4gXHR2YXIgaW5jb21lQ2hhbmdlID0gbmV3SW5jb21lIC0gYmFzZUluY29tZTtcclxuIFx0Ly8gY29uc29sZS5sb2coaGFwcGluZXNzTW9kaWZpZXIpO1xyXG5cdHJldHVybiB7Y2FuIDogY2FuLCBlZHVjYXRlIDogZWR1Y2F0ZSwgaGFwcGluZXNzQ2hhbmdlIDogaGFwcGluZXNzQ2hhbmdlLCBpbmNvbWVDaGFuZ2UgOiBpbmNvbWVDaGFuZ2UsIGhhcHBpbmVzc01vZGlmaWVyIDogaGFwcGluZXNzTW9kaWZpZXJ9O1xyXG59O1xyXG5CYWNrZ3JvdW5kX01hbmFnZXIucHJvdG90eXBlLmNhblRyYW5zZmVyID0gZnVuY3Rpb24oc291cmNlLCBkZXN0aW5hdGlvbiwgZ3JvdXApIHtcclxuXHQvLyBjb25zb2xlLmxvZyhzb3VyY2UsIGRlc3RpbmF0aW9uLCBncm91cCk7XHJcblx0aWYgKHNvdXJjZSA9PT0gbnVsbCB8fCBkZXN0aW5hdGlvbiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xyXG5cdHZhciBzb3VyY2VFZHUgPSBncm91cC5tZW1iZXJzWzBdLmVkdUxldmVsO1xyXG5cdGlmIChkZXN0aW5hdGlvbi50eXBlID09PSAndW5lbXBsb3llZCcpIHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHRpZiAoc291cmNlRWR1ID09PSBQZXJzb24uRURVTEVWRUwudW5lbXBsb3llZCkge1xyXG5cdFx0aWYgKGRlc3RpbmF0aW9uLmluY29tZUxldmVsID09PSBQZXJzb24uRURVTEVWRUwubG93ICYmIGRlc3RpbmF0aW9uLnR5cGUgPT09ICdob3VzZScpIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0fSBlbHNlIGlmIChzb3VyY2VFZHUgPT09IFBlcnNvbi5FRFVMRVZFTC5sb3cpIHtcclxuXHRcdGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLmxvdykge1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH0gZWxzZSBpZiAoZGVzdGluYXRpb24uaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5taWQpIHtcclxuXHRcdFx0aWYgKGRlc3RpbmF0aW9uLnR5cGUgPT09ICdob3VzZScpIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAoc291cmNlRWR1ID09PSBQZXJzb24uRURVTEVWRUwubWlkKSB7XHJcblx0XHRpZiAoZGVzdGluYXRpb24uaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5sb3cpIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9IGVsc2UgaWYgKGRlc3RpbmF0aW9uLmluY29tZUxldmVsID09PSBQZXJzb24uRURVTEVWRUwubWlkKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSBlbHNlIGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLmhpZ2gpIHtcclxuXHRcdFx0aWYgKGRlc3RpbmF0aW9uLnR5cGUgPT09ICdob3VzZScpIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAoc291cmNlRWR1ID09PSBQZXJzb24uRURVTEVWRUwuaGlnaCkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdHJldHVybiBmYWxzZTtcclxufTtcclxuQmFja2dyb3VuZF9NYW5hZ2VyLnByb3RvdHlwZS5iYWNrZ3JvdW5kQnkgPSBmdW5jdGlvbih0eXBlLCBpbmNvbWVMZXZlbCkge1xyXG5cdGZvciAodmFyIGJnIGluIHRoaXMuYmdBcnJheSkge1xyXG5cdFx0YmcgPSB0aGlzLmJnQXJyYXlbYmddO1xyXG5cdFx0aWYgKGJnLnR5cGUgPT0gdHlwZSAmJiBiZy5pbmNvbWVMZXZlbCA9PSBpbmNvbWVMZXZlbCkge1xyXG5cdFx0XHRyZXR1cm4gYmc7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuQmFja2dyb3VuZF9NYW5hZ2VyLnByb3RvdHlwZS53aGVyZUNsaWNrZWQgPSBmdW5jdGlvbigpIHtcclxuXHRmb3IgKHZhciBpIGluIHRoaXMuYmdBcnJheSkge1xyXG5cdFx0dmFyIGN1ckRpbWVuc2lvbnMgPSB0aGlzLmJnQXJyYXlbaV0uZ2V0VmFycygpO1xyXG5cdFx0dmFyIG1vdXNlWCA9IHRoaXMuZ2FtZS5pbnB1dC54O1xyXG5cdFx0dmFyIG1vdXNlWSA9IHRoaXMuZ2FtZS5pbnB1dC55O1xyXG5cdFx0Ly8gaWYoaSA9PSA2KSBjb25zb2xlLmxvZygnY3VyRGltZW5zaW9uczogJyArIGN1ckRpbWVuc2lvbnMpO1xyXG5cdFx0aWYgKG1vdXNlWCA+IGN1ckRpbWVuc2lvbnNbMF0gJiYgbW91c2VYIDw9IGN1ckRpbWVuc2lvbnNbMF0gKyBjdXJEaW1lbnNpb25zWzJdKSB7XHJcblx0XHRcdGlmIChtb3VzZVkgPiBjdXJEaW1lbnNpb25zWzFdICYmIG1vdXNlWSA8PSBjdXJEaW1lbnNpb25zWzFdICsgY3VyRGltZW5zaW9uc1szXSkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmJnQXJyYXlbaV07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5CYWNrZ3JvdW5kX01hbmFnZXIucHJvdG90eXBlLmZpbmRPdGhlciA9IGZ1bmN0aW9uKHNvdXJjZSwgZGVzdGluYXRpb24pIHtcclxuXHRpZiAoc291cmNlLnR5cGUgPT09ICd3b3JrJyAmJiBkZXN0aW5hdGlvbi50eXBlID09PSAnd29yaycpIHtcclxuXHRcdGlmIChzb3VyY2UuaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5sb3cpIHtcclxuXHRcdFx0aWYgKGRlc3RpbmF0aW9uLmluY29tZUxldmVsID09PSBQZXJzb24uRURVTEVWRUwubWlkKSByZXR1cm4gdGhpcy5iZ0FycmF5WzJdO1xyXG5cdFx0XHRlbHNlIGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLmhpZ2gpIHJldHVybiB0aGlzLmJnQXJyYXlbMV07XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChzb3VyY2UuaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5taWQpIHtcclxuXHRcdFx0aWYgKGRlc3RpbmF0aW9uLmluY29tZUxldmVsID09PSBQZXJzb24uRURVTEVWRUwubG93KSByZXR1cm4gdGhpcy5iZ0FycmF5WzJdO1xyXG5cdFx0XHRlbHNlIGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLmhpZ2gpIHJldHVybiB0aGlzLmJnQXJyYXlbMF07XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChzb3VyY2UuaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5oaWdoKSB7XHJcblx0XHRcdGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLmxvdykgcmV0dXJuIHRoaXMuYmdBcnJheVsxXTtcclxuXHRcdFx0ZWxzZSBpZiAoZGVzdGluYXRpb24uaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5taWQpIHJldHVybiB0aGlzLmJnQXJyYXlbMF07XHJcblx0XHR9XHJcblx0fVxyXG5cdGVsc2UgaWYgKHNvdXJjZS50eXBlID09PSAnaG91c2UnICYmIGRlc3RpbmF0aW9uLnR5cGUgPT09ICdob3VzZScpIHtcclxuXHRcdGlmIChzb3VyY2UuaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5sb3cpIHtcclxuXHRcdFx0aWYgKGRlc3RpbmF0aW9uLmluY29tZUxldmVsID09PSBQZXJzb24uRURVTEVWRUwubWlkKSByZXR1cm4gdGhpcy5iZ0FycmF5WzVdO1xyXG5cdFx0XHRlbHNlIGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLmhpZ2gpIHJldHVybiB0aGlzLmJnQXJyYXlbNF07XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChzb3VyY2UuaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5taWQpIHtcclxuXHRcdFx0aWYgKGRlc3RpbmF0aW9uLmluY29tZUxldmVsID09PSBQZXJzb24uRURVTEVWRUwubG93KSByZXR1cm4gdGhpcy5iZ0FycmF5WzVdO1xyXG5cdFx0XHRlbHNlIGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLmhpZ2gpIHJldHVybiB0aGlzLmJnQXJyYXlbM107XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChzb3VyY2UuaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5oaWdoKSB7XHJcblx0XHRcdGlmIChkZXN0aW5hdGlvbi5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLmxvdykgcmV0dXJuIHRoaXMuYmdBcnJheVs0XTtcclxuXHRcdFx0ZWxzZSBpZiAoZGVzdGluYXRpb24uaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5taWQpIHJldHVybiB0aGlzLmJnQXJyYXlbM107XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuQmFja2dyb3VuZF9NYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVSYXRpb3MgPSBmdW5jdGlvbihkZXN0aW5hdGlvbikge1xyXG5cdGlmIChkZXN0aW5hdGlvbi50eXBlID09PSAnd29yaycpIHtcclxuXHRcdHZhciBoUmF0aW9zID0gdXRpbC5yYXRpbyh0aGlzLmJnQXJyYXlbMF0ubnVtUGVvcGxlKCksIHRoaXMuYmdBcnJheVsxXS5udW1QZW9wbGUoKSwgdGhpcy5iZ0FycmF5WzJdLm51bVBlb3BsZSgpKTtcclxuXHR9XHJcblx0ZWxzZXtcclxuXHRcdHZhciBoUmF0aW9zID0gdXRpbC5yYXRpbyh0aGlzLmJnQXJyYXlbM10ubnVtUGVvcGxlKCksIHRoaXMuYmdBcnJheVs0XS5udW1QZW9wbGUoKSwgdGhpcy5iZ0FycmF5WzVdLm51bVBlb3BsZSgpKTtcclxuXHR9XHJcblx0dmFyIGVtcGxveWVkID0gMDtcclxuXHRmb3IgKHZhciBqID0gMDsgaiA8IDY7IGorKylcclxuXHRcdGVtcGxveWVkICs9IHRoaXMuYmdBcnJheVtqXS5udW1QZW9wbGUoKTtcclxuXHR2YXIgdlJhdGlvcyA9IHV0aWwucmF0aW8odGhpcy5iZ0FycmF5WzZdLm51bVBlb3BsZSgpLCBlbXBsb3llZCk7XHJcblx0Zm9yICh2YXIgaSA9IDAgaW4gdGhpcy5iZ0FycmF5KSB7XHJcblx0XHRpZiAoaSAhPT0gNikge1x0XHQvLyBJZiBub3QgdW5lbXBsb3llZCBiZ1xyXG5cdFx0XHRpZiAoaSA8IDMpIHtcdC8vIElmIHdvcmsgYmdcclxuXHRcdFx0XHR0aGlzLmJnQXJyYXlbaV0ubmV3SFJhdGlvID0gaFJhdGlvc1tpXTtcclxuXHRcdFx0XHR0aGlzLmJnQXJyYXlbaV0ubmV3VlJhdGlvID0gdlJhdGlvc1sxXSAvIDI7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHRcdFx0Ly8gSWYgaG91c2UgYmdcclxuXHRcdFx0XHR0aGlzLmJnQXJyYXlbaV0ubmV3SFJhdGlvID0gaFJhdGlvc1tpIC0gM107XHJcblx0XHRcdFx0dGhpcy5iZ0FycmF5W2ldLm5ld1ZSYXRpbyA9IHZSYXRpb3NbMV0gLyAyO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIGJnQXJyYXlbaV0ubmV3VlJhdGlvID0gdlJhdGlvc1swXTsgLy8gVW5lbXBsb3llZCBiZ1xyXG5cdH1cclxufTtcclxuXHJcbkJhY2tncm91bmRfTWFuYWdlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcblx0Zm9yICh2YXIgaSBpbiB0aGlzLmJnQXJyYXkpIHtcclxuICAgIFx0aWYgKHRoaXMuYmdBcnJheVtpXS5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLm1pZCkge1xyXG4gICAgXHRcdHRoaXMuYmdBcnJheVtpXS54ID0gdGhpcy5iZ0FycmF5WzBdLmdldFZhcnMoKVsyXTtcclxuICAgIFx0fVxyXG4gICAgXHRlbHNlIGlmICh0aGlzLmJnQXJyYXlbaV0uaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5oaWdoKSB7XHJcbiAgICBcdCAgICB0aGlzLmJnQXJyYXlbaV0ueCA9IHRoaXMuYmdBcnJheVsxXS5nZXRWYXJzKClbMF0gKyB0aGlzLmJnQXJyYXlbMV0uZ2V0VmFycygpWzJdO1xyXG4gICAgXHR9XHJcbiAgICBcdHRoaXMuYmdBcnJheVtpXS55ID0gKHRoaXMuYmdBcnJheVtpXS5iYXNlWSAqIHRoaXMuYmdBcnJheVtpXS52UmF0aW8gKiAodGhpcy5nYW1lLmhlaWdodCAtIHRoaXMuYm9yZGVyKSkgKyB0aGlzLmJvcmRlcjtcclxuXHRcdHRoaXMuYmdBcnJheVtpXS51cGRhdGUoKTtcclxuXHR9XHJcblx0dmFyIHRlc3QgPSB0aGlzLmJnQXJyYXlbM10uZ2V0VmFyc0NlbnRlcigpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCYWNrZ3JvdW5kX01hbmFnZXI7IiwiLy9jb250cm9scyBmbG9ja2luZyBmb3IgYSBncm91cCBvZiBwZXJzb24gb2JqZWN0c1xyXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XHJcblxyXG52YXIgR3JvdXAgPSBmdW5jdGlvbiAoZ2FtZSwgY2VudGVyWCwgY2VudGVyWSwgc3RhdGUpIHtcclxuXHR0aGlzLmdhbWUgPSBnYW1lO1xyXG5cdHRoaXMubWVtYmVycyA9IFtdO1xyXG5cdHRoaXMubWluRGlzdCA9IDIwO1xyXG5cdC8vdGhpcy5ub2lzZSA9IDEwO1xyXG5cdHRoaXMuY2VudGVyID0ge3ggOiBjZW50ZXJYLCB5IDogY2VudGVyWX07XHJcblx0dGhpcy5jbGlja0Rpc3QgPSA1MDtcclxuXHR0aGlzLnNlbGVjdGVkID0gZmFsc2U7XHJcblx0dGhpcy5zZWxlY3Rpb24gPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSh0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55LCAnc2VsZWN0aW9uJyk7XHJcblx0dGhpcy5zZWxlY3Rpb24uYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuXHR0aGlzLnNlbGVjdGlvbi53aWR0aCA9IDEwMDtcclxuXHR0aGlzLnNlbGVjdGlvbi5oZWlnaHQgPSAxMDA7XHJcblx0dGhpcy5zZWxlY3Rpb24udmlzaWJsZSA9IGZhbHNlO1xyXG5cdHRoaXMudmVsb2NpdHkgPSB7eCA6IDAsIHkgOiAwfTtcclxuXHR0aGlzLnNwZWVkID0gLjA1O1xyXG5cdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHR0aGlzLmJvb2sgPSB0aGlzLmdhbWUuYWRkLnNwcml0ZSh0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55LCAnYm9vaycpO1xyXG5cdHRoaXMuYm9vay5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG5cdHRoaXMuYm9vay53aWR0aCA9IDI1O1xyXG5cdHRoaXMuYm9vay5oZWlnaHQgPSAyNTtcclxuXHR0aGlzLmJvb2sudmlzaWJsZSA9IGZhbHNlO1xyXG5cdHRoaXMubGVhcm5pbmdUaW1lID0gLjAxO1xyXG4gICAgdGhpcy5ob3ZlciA9IGZhbHNlO1xyXG4gICAgdGhpcy5sb2NrID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUodGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSwgJ2xvY2snKTtcclxuXHR0aGlzLmxvY2suYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuXHR0aGlzLmxvY2sud2lkdGggPSAyNTtcclxuXHR0aGlzLmxvY2suaGVpZ2h0ID0gMzU7XHJcblx0dGhpcy5sb2NrLnZpc2libGUgPSBmYWxzZTtcclxuXHR0aGlzLmxvY2tUaW1lID0gNTtcclxuXHR0aGlzLmhhcHBpbmVzc01vZGlmaWVyID0gMDtcclxuXHR0aGlzLnNlbGVjaW9uV2VpZ2h0ID0gMTtcclxuXHR0aGlzLm1pblNlbGVjdGlvblNpemUgPSAxMDtcclxuXHRcclxuXHR0aGlzLnN0YXRlLmlucHV0Lm9uRG93bi5hZGQodGhpcy5vbklucHV0RG93biwgdGhpcyk7XHJcbiAgICB0aGlzLnN0YXRlLmlucHV0LmFkZE1vdmVDYWxsYmFjayh0aGlzLm9uTW92ZSwgdGhpcyk7XHJcbn1cclxuR3JvdXAucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR3JvdXA7XHJcbkdyb3VwLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuXHQvLyBjb25zb2xlLmxvZyh0aGlzLmNlbnRlcik7XHJcblx0Ly91cGRhdGUgY2VudGVyXHJcblx0dmFyIG5ld1ggPSB0aGlzLmNlbnRlci54ICsgdGhpcy52ZWxvY2l0eS54ICogdGhpcy5zcGVlZDtcclxuXHR2YXIgbmV3WSA9IHRoaXMuY2VudGVyLnkgKyB0aGlzLnZlbG9jaXR5LnkgKiB0aGlzLnNwZWVkO1xyXG5cdHRoaXMuY2hhbmdlQ2VudGVyKHt4IDogbmV3WCwgeSA6IG5ld1l9KTtcclxuXHRmb3IgKHZhciBtZW1iZXIgaW4gdGhpcy5tZW1iZXJzKSB7XHJcblx0XHRtZW1iZXIgPSB0aGlzLm1lbWJlcnNbbWVtYmVyXTtcclxuXHRcdHZhciB2ZWxvY2l0eSA9IHt4OjAsIHk6MH07XHJcblx0XHR2YXIgZGlmZiA9IHt4OjAsIHk6MH07XHJcblx0XHRkaWZmLnggPSB0aGlzLmNlbnRlci54IC0gbWVtYmVyLng7XHJcblx0XHRkaWZmLnkgPSB0aGlzLmNlbnRlci55IC0gbWVtYmVyLnk7XHJcblx0XHR2ZWxvY2l0eS54ICs9IGRpZmYueDtcclxuXHRcdHZlbG9jaXR5LnkgKz0gZGlmZi55O1xyXG5cdFx0Zm9yICh2YXIgb3RoZXIgaW4gdGhpcy5tZW1iZXJzKSB7XHJcblx0XHRcdG90aGVyID0gdGhpcy5tZW1iZXJzW290aGVyXTtcclxuXHRcdFx0Ly9pZ25vcmUgc2VsZlxyXG5cdFx0XHRpZiAob3RoZXIgPT09IG1lbWJlcikge1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciBvRGlmZiA9IHt4OjAsIHk6MH07XHJcblx0XHRcdG9EaWZmLnggPSBvdGhlci54IC0gbWVtYmVyLng7XHJcblx0XHRcdG9EaWZmLnkgPSBvdGhlci55IC0gbWVtYmVyLnk7XHJcblx0XHRcdHZhciB0b3RhbERpc3QgPSB1dGlsLmh5cG90ZW51c2Uob0RpZmYueCwgb0RpZmYueSk7XHJcblx0XHRcdGlmICh0b3RhbERpc3QgPD0gdGhpcy5taW5EaXN0KSB7XHJcblx0XHRcdFx0dmVsb2NpdHkueCA9IC0xICogb0RpZmYueDtcclxuXHRcdFx0XHR2ZWxvY2l0eS55ID0gLTEgKiBvRGlmZi55O1xyXG5cdFx0XHRcdC8vIHZlbG9jaXR5LnggLT0gb0RpZmYueDtcclxuXHRcdFx0XHQvLyB2ZWxvY2l0eS55IC09IG9EaWZmLnk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdC8vIGlmICh1dGlsLmh5cG90ZW51c2UodmVsb2NpdHkueCwgdmVsb2NpdHkueSkgPCB0aGlzLm1pblZlbG9jaXR5KSB7XHJcblx0XHRcdC8vIHZlbG9jaXR5LnggPSB2ZWxvY2l0eS55ID0gMDtcclxuXHRcdC8vIH1cclxuXHRcdG1lbWJlci52ZWxvY2l0eSA9IHZlbG9jaXR5O1xyXG5cdH1cclxuXHQvLyB2YXIgZnVydGhlc3QgPSAwO1xyXG5cdC8vIGZvciAodmFyIG1lbWJlciBpbiB0aGlzLm1lbWJlcnMpIHtcclxuXHQvLyBcdG1lbWJlciA9IHRoaXMubWVtYmVyc1ttZW1iZXJdO1xyXG5cdC8vIFx0dmFyIGRpc3QgPSB1dGlsLmh5cG90ZW51c2UodGhpcy5jZW50ZXIueCAtIG1lbWJlci54LCB0aGlzLmNlbnRlci55IC0gbWVtYmVyLnkpKTtcclxuXHQvLyBcdGlmIChkaXN0ID4gZnVydGhlc3QpIHtcclxuXHQvLyBcdFx0ZnVydGhlc3QgPSBkaXN0O1xyXG5cdC8vIFx0fVxyXG5cdC8vIH1cclxuXHQvLyB2YXIgbmV3U2VsZWN0aW9uU2l6ZSA9IGZ1cnRoZXN0ICogdGhpcy5zZWxlY3Rpb25XZWlnaHQ7XHJcblx0Ly8gaWYgKG5ld1NlbGVjdGlvblNpemUgPD0gdGhpcy5taW5TZWxlY3Rpb25TaXplKSB7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygnYScpO1xyXG5cdC8vIFx0bmV3U2VsZWN0aW9uU2l6ZSA9IHRoaXMubWluU2VsZWN0aW9uU2l6ZTtcclxuXHQvLyB9XHJcblx0Ly8gdGhpcy5zZWxlY3Rpb24ud2lkdGggPSBuZXdTZWxlY3Rpb25TaXplO1xyXG5cdC8vIHRoaXMuc2VsZWN0aW9uLmhlaWdodCA9IG5ld1NlbGVjdGlvblNpemU7XHJcbn07XHJcbkdyb3VwLnByb3RvdHlwZS5hZGRNZW1iZXIgPSBmdW5jdGlvbihtZW1iZXIpIHtcclxuXHR0aGlzLm1lbWJlcnMucHVzaChtZW1iZXIpO1xyXG5cdG1lbWJlci5ncm91cCA9IHRoaXM7XHJcblx0Ly8gY29uc29sZS5sb2codGhpcy5tZW1iZXJzKTtcclxufTtcclxuR3JvdXAucHJvdG90eXBlLm9uSW5wdXREb3duID0gZnVuY3Rpb24oKSB7XHJcblx0Ly8gY29uc29sZS5sb2coJ2EnKTtcclxuXHRpZiAodGhpcy5zZWxlY3RlZCkge1xyXG5cdFx0Ly8gY29uc29sZS5sb2coJ2MnKTtcclxuXHRcdC8vIGNvbnNvbGUubG9nKHRoaXMubXlNYW5hZ2VyLCB0aGlzLm15TWFuYWdlci5iYWNrZ3JvdW5kKTtcclxuXHRcdHZhciBiZyA9IHRoaXMubXlNYW5hZ2VyLmJhY2tncm91bmQubXlNYW5hZ2VyLndoZXJlQ2xpY2tlZCgpO1xyXG5cdFx0Ly8gY29uc29sZS5sb2coYmcpO1xyXG5cdFx0dGhpcy5teU1hbmFnZXIuYmFja2dyb3VuZC5teU1hbmFnZXIuc2VuZFRvKHRoaXMubXlNYW5hZ2VyLmJhY2tncm91bmQsIGJnLCB0aGlzKTtcclxuXHRcdHRoaXMuc2V0U2VsZWN0ZWQoZmFsc2UpO1xyXG5cdH0gZWxzZSBpZiAodGhpcy5jbGlja2VkKCkpIHtcclxuXHRcdHRoaXMuY2xpY2soKTtcclxuXHR9XHJcbn07XHJcbkdyb3VwLnByb3RvdHlwZS5zdGFydEVkdWNhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG5cdHRoaXMubGVhcm5pbmcgPSBmYWxzZTtcclxuXHR0aGlzLmJvb2sudmlzaWJsZSA9IHRydWU7XHJcblx0dGhpcy5zdGF0ZS5nYW1lLnRpbWUuZXZlbnRzLmFkZChQaGFzZXIuVGltZXIuU0VDT05EICogdGhpcy5sZWFybmluZ1RpbWUsIHRoaXMuZW5kRWR1Y2F0aW9uLCB0aGlzKTtcclxufTtcclxuR3JvdXAucHJvdG90eXBlLmVuZEVkdWNhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG5cdGZvciAodmFyIG1lbWJlciBpbiB0aGlzLm1lbWJlcnMpIHtcclxuXHRcdHRoaXMubWVtYmVyc1ttZW1iZXJdLmVkdUxldmVsICs9IDE7XHJcblx0fVxyXG5cdHRoaXMubGVhcm5pbmcgPSBmYWxzZTtcclxuXHR0aGlzLmJvb2sudmlzaWJsZSA9IGZhbHNlO1xyXG59O1xyXG5Hcm91cC5wcm90b3R5cGUuY2xpY2tlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKHRoaXMubWVtYmVycy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHR2YXIgbW91c2VYID0gdGhpcy5nYW1lLmlucHV0Lng7XHJcblx0dmFyIG1vdXNlWSA9IHRoaXMuZ2FtZS5pbnB1dC55O1xyXG5cdHZhciBkaWZmWCA9IG1vdXNlWCAtIHRoaXMuY2VudGVyLng7XHJcblx0dmFyIGRpZmZZID0gbW91c2VZIC0gdGhpcy5jZW50ZXIueTtcclxuXHR2YXIgdG90YWxEaWZmID0gdXRpbC5oeXBvdGVudXNlKGRpZmZYLCBkaWZmWSk7XHJcblx0aWYgKHRvdGFsRGlmZiA8PSB0aGlzLmNsaWNrRGlzdCkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdHJldHVybiBmYWxzZTtcclxufTtcclxuR3JvdXAucHJvdG90eXBlLmNsaWNrID0gZnVuY3Rpb24oKSB7XHJcblx0aWYgKHRoaXMuc2VsZWN0ZWQpIHtcclxuICAgICAgICAvLyB0aGlzLnN0YXRlLmhtLmdyb3VwU2VsZWN0ZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuc2V0U2VsZWN0ZWQoZmFsc2UpO1xyXG5cdH0gZWxzZSBpZiAoIXRoaXMubG9ja2VkKSB7XHJcbiAgICAgICAgLy8gdGhpcy5zdGF0ZS5obS5ncm91cFNlbGVjdGVkID0gdHJ1ZTtcclxuXHRcdHRoaXMuc2V0U2VsZWN0ZWQodHJ1ZSk7XHJcblx0fVxyXG59O1xyXG5Hcm91cC5wcm90b3R5cGUuc2V0U2VsZWN0ZWQgPSBmdW5jdGlvbihuZXdTZWxlY3RlZCkge1xyXG5cdHRoaXMuc2VsZWN0ZWQgPSBuZXdTZWxlY3RlZDtcclxuXHR0aGlzLnNlbGVjdGlvbi52aXNpYmxlID0gbmV3U2VsZWN0ZWQ7XHJcbiAgICBpZiAobmV3U2VsZWN0ZWQgPT0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuaG0uZ3JvdXBTZWxlY3RlZCA9IHRoaXM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmhtLmdyb3VwU2VsZWN0ZWQgPT0gdGhpcykge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmhtLmdyb3VwU2VsZWN0ZWQgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuR3JvdXAucHJvdG90eXBlLmNoYW5nZUNlbnRlciA9IGZ1bmN0aW9uKG5ld0NlbnRlcikge1xyXG5cdHRoaXMuc2VsZWN0aW9uLnggPSBuZXdDZW50ZXIueDtcclxuXHR0aGlzLnNlbGVjdGlvbi55ID0gbmV3Q2VudGVyLnk7XHJcblx0dGhpcy5ib29rLnggPSBuZXdDZW50ZXIueDtcclxuXHR0aGlzLmJvb2sueSA9IG5ld0NlbnRlci55O1xyXG5cdHRoaXMubG9jay54ID0gbmV3Q2VudGVyLng7XHJcblx0dGhpcy5sb2NrLnkgPSBuZXdDZW50ZXIueTtcclxuXHR0aGlzLmNlbnRlciA9IG5ld0NlbnRlcjtcclxufTtcclxuR3JvdXAucHJvdG90eXBlLm51bVBlb3BsZSA9IGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzLm1lbWJlcnMubGVuZ3RoO1xyXG59O1xyXG5Hcm91cC5wcm90b3R5cGUubG93ZXN0RWR1Y2F0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbG93ZXN0ID0gMztcclxuICAgIGZvciAodmFyIG1lbWJlciBpbiB0aGlzLm1lbWJlcnMpIHtcclxuICAgICAgICBtZW1iZXIgPSB0aGlzLm1lbWJlcnNbbWVtYmVyXTtcclxuICAgICAgICBpZiAobWVtYmVyLmVkdUxldmVsIDwgbG93ZXN0KSB7XHJcbiAgICAgICAgICAgIGxvd2VzdCA9IG1lbWJlci5lZHVMZXZlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbG93ZXN0O1xyXG59O1xyXG5Hcm91cC5wcm90b3R5cGUuYXZlcmFnZUhhcHBpbmVzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGhhcHBpbmVzcyA9IDA7XHJcbiAgICBmb3IgKHZhciBtZW1iZXIgaW4gdGhpcy5tZW1iZXJzKSB7XHJcbiAgICAgICAgbWVtYmVyID0gdGhpcy5tZW1iZXJzW21lbWJlcl07XHJcbiAgICAgICAgaGFwcGluZXNzICs9IG1lbWJlci5oYXBwaW5lc3M7XHJcbiAgICB9XHJcbiAgICBoYXBwaW5lc3MgLz0gdGhpcy5tZW1iZXJzLmxlbmd0aDtcclxuICAgIHJldHVybiBoYXBwaW5lc3M7XHJcbn07XHJcbkdyb3VwLnByb3RvdHlwZS5hdmVyYWdlRmF0aWd1ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGZhdGlndWUgPSAwO1xyXG4gICAgZm9yICh2YXIgbWVtYmVyIGluIHRoaXMubWVtYmVycykge1xyXG4gICAgICAgIG1lbWJlciA9IHRoaXMubWVtYmVyc1ttZW1iZXJdO1xyXG4gICAgICAgIGZhdGlndWUgKz0gbWVtYmVyLmZhdGlndWU7XHJcbiAgICB9XHJcbiAgICBmYXRpZ3VlIC89IHRoaXMubWVtYmVycy5sZW5ndGg7XHJcbiAgICByZXR1cm4gZmF0aWd1ZTtcclxufTtcclxuR3JvdXAucHJvdG90eXBlLmluY29tZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGluY29tZSA9IDA7XHJcbiAgICBmb3IgKHZhciBtZW1iZXIgaW4gdGhpcy5tZW1iZXJzKSB7XHJcbiAgICAgICAgbWVtYmVyID0gdGhpcy5tZW1iZXJzW21lbWJlcl07XHJcbiAgICAgICAgaW5jb21lICs9IG1lbWJlci5nZXRUYXgoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbmNvbWU7XHJcbn07XHJcbi8vIEdyb3VwLnByb3RvdHlwZS5oYXBwaW5lc3NDaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgIFxyXG4vLyB9O1xyXG4vLyBHcm91cC5wcm90b3R5cGUuaW5jb21lQ2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBcclxuLy8gfTtcclxuLy8gR3JvdXAucHJvdG90eXBlLm1vdXNlRG93biA9IGZ1bmN0aW9uKCkge1xyXG5cdFxyXG4vLyB9O1xyXG5Hcm91cC5wcm90b3R5cGUub25Nb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAodGhpcy5tZW1iZXJzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cdHZhciBtb3VzZVggPSB0aGlzLmdhbWUuaW5wdXQueDtcclxuXHR2YXIgbW91c2VZID0gdGhpcy5nYW1lLmlucHV0Lnk7XHJcbiAgICB2YXIgZGlzdCA9IHV0aWwuaHlwb3RlbnVzZSh0aGlzLmNlbnRlci54IC0gbW91c2VYLCB0aGlzLmNlbnRlci55IC0gbW91c2VZKTtcclxuICAgIGlmIChkaXN0IDw9IHRoaXMuY2xpY2tEaXN0KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmhtLmdyb3VwU2VsZWN0ZWQgfHwgdGhpcy5zdGF0ZS5obS5ncm91cFNlbGVjdGVkID09IHRoaXMpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2EnKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5oYXBwaW5lc3NNb2RpZmllcik7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuaG0uc2hvd1N0YXRpYyh7cGVvcGxlIDogdGhpcy5udW1QZW9wbGUoKSwgZWR1Y2F0aW9uIDogdGhpcy5sb3dlc3RFZHVjYXRpb24oKSwgaGFwcGluZXNzIDogdGhpcy5hdmVyYWdlSGFwcGluZXNzKCksIGZhdGlndWUgOiB0aGlzLmF2ZXJhZ2VGYXRpZ3VlKCksIGluY29tZSA6IHRoaXMuaW5jb21lKCksIGhhcHBpbmVzc01vZGlmaWVyIDogdGhpcy5oYXBwaW5lc3NNb2RpZmllcn0sIHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnkgLSA1MCwgMTAwKTtcclxuICAgICAgICAgICAgdGhpcy5ob3ZlciA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodGhpcy5ob3Zlcikge1xyXG4gICAgICAgICAgICB0aGlzLmhvdmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuaG0uaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5obS5ncm91cFNlbGVjdGVkID09IHRoaXMgJiYgdGhpcy5teU1hbmFnZXIuYmFja2dyb3VuZC5teU1hbmFnZXIud2hlcmVDbGlja2VkKCkgIT0gdGhpcy5teU1hbmFnZXIuYmFja2dyb3VuZFxyXG4gICAgICAgICAgICAmJiB0aGlzLm15TWFuYWdlci5iYWNrZ3JvdW5kLm15TWFuYWdlci5jYW5UcmFuc2Zlcih0aGlzLm15TWFuYWdlci5iYWNrZ3JvdW5kLCB0aGlzLm15TWFuYWdlci5iYWNrZ3JvdW5kLm15TWFuYWdlci53aGVyZUNsaWNrZWQoKSwgdGhpcykpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2EnKTtcclxuICAgICAgICAgICAgdmFyIGJnTWFuYWdlciA9IHRoaXMubXlNYW5hZ2VyLmJhY2tncm91bmQubXlNYW5hZ2VyXHJcbiAgICAgICAgICAgIHZhciB0cmFuc2ZlclR5cGUgPSBiZ01hbmFnZXIudHJhbnNmZXJUeXBlKHRoaXMubXlNYW5hZ2VyLmJhY2tncm91bmQsIGJnTWFuYWdlci53aGVyZUNsaWNrZWQoKSwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuaG0uc2hvd0NoYW5nZSh0cmFuc2ZlclR5cGUuY2FuLCB7aGFwcGluZXNzQ2hhbmdlIDogdHJhbnNmZXJUeXBlLmhhcHBpbmVzc0NoYW5nZSwgaW5jb21lQ2hhbmdlIDogdHJhbnNmZXJUeXBlLmluY29tZUNoYW5nZX0sIG1vdXNlWCwgbW91c2VZKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYicpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmhtLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbi8vIEdyb3VwLnByb3RvdHlwZS5oYXBwaW5lc3NNb2RpZmllciA9IGZ1bmN0aW9uKCkge1xyXG4vLyAgICAgcmV0dXJuIHRoaXMuaGFwcGluZXNzTW9kaWZpZXI7XHJcbi8vIH07XHJcbkdyb3VwLnByb3RvdHlwZS5hcHBseUhhcHBpbmVzcyA9IGZ1bmN0aW9uKCkge1xyXG5cdC8vIGNvbnNvbGUubG9nKCdhcHBseScpO1xyXG5cdHZhciBmbGFnID0gZmFsc2U7XHJcblx0Zm9yICh2YXIgbWVtYmVyIGluIHRoaXMubWVtYmVycykge1xyXG5cdFx0bWVtYmVyID0gdGhpcy5tZW1iZXJzW21lbWJlcl07XHJcblx0XHQvLyBjb25zb2xlLmxvZyhtZW1iZXIuaGFwcGluZXNzLCB0aGlzLmhhcHBpbmVzc01vZGlmaWVyKTtcclxuXHRcdC8vIGNvbnNvbGUubG9ncW1lbWJlci5oYXBwaW5lc3MsIHRoaXMuaGFwcGluZXNzTW9kaWZpZXIpO1xyXG5cdFx0bWVtYmVyLmhhcHBpbmVzcyArPSB0aGlzLmhhcHBpbmVzc01vZGlmaWVyO1xyXG5cdFx0Ly8gbWVtYmVyLmhhcHBpbmVzcyAtPSA1MDtcclxuXHRcdGlmIChtZW1iZXIuaGFwcGluZXNzID4gMTAwKSB7XHJcblx0XHRcdG1lbWJlci5oYXBwaW5lc3MgPSAxMDA7XHJcblx0XHR9IGVsc2UgaWYgKG1lbWJlci5oYXBwaW5lc3MgPD0gMCkge1xyXG5cdFx0XHRtZW1iZXIuaGFwcGluZXNzID0gMDtcclxuXHRcdFx0ZmxhZyA9IHRydWU7XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmIChmbGFnKSB7XHJcblx0XHR0aGlzLmdldE91dE9mVG93bigpO1xyXG5cdH1cclxufTtcclxuR3JvdXAucHJvdG90eXBlLmFkZEZhdGlndWUgPSBmdW5jdGlvbihhbXQpIHtcclxuXHQvLyBjb25zb2xlLmxvZyhhbXQpO1xyXG5cdGlmICh0aGlzLm1lbWJlcnNbMF0uZmF0aWd1ZSA8PSAwICYmIGFtdCA8PSAwKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdHZhciBmbGFnID0gZmFsc2U7XHJcblx0Zm9yICh2YXIgbWVtYmVyIGluIHRoaXMubWVtYmVycykge1xyXG5cdFx0dGhpcy5tZW1iZXJzW21lbWJlcl0uZmF0aWd1ZSArPSBhbXQ7XHJcblx0XHRpZiAodGhpcy5tZW1iZXJzW21lbWJlcl0uZmF0aWd1ZSA+PSAxMDApIHtcclxuXHRcdFx0ZmxhZyA9IHRydWU7XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmIChmbGFnKSB7XHJcblx0XHQvLyBjb25zb2xlLmxvZyh0aGlzKTtcclxuXHRcdHRoaXMuZ2V0T3V0T2ZUb3duKCk7XHJcblx0XHQvL2NvbnNvbGUubG9nKCdmYXRpZ3VlIHRvbyBkYW0gaGlnaCcpO1xyXG5cdH1cclxufTtcclxuR3JvdXAucHJvdG90eXBlLmdldE91dE9mVG93biA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBuZXdCRyA9IHRoaXMubXlNYW5hZ2VyLmJhY2tncm91bmQubXlNYW5hZ2VyLmJhY2tncm91bmRCeSgnaG91c2UnLCB0aGlzLm15TWFuYWdlci5iYWNrZ3JvdW5kLmluY29tZUxldmVsKTtcclxuXHRpZiAoIW5ld0JHKSB7XHJcblx0XHRjb25zb2xlLmxvZygnRVJST1InKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0dGhpcy5teU1hbmFnZXIuYmFja2dyb3VuZC5teU1hbmFnZXIuc2VuZFRvKHRoaXMubXlNYW5hZ2VyLmJhY2tncm91bmQsIG5ld0JHLCB0aGlzKTtcclxuXHR0aGlzLmxvY2tJdCgpO1xyXG59XHJcbkdyb3VwLnByb3RvdHlwZS5sb2NrSXQgPSBmdW5jdGlvbigpIHtcclxuICAgIHRoaXMubG9ja2VkID0gdHJ1ZTtcclxuICAgIHRoaXMubG9jay52aXNpYmxlID0gdHJ1ZTtcclxuXHR0aGlzLnN0YXRlLmdhbWUudGltZS5ldmVudHMuYWRkKFBoYXNlci5UaW1lci5TRUNPTkQgKiB0aGlzLmxvY2tUaW1lLCB0aGlzLmVuZExvY2ssIHRoaXMpO1xyXG59O1xyXG5Hcm91cC5wcm90b3R5cGUuZW5kTG9jayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5sb2NrZWQgPSBmYWxzZTtcclxuICAgIHRoaXMubG9jay52aXNpYmxlID0gZmFsc2U7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEdyb3VwO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XHJcbnZhciBHcm91cCA9IHJlcXVpcmUoJy4vZ3JvdXAnKTtcclxuXHJcbnZhciBHcm91cE1hbmFnZXIgPSBmdW5jdGlvbiAoZ2FtZSwgc3RhdGUpIHtcclxuXHR0aGlzLmdhbWUgPSBnYW1lO1xyXG5cdHRoaXMubWVtYmVycyA9IFtdO1xyXG5cdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxufTtcclxuR3JvdXBNYW5hZ2VyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdyb3VwTWFuYWdlcjtcclxuR3JvdXBNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuXHQvLyBjb25zb2xlLmxvZyh0aGlzLmNlbnRlcik7XHJcblx0Ly91cGRhdGUgYm91bmRzXHJcblx0aWYgKHRoaXMuYmFja2dyb3VuZCkge1xyXG5cdFx0dmFyIHZhcnMgPSB0aGlzLmJhY2tncm91bmQuZ2V0VmFyc0NlbnRlcigpO1xyXG5cdFx0dGhpcy53aWR0aCA9IHZhcnMud2lkdGg7XHJcblx0XHR0aGlzLmhlaWdodCA9IHZhcnMuaGVpZ2h0O1xyXG5cdFx0dGhpcy5jZW50ZXIgPSB2YXJzLmNlbnRlcjtcclxuXHRcdC8vIGNvbnNvbGUubG9nKHZhcnMpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdC8vdXBkYXRlIG1lbWJlciB2ZWxvY2l0eVxyXG5cdGZvciAodmFyIG1lbWJlciBpbiB0aGlzLm1lbWJlcnMpIHtcclxuXHRcdG1lbWJlciA9IHRoaXMubWVtYmVyc1ttZW1iZXJdO1xyXG5cdFx0dmFyIHZlbG9jaXR5ID0ge3ggOiAwLCB5IDogMH07XHJcblx0XHQvLyBjb25zb2xlLmxvZyh0aGlzLmNlbnRlciwgbWVtYmVyLmNlbnRlcik7XHJcblx0XHR2YXIgZGlmZlggPSB0aGlzLmNlbnRlci54IC0gbWVtYmVyLmNlbnRlci54O1xyXG5cdFx0dmFyIGRpZmZZID0gdGhpcy5jZW50ZXIueSAtIG1lbWJlci5jZW50ZXIueTtcclxuXHRcdHZlbG9jaXR5LnggPSBkaWZmWDtcclxuXHRcdHZlbG9jaXR5LnkgPSBkaWZmWTtcclxuXHRcdGZvciAodmFyIG90aGVyIGluIHRoaXMubWVtYmVycykge1xyXG5cdFx0XHRvdGhlciA9IHRoaXMubWVtYmVyc1tvdGhlcl07XHJcblx0XHRcdGlmIChvdGhlciA9PT0gbWVtYmVyKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIG9EaWZmeCA9IG90aGVyLmNlbnRlci54IC0gbWVtYmVyLmNlbnRlci54O1xyXG5cdFx0XHR2YXIgb0RpZmZ5ID0gb3RoZXIuY2VudGVyLnkgLSBtZW1iZXIuY2VudGVyLnk7XHJcblx0XHRcdHZhciBoeXAgPSBVdGlsLmh5cG90ZW51c2Uob0RpZmZ4LCBvRGlmZnkpO1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKGh5cCk7XHJcblx0XHRcdGlmIChoeXAgPD0gdGhpcy5taW5EaXN0KSB7XHJcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ2InLCBoeXApO1xyXG5cdFx0XHRcdHZlbG9jaXR5LnggPSAtMSAqIG9EaWZmeDtcclxuXHRcdFx0XHR2ZWxvY2l0eS55ID0gLTEgKiBvRGlmZnk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ2EnKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0bWVtYmVyLnZlbG9jaXR5ID0gdmVsb2NpdHk7XHJcblx0fVxyXG5cdC8vdXBkYXRlIG1lbWJlcnNcclxuXHRmb3IgKG1lbWJlciBpbiB0aGlzLm1lbWJlcnMpIHtcclxuXHRcdHRoaXMubWVtYmVyc1ttZW1iZXJdLnVwZGF0ZSgpO1xyXG5cdH1cclxufTtcclxuR3JvdXBNYW5hZ2VyLnByb3RvdHlwZS50cmFuc2ZlciA9IGZ1bmN0aW9uKG90aGVyR00sIG15TWVtYmVyKSB7XHJcblx0dmFyIHRlc3RWYWxzID0gb3RoZXJHTS5iYWNrZ3JvdW5kLmdldFZhcnNDZW50ZXIoKTtcclxuXHQvLyBjb25zb2xlLmxvZygndHJhbnNmZXIgdG8nLCBvdGhlckdNLmJhY2tncm91bmQudHlwZSwgb3RoZXJHTS5iYWNrZ3JvdW5kLmluY29tZUxldmVsLCB0ZXN0VmFscy5jZW50ZXIueSwgdGVzdFZhbHMueSwgdGVzdFZhbHMudmlzSGVpZ2h0LCB0ZXN0VmFscy52UmF0aW8pO1xyXG5cdHZhciBpbmRleCA9IHRoaXMubWVtYmVycy5pbmRleE9mKG15TWVtYmVyKTtcclxuXHR0aGlzLm1lbWJlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHRvdGhlckdNLmFkZE1lbWJlcihteU1lbWJlcik7XHJcbn07XHJcbkdyb3VwTWFuYWdlci5wcm90b3R5cGUuYWRkTWVtYmVyID0gZnVuY3Rpb24obWVtYmVyKSB7XHJcblx0dGhpcy5tZW1iZXJzLnB1c2gobWVtYmVyKTtcclxuXHRtZW1iZXIubXlNYW5hZ2VyID0gdGhpcztcclxuXHR2YXIgc21hbGxlciA9ICh0aGlzLndpZHRoIDwgdGhpcy5oZWlnaHQpID8gdGhpcy53aWR0aCA6IHRoaXMuaGVpZ2h0O1xyXG5cdHRoaXMubWluRGlzdCA9IHNtYWxsZXIgLyB0aGlzLm1lbWJlcnMubGVuZ3RoO1xyXG5cdC8vIGNvbnNvbGUubG9nKHRoaXMubWluRGlzdCk7XHJcbn07XHJcbkdyb3VwTWFuYWdlci5wcm90b3R5cGUuYWRkUGVyc29uID0gZnVuY3Rpb24obmV3UGVyc29uKSB7XHJcblx0aWYgKHRoaXMubWVtYmVycy5sZW5ndGggPT0gMCkge1xyXG5cdFx0Ly8gY29uc29sZS5sb2codGhpcy5jZW50ZXIpO1xyXG5cdFx0dGhpcy5hZGRNZW1iZXIobmV3IEdyb3VwKHRoaXMuZ2FtZSwgdGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSwgdGhpcy5zdGF0ZSkpO1xyXG5cdFx0Ly8gY29uc29sZS5sb2coJ25ldyBncm91cCcpO1xyXG5cdH1cclxuXHR0aGlzLm1lbWJlcnNbMF0uYWRkTWVtYmVyKG5ld1BlcnNvbik7XHJcbn07XHJcbkdyb3VwTWFuYWdlci5wcm90b3R5cGUubnVtUGVvcGxlID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIGNvdW50ID0gMDtcclxuXHRmb3IgKHZhciBtZW1iZXIgaW4gdGhpcy5tZW1iZXJzKSB7XHJcblx0XHRtZW1iZXIgPSB0aGlzLm1lbWJlcnNbbWVtYmVyXTtcclxuXHRcdGNvdW50ICs9IG1lbWJlci5udW1QZW9wbGUoKTtcclxuXHR9XHJcblx0cmV0dXJuIGNvdW50O1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBHcm91cE1hbmFnZXI7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwidmFyIEhvdmVyTWVudSA9IGZ1bmN0aW9uIChnYW1lLCB4LCB5LCBzdGF0ZSkge1xyXG5cdFBoYXNlci5TcHJpdGUuY2FsbCh0aGlzLCBnYW1lLCB4LCB5LCAnYm9yZGVyZWQnKTtcclxuXHRnYW1lLmFkZC5leGlzdGluZyh0aGlzKTtcclxuXHR0aGlzLnggPSB4O1xyXG5cdHRoaXMueSA9IHk7XHJcbiAgICB0aGlzLmdyb3VwU2VsZWN0ZWQgPSBudWxsO1xyXG5cdHRoaXMud2lkdGggPSAyNTY7XHJcblx0dGhpcy5oZWlnaHQgPSAxMjg7XHJcbiAgICB0aGlzLnN0YXRpY1dpZHRoID0gMjU2O1xyXG4gICAgdGhpcy5zdGF0aWNIZWlnaHQgPSAxMjg7XHJcbiAgICB0aGlzLmNoYW5nZVdpZHRoID0gMjI0O1xyXG4gICAgdGhpcy5jaGFuZ2VIZWlnaHQgPSA2NDtcclxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHRcclxuXHR0aGlzLnN0YXRpY1RleHQgPSB0aGlzLmdhbWUuYWRkLmdyb3VwKCk7XHJcblx0dGhpcy5jaGFuZ2VUZXh0ID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xyXG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5jaGV2cm9uID0gdGhpcy5nYW1lLmFkZC5zcHJpdGUodGhpcy54LCB0aGlzLnksICdjaGV2cm9ucycpO1xyXG4gICAgdGhpcy5jaGV2cm9uLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcbiAgICB0aGlzLmNoZXZyb24ud2lkdGggPSA1MDtcclxuICAgIHRoaXMuY2hldnJvbi5oZWlnaHQgPSA1MDtcclxuICAgIHRoaXMuY2hldnJvbi55IC09IHRoaXMuaGVpZ2h0O1xyXG4gICAgdGhpcy5jaGV2cm9uLnggKz0gMjU7XHJcbiAgICBcclxuICAgIC8vIHRoaXMuc3RhdGUuaW5wdXQuYWRkTW92ZUNhbGxiYWNrKHRoaXMub25JbnB1dE1vdmUsIHRoaXMpO1xyXG5cdFxyXG5cdHRoaXMucGVvcGxlID0gdGhpcy5nYW1lLmFkZC50ZXh0KDEwLCAxMCwgJ1Blb3BsZTogMCcpO1xyXG5cdHRoaXMucGVvcGxlLmZvbnQgPSAnUm9ib3RvJztcclxuXHR0aGlzLnBlb3BsZS5mb250U2l6ZSA9IDE4O1xyXG5cdHRoaXMucGVvcGxlLmZpbGwgPSAnIzAwMDAwMCc7XHJcblx0XHJcblx0dGhpcy5lZHVjYXRpb24gPSB0aGlzLmdhbWUuYWRkLnRleHQoMTAsIDEwLCAnRWR1Y2F0aW9uOiBMb3cnKTtcclxuXHR0aGlzLmVkdWNhdGlvbi5mb250ID0gJ1JvYm90byc7XHJcblx0dGhpcy5lZHVjYXRpb24uZm9udFNpemUgPSAxODtcclxuXHR0aGlzLmVkdWNhdGlvbi5maWxsID0gJyMwMDAwMDAnO1xyXG5cdFxyXG5cdHRoaXMuaGFwcGluZXNzID0gdGhpcy5nYW1lLmFkZC50ZXh0KDEwLCAxMCwgJ0hhcHBpbmVzczogJTEwMCcpO1xyXG5cdHRoaXMuaGFwcGluZXNzLmZvbnQgPSAnUm9ib3RvJztcclxuXHR0aGlzLmhhcHBpbmVzcy5mb250U2l6ZSA9IDE4O1xyXG5cdHRoaXMuaGFwcGluZXNzLmZpbGwgPSAnIzAwMDAwMCc7XHJcblx0XHJcblx0dGhpcy5mYXRpZ3VlID0gdGhpcy5nYW1lLmFkZC50ZXh0KDEwLCAxMCwgJ0ZhdGlndWU6ICUwJyk7XHJcblx0dGhpcy5mYXRpZ3VlLmZvbnQgPSAnUm9ib3RvJztcclxuXHR0aGlzLmZhdGlndWUuZm9udFNpemUgPSAxODtcclxuXHR0aGlzLmZhdGlndWUuZmlsbCA9ICcjMDAwMDAwJztcclxuXHRcclxuICAgIHRoaXMuaW5jb21lID0gdGhpcy5nYW1lLmFkZC50ZXh0KDEwLCAxMCwgJ0luY29tZTogJDAnKTtcclxuXHR0aGlzLmluY29tZS5mb250ID0gJ1JvYm90byc7XHJcblx0dGhpcy5pbmNvbWUuZm9udFNpemUgPSAxODtcclxuXHR0aGlzLmluY29tZS5maWxsID0gJyMwMDAwMDAnO1xyXG4gICAgXHJcblx0dGhpcy5zdGF0aWNUZXh0LmFkZCh0aGlzLnBlb3BsZSk7XHJcblx0dGhpcy5zdGF0aWNUZXh0LmFkZCh0aGlzLmVkdWNhdGlvbik7XHJcbiAgICB0aGlzLmVkdWNhdGlvbi55ICs9IDIyICogMTtcclxuXHR0aGlzLnN0YXRpY1RleHQuYWRkKHRoaXMuaGFwcGluZXNzKTtcclxuICAgIHRoaXMuaGFwcGluZXNzLnkgKz0gMjIgKiAyO1xyXG5cdHRoaXMuc3RhdGljVGV4dC5hZGQodGhpcy5mYXRpZ3VlKTtcclxuICAgIHRoaXMuZmF0aWd1ZS55ICs9IDIyICogMztcclxuXHR0aGlzLnN0YXRpY1RleHQuYWRkKHRoaXMuaW5jb21lKTtcclxuICAgIHRoaXMuaW5jb21lLnkgKz0gMjIgKiA0O1xyXG4gICAgdGhpcy5zdGF0aWNUZXh0LmFkZCh0aGlzLmNoZXZyb24pO1xyXG4gICAgdGhpcy5zdGF0aWNUZXh0LnZpc2libGUgPSBmYWxzZTtcclxuICAgIHRoaXMuc3RhdGljVGV4dC54ID0gdGhpcy54O1xyXG4gICAgdGhpcy5zdGF0aWNUZXh0LnkgPSB0aGlzLnk7XHJcblx0XHJcblx0dGhpcy5oYXBwaW5lc3NDaGFuZ2UgPSB0aGlzLmdhbWUuYWRkLnRleHQoMTAsIDEwLCAnSGFwcGluZXNzID0nKTtcclxuXHR0aGlzLmhhcHBpbmVzc0NoYW5nZS5mb250ID0gJ1JvYm90byc7XHJcblx0dGhpcy5oYXBwaW5lc3NDaGFuZ2UuZm9udFNpemUgPSAxODtcclxuXHR0aGlzLmhhcHBpbmVzc0NoYW5nZS5maWxsID0gJyMwMDAwMDAnO1xyXG5cdFxyXG5cdHRoaXMuaW5jb21lQ2hhbmdlID0gdGhpcy5nYW1lLmFkZC50ZXh0KDEwLCAxMCwgJ0luY29tZSA9Jyk7XHJcblx0dGhpcy5pbmNvbWVDaGFuZ2UuZm9udCA9ICdSb2JvdG8nO1xyXG5cdHRoaXMuaW5jb21lQ2hhbmdlLmZvbnRTaXplID0gMTg7XHJcblx0dGhpcy5pbmNvbWVDaGFuZ2UuZmlsbCA9ICcjMDAwMDAwJztcclxuICAgIFxyXG4gICAgdGhpcy5jaGFuZ2VUZXh0LmFkZCh0aGlzLmhhcHBpbmVzc0NoYW5nZSk7XHJcbiAgICB0aGlzLmNoYW5nZVRleHQuYWRkKHRoaXMuaW5jb21lQ2hhbmdlKTtcclxuICAgIHRoaXMuaW5jb21lQ2hhbmdlLnkgKz0gMjIgKiAxO1xyXG4gICAgdGhpcy5jaGFuZ2VUZXh0LnZpc2libGUgPSBmYWxzZTtcclxuICAgIHRoaXMuY2hhbmdlVGV4dC54ID0gdGhpcy54O1xyXG4gICAgdGhpcy5jaGFuZ2VUZXh0LnkgPSB0aGlzLnk7XHJcbn07XHJcbkhvdmVyTWVudS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBoYXNlci5TcHJpdGUucHJvdG90eXBlKTtcclxuSG92ZXJNZW51LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhvdmVyTWVudTtcclxuSG92ZXJNZW51LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuXHRcclxufTtcclxuLy9wZW9wbGUsIGVkdWNhdGlvbiwgaGFwcGluZXNzLCBmYXRpZ3VlLCBpbmNvbWVcclxuSG92ZXJNZW51LnByb3RvdHlwZS5zaG93U3RhdGljID0gZnVuY3Rpb24oc3RhdGUsIHgsIHksIG92ZXIpIHtcclxuICAgIHggLT0gdGhpcy53aWR0aCAvIDI7XHJcbiAgICB5IC09IHRoaXMuaGVpZ2h0O1xyXG5cdHRoaXMucGVvcGxlLnRleHQgPSAnUGVvcGxlOiAnICsgc3RhdGUucGVvcGxlO1xyXG4gICAgdGhpcy5lZHVjYXRpb24udGV4dCA9ICdFZHVjYXRpb246ICcgKyBzdGF0ZS5lZHVjYXRpb247XHJcbiAgICB0aGlzLmhhcHBpbmVzcy50ZXh0ID0gJ0hhcHBpbmVzczogJScgKyBzdGF0ZS5oYXBwaW5lc3M7XHJcbiAgICB0aGlzLmZhdGlndWUudGV4dCA9ICdGYXRpZ3VlOiAlJyArIHN0YXRlLmZhdGlndWU7XHJcbiAgICB0aGlzLmluY29tZS50ZXh0ID0gJ0luY29tZTogJCcgKyBzdGF0ZS5pbmNvbWU7XHJcbiAgICB2YXIgaGFwcGluZXNzTW9kaWZpZXIgPSBzdGF0ZS5oYXBwaW5lc3NNb2RpZmllcjtcclxuICAgIGlmIChoYXBwaW5lc3NNb2RpZmllciA9PSAtMykge1xyXG4gICAgICAgIHRoaXMuY2hldnJvbi5mcmFtZSA9IDI7XHJcbiAgICB9IGVsc2UgaWYgKGhhcHBpbmVzc01vZGlmaWVyID09IC0yKSB7XHJcbiAgICAgICAgdGhpcy5jaGV2cm9uLmZyYW1lID0gMTtcclxuICAgIH0gZWxzZSBpZiAoaGFwcGluZXNzTW9kaWZpZXIgPT0gLTEpIHtcclxuICAgICAgICB0aGlzLmNoZXZyb24uZnJhbWUgPSAwO1xyXG4gICAgfSBlbHNlIGlmIChoYXBwaW5lc3NNb2RpZmllciA9PSAwKSB7XHJcbiAgICAgICAgdGhpcy5jaGV2cm9uLmZyYW1lID0gMztcclxuICAgIH0gZWxzZSBpZiAoaGFwcGluZXNzTW9kaWZpZXIgPT0gMSkge1xyXG4gICAgICAgIHRoaXMuY2hldnJvbi5mcmFtZSA9IDQ7XHJcbiAgICB9IGVsc2UgaWYgKGhhcHBpbmVzc01vZGlmaWVyID09IDIpIHtcclxuICAgICAgICB0aGlzLmNoZXZyb24uZnJhbWUgPSA1O1xyXG4gICAgfSBlbHNlIGlmIChoYXBwaW5lc3NNb2RpZmllciA9PSAzKSB7XHJcbiAgICAgICAgdGhpcy5jaGV2cm9uLmZyYW1lID0gNjtcclxuICAgIH1cclxuICAgIHRoaXMuc3RhdGljVGV4dC52aXNpYmxlID0gdHJ1ZTtcclxuICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XHJcbiAgICB0aGlzLndpZHRoID0gdGhpcy5zdGF0aWNXaWR0aDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5zdGF0aWNIZWlnaHQ7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICAgIHRoaXMuc3RhdGljVGV4dC54ID0geDtcclxuICAgIHRoaXMuc3RhdGljVGV4dC55ID0geTtcclxuICAgIHRoaXMuYWRqdXN0U3RhdGljKG92ZXIpO1xyXG59O1xyXG4vL2hhcHBpbmVzc0NoYW5nZSwgaW5jb21lQ2hhbmdlXHJcbkhvdmVyTWVudS5wcm90b3R5cGUuc2hvd0NoYW5nZSA9IGZ1bmN0aW9uKGNhbiwgc3RhdGUsIHgsIHkpIHtcclxuICAgIGlmICghY2FuKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cdHRoaXMuaGFwcGluZXNzQ2hhbmdlLnRleHQgPSAnSGFwcGluZXNzIGNoYW5nZTogJyArIHN0YXRlLmhhcHBpbmVzc0NoYW5nZTtcclxuICAgIHRoaXMuaW5jb21lQ2hhbmdlLnRleHQgPSAnSW5jb21lIGNoYW5nZTogJyArIHN0YXRlLmluY29tZUNoYW5nZTtcclxuICAgIHRoaXMuY2hhbmdlVGV4dC52aXNpYmxlID0gdHJ1ZTtcclxuICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XHJcbiAgICB0aGlzLndpZHRoID0gdGhpcy5jaGFuZ2VXaWR0aDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5jaGFuZ2VIZWlnaHQ7XHJcbiAgICB5IC09IHRoaXMuaGVpZ2h0O1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgICB0aGlzLmNoYW5nZVRleHQueCA9IHg7XHJcbiAgICB0aGlzLmNoYW5nZVRleHQueSA9IHk7XHJcbiAgICB0aGlzLmFkanVzdENoYW5nZSgpO1xyXG59O1xyXG5Ib3Zlck1lbnUucHJvdG90eXBlLmFkanVzdFN0YXRpYyA9IGZ1bmN0aW9uKG92ZXIpIHtcclxuICAgIHZhciBtYXhXaWR0aCA9IHRoaXMuZ2FtZS53aWR0aDtcclxuICAgIHZhciBtYXhIZWlnaHQgPSB0aGlzLmdhbWUuaGVpZ2h0O1xyXG4gICAgaWYgKHRoaXMueSAtIHRoaXMuaGVpZ2h0IDw9IDApIHsgLy8gb3ZlciB0b3Agb2Ygc2NyZWVuXHJcbiAgICAgICAgdGhpcy55ICs9IG92ZXI7XHJcbiAgICAgICAgdGhpcy55ICs9IHRoaXMuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuc3RhdGljVGV4dC55ID0gdGhpcy55O1xyXG4gICAgICAgIHRoaXMuY2hhbmdlVGV4dC55ID0gdGhpcy55O1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMueCAtIHRoaXMud2lkdGggLyAyIDwgMCkgeyAvLyBvdmVyIGxlZnQgb2Ygc2NyZWVuXHJcbiAgICAgICAgdGhpcy54ICs9IHRoaXMud2lkdGggLyAyO1xyXG4gICAgICAgIHRoaXMuc3RhdGljVGV4dC54ID0gdGhpcy54O1xyXG4gICAgICAgIHRoaXMuY2hhbmdlVGV4dC54ID0gdGhpcy54O1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLnggKyB0aGlzLndpZHRoIC8gMiA+IG1heFdpZHRoKSB7IC8vIG92ZXIgcmlnaHQgb2Ygc2NyZWVuXHJcbiAgICAgICAgdGhpcy54IC09IHRoaXMud2lkdGggLyAyO1xyXG4gICAgICAgIHRoaXMuc3RhdGljVGV4dC54ID0gdGhpcy54O1xyXG4gICAgICAgIHRoaXMuY2hhbmdlVGV4dC54ID0gdGhpcy54O1xyXG4gICAgfVxyXG59O1xyXG5Ib3Zlck1lbnUucHJvdG90eXBlLmFkanVzdENoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG1heFdpZHRoID0gdGhpcy5nYW1lLndpZHRoO1xyXG4gICAgdmFyIG1heEhlaWdodCA9IHRoaXMuZ2FtZS5oZWlnaHQ7XHJcbiAgICBpZiAodGhpcy55IC0gdGhpcy5oZWlnaHQgPD0gMCkgeyAvLyBvdmVyIHRvcCBvZiBzY3JlZW5cclxuICAgICAgICB0aGlzLnkgKz0gdGhpcy5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5zdGF0aWNUZXh0LnkgPSB0aGlzLnk7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VUZXh0LnkgPSB0aGlzLnk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy54ICsgdGhpcy53aWR0aCA+IG1heFdpZHRoKSB7IC8vIG92ZXIgcmlnaHQgb2Ygc2NyZWVuXHJcbiAgICAgICAgdGhpcy54IC09IHRoaXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5zdGF0aWNUZXh0LnggPSB0aGlzLng7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VUZXh0LnggPSB0aGlzLng7XHJcbiAgICB9XHJcbn07XHJcbkhvdmVyTWVudS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG5cdHRoaXMuc3RhdGljVGV4dC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICB0aGlzLmNoYW5nZVRleHQudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbn07XHJcbi8vIEhvdmVyTWVudS5wcm90b3R5cGUub25JbnB1dE1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAvLyBjb25zb2xlLmxvZygnbW92ZScpO1xyXG4gIFxyXG4vLyB9O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBIb3Zlck1lbnU7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsInZhciBQZXJzb24gPSBmdW5jdGlvbiAoZ2FtZSwgeCwgeSwgaWQpIHtcclxuXHRQaGFzZXIuU3ByaXRlLmNhbGwodGhpcywgZ2FtZSwgeCwgeSwgJ2FnZXMnKTtcclxuXHR0aGlzLmZyYW1lID0gMjtcclxuXHR0aGlzLnZlbG9jaXR5ID0ge3g6MCwgeTowfTtcclxuXHR0aGlzLndpZHRoID0gMTA7XHJcblx0dGhpcy5oZWlnaHQgPSAxMDtcclxuXHR0aGlzLnNwZWVkID0gLjA1O1xyXG5cdHRoaXMuaWQgPSBpZDtcclxuXHR0aGlzLmVkdUxldmVsID0gUGVyc29uLkVEVUxFVkVMLnVuZW1wbG95ZWQ7XHJcblx0dGhpcy5oYXBwaW5lc3MgPSAxMDA7XHJcbiAgICB0aGlzLmZhdGlndWUgPSAwO1xyXG4gICAgdGhpcy5oYXBwaW5lc3NNb2RpZmllciA9IDA7XHJcbiAgICB0aGlzLmFnZSA9IFBlcnNvbi5BR0UueW91bmc7XHJcbiAgICB0aGlzLnR1cm5Db3VudCA9IDA7XHJcbiAgICB0aGlzLmFnZVRocmVzaG9sZCA9IDU7XHJcbn07XHJcblBlcnNvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBoYXNlci5TcHJpdGUucHJvdG90eXBlKTtcclxuUGVyc29uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBlcnNvbjtcclxuXHJcblBlcnNvbi5FRFVMRVZFTCA9IHtcclxuXHR1bmVtcGxveWVkIDogLTEsXHJcblx0bG93ICA6IDAsXHJcblx0bWlkICA6IDEsXHJcblx0aGlnaCA6IDJcclxufTtcclxuXHJcblBlcnNvbi5JTkNPTUVTID0ge1xyXG5cdGxvdyA6IDEwLFxyXG5cdG1pZCA6IDIwLFxyXG5cdGhpZ2ggOiAzMFxyXG59O1xyXG5cclxuUGVyc29uLkFHRSA9IHtcclxuXHR5b3VuZyA6IDAsXHJcblx0YWR1bHQgOiAxLFxyXG5cdG9sZCA6IDJcclxufTtcclxuXHJcblBlcnNvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcblx0dGhpcy54ICs9IHRoaXMudmVsb2NpdHkueCAqIHRoaXMuc3BlZWQ7XHJcblx0dGhpcy55ICs9IHRoaXMudmVsb2NpdHkueSAqIHRoaXMuc3BlZWQ7XHJcblx0Ly9jb25zb2xlLmxvZyh0aGlzLnZlbG9jaXR5KTtcclxufTtcclxuXHJcblBlcnNvbi5wcm90b3R5cGUuYWdlVGljayA9IGZ1bmN0aW9uKCkge1xyXG5cdC8vIHRoaXMudHVybkNvdW50ICs9IDE7XHJcblx0Ly8gaWYgKHRoaXMudHVybkNvdW50ID49IHRoaXMuYWdlVGhyZXNob2xkKSB7XHJcblx0Ly8gXHQvLyBjb25zb2xlLmxvZygnaGFwcHkgYmlydGhkYXknKTtcclxuXHQvLyBcdGlmICh0aGlzLmFnZSA9PSAwKSB7XHJcblx0Ly8gXHRcdHRoaXMuYWdlID0gUGVyc29uLkFHRS5hZHVsdDtcclxuXHQvLyBcdFx0dGhpcy5mcmFtZSA9IDM7XHJcblx0Ly8gXHR9IGVsc2UgaWYgKHRoaXMuYWdlID09IDEpIHtcclxuXHQvLyBcdFx0dGhpcy5hZ2UgPSBQZXJzb24uQUdFLm9sZDtcclxuXHQvLyBcdFx0dGhpcy5mcmFtZSA9IDE7XHJcblx0Ly8gXHR9IGVsc2UgaWYgKHRoaXMuYWdlID09IDIpIHtcclxuXHJcblx0Ly8gXHR9XHJcblx0Ly8gfVxyXG59O1xyXG5cclxuUGVyc29uLnByb3RvdHlwZS5nZXRUYXggPSBmdW5jdGlvbigpIHtcclxuXHQvLyBjb25zb2xlLmxvZygnZ2V0IHRheCcsIHRoaXMuZ3JvdXAubXlNYW5hZ2VyLmJhY2tncm91bmQudHlwZSk7XHJcblx0aWYgKHRoaXMuZ3JvdXAubXlNYW5hZ2VyLmJhY2tncm91bmQudHlwZSA9PT0gJ2hvdXNlJykge1xyXG5cdFx0aWYgKHRoaXMuZ3JvdXAubXlNYW5hZ2VyLmJhY2tncm91bmQuaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5sb3cpIHtcclxuXHRcdFx0Ly8gY29uc29sZS5sb2codGhpcy5ncm91cC5teU1hbmFnZXIuYmFja2dyb3VuZC5teU1hbmFnZXIuc3RhdGUudGF4TW9kLmxvdyk7XHJcblx0XHRcdHJldHVybiAtMSAqIFBlcnNvbi5JTkNPTUVTLmxvdztcclxuXHRcdH0gZWxzZSBpZiAodGhpcy5ncm91cC5teU1hbmFnZXIuYmFja2dyb3VuZC5pbmNvbWVMZXZlbCA9PT0gUGVyc29uLkVEVUxFVkVMLm1pZCkge1xyXG5cdFx0XHRyZXR1cm4gLTIgKiBQZXJzb24uSU5DT01FUy5taWQ7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMuZ3JvdXAubXlNYW5hZ2VyLmJhY2tncm91bmQuaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5oaWdoKSB7XHJcblx0XHRcdHJldHVybiAtMyAqIFBlcnNvbi5JTkNPTUVTLmhpZ2g7XHJcblx0XHR9XHJcblx0fSBlbHNlIGlmICh0aGlzLmdyb3VwLm15TWFuYWdlci5iYWNrZ3JvdW5kLnR5cGUgPT09ICd3b3JrJykge1xyXG5cdFx0aWYgKHRoaXMuZ3JvdXAubXlNYW5hZ2VyLmJhY2tncm91bmQuaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5sb3cpIHtcclxuXHRcdFx0cmV0dXJuIFBlcnNvbi5JTkNPTUVTLmxvdyAqIHRoaXMuZ3JvdXAubXlNYW5hZ2VyLmJhY2tncm91bmQubXlNYW5hZ2VyLnN0YXRlLnRheE1vZC5sb3c7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMuZ3JvdXAubXlNYW5hZ2VyLmJhY2tncm91bmQuaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5taWQpIHtcclxuXHRcdFx0cmV0dXJuIFBlcnNvbi5JTkNPTUVTLm1pZCAqIHRoaXMuZ3JvdXAubXlNYW5hZ2VyLmJhY2tncm91bmQubXlNYW5hZ2VyLnN0YXRlLnRheE1vZC5taWQ7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMuZ3JvdXAubXlNYW5hZ2VyLmJhY2tncm91bmQuaW5jb21lTGV2ZWwgPT09IFBlcnNvbi5FRFVMRVZFTC5oaWdoKSB7XHJcblx0XHRcdHJldHVybiBQZXJzb24uSU5DT01FUy5oaWdoICogdGhpcy5ncm91cC5teU1hbmFnZXIuYmFja2dyb3VuZC5teU1hbmFnZXIuc3RhdGUudGF4TW9kLmhpZ2g7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiAwO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQZXJzb247IiwidmFyIFBsYXllciA9IGZ1bmN0aW9uIChnYW1lLCB4LCB5KSB7XG4gICAgUGhhc2VyLlNwcml0ZS5jYWxsKHRoaXMsIGdhbWUsIHgsIHksICd0ZXN0c3ByaXRlJyk7XG4gICAgZ2FtZS5hZGQuZXhpc3RpbmcodGhpcyk7XG5cdHRoaXMuc3BlZWQgPSAwLjE7XG59XG5cblBsYXllci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBoYXNlci5TcHJpdGUucHJvdG90eXBlKTtcblBsYXllci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQbGF5ZXI7XG5cbi8qKlxuICogQXV0b21hdGljYWxseSBjYWxsZWQgYnkgV29ybGQudXBkYXRlXG4gKi9cblBsYXllci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdC8vdGhpcy54ICs9IHRoaXMudmVsb2NpdHk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBsYXllcjtcbiIsInZhciBQcm9ncmVzc0JhciA9IHJlcXVpcmUoJy4vUHJvZ3Jlc3NCYXInKTtcclxuXHJcbnZhciBVSUJ1aWxkZXIgPSBmdW5jdGlvbihzZXRHYW1lU3RhdGUpIHtcclxuXHQvL0Vuc3VyZSB0aGF0IGNhbm5vdCBjcmVhdGUgbXVsdGlwbGUgaW5zdGFuY2VzIG9mIHRoaXMgY2xhc3NcclxuXHRpZihVSUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0cykge1xyXG5cdFx0cmV0dXJuIFVJQnVpbGRlci5wcm90b3R5cGUuZXhpc3RpbmdSZWZlcmVuY2U7XHJcblx0fVxyXG5cdFxyXG5cdHRoaXMuZ2FtZVN0YXRlID0gc2V0R2FtZVN0YXRlO1xyXG5cdHRoaXMucmVuZGVyYWJsZXMgPSBbXTtcclxuXHQvL0NyZWF0ZSBhbmQgc3RvcmUgYSBncmFwaGljcyBvYmplY3QgKHVzZWQgZm9yIHN0dWZmIGxpa2UgZHJhd2luZyByZWN0YW5nbGVzKVxyXG5cdFVJQnVpbGRlci5wcm90b3R5cGUuZXhpc3RzID0gdHJ1ZTtcclxuXHRVSUJ1aWxkZXIucHJvdG90eXBlLmV4aXN0aW5nUmVmZXJlbmNlID0gdGhpcztcclxufTtcclxuXHJcblVJQnVpbGRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVSUJ1aWxkZXI7XHJcbi8vVGhlc2UgdmFyJ3MgaGVscCBjcmVhdGUgdGhlIHNpbmdsZXRvbiBmdW5jdGlvbmFsaXR5XHJcblVJQnVpbGRlci5wcm90b3R5cGUuZXhpc3RzID0gZmFsc2U7XHJcblVJQnVpbGRlci5wcm90b3R5cGUuZXhpc3RpbmdSZWZlcmVuY2UgPSBudWxsO1xyXG5cclxuLy9Vc2UgdGhpcyBmdW5jdGlvbiB0byBjcmVhdGUgYSBwcm9ncmVzcyBiYXJcclxuLy9Vc2FnZTogdHlwZTogY2FuIGJlIFwiZ3Jvd2luZ1wiIG9yIFwic2hyaW5raW5nXCIsIHRoaXMgd2lsbCBlZmZlY3QgaWYgYmFyIHN0YXJ0cyBhdCAwIGFuZCBnb2VzIHVwIG9yIHZpcyB2ZXJzYVxyXG4vL1x0XHQgbWF4VmFsdWU6IHNldHMgdGhlIG1heCB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgYmFyLCBpLmUuIHVzaW5nIDEwMCBjcmVhdGVzIGEgYmFyIGZyb20gMCB0byAxMDBcclxuLy9cdFx0IHgseTogc2V0cyBsb2NhdGlvblxyXG4vL1x0XHQgRE9OJ1QgRk9SR0VUIHRvIG92ZXJ3cml0ZSB0aGUgb25FdmVudCgpIGZ1bmN0aW9uIGZvciB0aGUgcHJvZ3Jlc3MgYmFyIGFmdGVyIGNyZWF0aW5nIGl0XHJcbi8vXHRcdFx0LW9uRXZlbnQoKSBpcyBhdXRvbWF0aWNhbGx5IGNhbGxlZCB3aGVuIGJhciBmaWxscy9zaHJpbmtzIHBhc3QgbGltaXQgKGRlcGVuZGluZyBvbiBiYXIgdHlwZSlcclxuVUlCdWlsZGVyLnByb3RvdHlwZS5idWlsZFByb2dyZXNzQmFyID0gZnVuY3Rpb24odHlwZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgbWF4VmFsdWUpIHtcclxuXHQvL2NyZWF0ZSBhbmQgZm9ybWF0IG5ldyBwcm9nIGJhclxyXG5cdHZhciBncmFwaGljcyA9IHRoaXMuZ2FtZVN0YXRlLmdhbWUuYWRkLmdyYXBoaWNzKDAsMCk7XHJcblx0dmFyIG5ld1Byb2dCYXIgPSBuZXcgUHJvZ3Jlc3NCYXIodHlwZSwgbWF4VmFsdWUsIGdyYXBoaWNzLCB0aGlzLnJlbmRlcmFibGVzKTtcclxuXHRuZXdQcm9nQmFyLnNldExvY2F0aW9uKHgseSk7XHJcblx0bmV3UHJvZ0Jhci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG5cdC8vc3Vic2NyaWJlIHRvICdyZW5kZXJhYmxlcycgc28gdGhhdCByZW5kZXIoKSBpcyBjYWxsZWQgYXV0b21hdGljYWxseVxyXG5cdC8vIHRoaXMucmVuZGVyYWJsZXMuc3Vic2NyaWJlKG5ld1Byb2dCYXIpO1xyXG5cdHRoaXMucmVuZGVyYWJsZXMucHVzaChuZXdQcm9nQmFyKTtcclxuXHRyZXR1cm4gbmV3UHJvZ0JhcjtcclxufTtcclxuVUlCdWlsZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcclxuXHRmb3IgKHJlbmRlcmFibGUgaW4gdGhpcy5yZW5kZXJhYmxlcykge1xyXG5cdFx0dGhpcy5yZW5kZXJhYmxlc1tyZW5kZXJhYmxlXS5yZW5kZXIoKTtcclxuXHR9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFVJQnVpbGRlcjsiLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSg4MDAsIDYwMCwgUGhhc2VyLkFVVE8sICctZ2FtZScpO1xyXG5cclxud2luZG93LlV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xyXG53aW5kb3cucGxheWVyU3RhdGUgPSB7XHJcbiAgICBjdXJyZW50TGV2ZWw6ICdHYW1lJ1xyXG59O1xyXG5cclxuXHJcbmdhbWUuc3RhdGUuYWRkKCdCb290JywgcmVxdWlyZSgnLi9zdGF0ZXMvYm9vdCcpKTtcclxuZ2FtZS5zdGF0ZS5hZGQoJ1NwbGFzaCcsIHJlcXVpcmUoJy4vc3RhdGVzL3NwbGFzaCcpKTtcclxuZ2FtZS5zdGF0ZS5hZGQoJ1ByZWxvYWRlcicsIHJlcXVpcmUoJy4vc3RhdGVzL3ByZWxvYWRlcicpKTtcclxuZ2FtZS5zdGF0ZS5hZGQoJ01lbnUnLCByZXF1aXJlKCcuL3N0YXRlcy9tZW51JykpO1xyXG5nYW1lLnN0YXRlLmFkZCgnR2FtZScsIHJlcXVpcmUoJy4vc3RhdGVzL2dhbWUnKSk7XHJcbmdhbWUuc3RhdGUuYWRkKCdHYW1lX092ZXInLCByZXF1aXJlKCcuL3N0YXRlcy9nYW1lX292ZXInKSk7XHJcblxyXG5nYW1lLnN0YXRlLnN0YXJ0KCdCb290Jyk7XHJcblxyXG4vL2dhbWUuc3RhZ2UuYmFja2dyb3VuZENvbG9yID0gXCIjZmZmZmZmXCI7XHJcbiIsInZhciBCb290ID0gZnVuY3Rpb24gKCkge307XG5cbm1vZHVsZS5leHBvcnRzID0gQm9vdDtcblxuQm9vdC5wcm90b3R5cGUgPSB7XG5cbiAgcHJlbG9hZDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubG9hZC5pbWFnZSgncHJlbG9hZGVyJywgJ2Fzc2V0cy9wcmVsb2FkZXIuZ2lmJyk7XG4gIH0sXG5cbiAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5nYW1lLmlucHV0Lm1heFBvaW50ZXJzID0gMTtcblxuICAgIGlmICh0aGlzLmdhbWUuZGV2aWNlLmRlc2t0b3ApIHtcbiAgICAgIHRoaXMuZ2FtZS5zdGFnZS5zY2FsZS5wYWdlQWxpZ25Ib3Jpem9udGFsbHkgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdhbWUuc2NhbGUuc2NhbGVNb2RlID0gUGhhc2VyLlNjYWxlTWFuYWdlci5TSE9XX0FMTDtcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5taW5XaWR0aCA9ICA0ODA7XG4gICAgICB0aGlzLmdhbWUuc2NhbGUubWluSGVpZ2h0ID0gMjYwO1xuICAgICAgdGhpcy5nYW1lLnNjYWxlLm1heFdpZHRoID0gNjQwO1xuICAgICAgdGhpcy5nYW1lLnNjYWxlLm1heEhlaWdodCA9IDQ4MDtcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5mb3JjZUxhbmRzY2FwZSA9IHRydWU7XG4gICAgICB0aGlzLmdhbWUuc2NhbGUucGFnZUFsaWduSG9yaXpvbnRhbGx5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuZ2FtZS5zY2FsZS5zZXRTY3JlZW5TaXplKHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnUHJlbG9hZGVyJyk7XG4gIH1cbn07XG4iLCJ2YXIgUGxheWVyID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvcGxheWVyJyk7XHJcbnZhciBCYWNrZ3JvdW5kX01hbmFnZXIgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9iYWNrZ3JvdW5kX21hbmFnZXInKTtcclxudmFyIFBlcnNvbiA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL3BlcnNvbicpO1xyXG52YXIgR3JvdXAgPSByZXF1aXJlKCcuLi9lbnRpdGllcy9ncm91cCcpO1xyXG52YXIgR3JvdXBNYW5hZ2VyID0gcmVxdWlyZSgnLi4vZW50aXRpZXMvZ3JvdXBNYW5hZ2VyJyk7XHJcbnZhciBVSUJ1aWxkZXIgPSByZXF1aXJlKCcuLi9lbnRpdGllcy91aUJ1aWxkZXInKTtcclxudmFyIEhvdmVyTWVudSA9IHJlcXVpcmUoJy4uL2VudGl0aWVzL2hvdmVyTWVudScpO1xyXG5cclxudmFyIEdhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy50ZXN0ZW50aXR5ID0gbnVsbDtcclxuICAvL3RoaXMuZmxvY2tzID0gW107XHJcbiAgdGhpcy5iZ19tZyA9IG51bGw7XHJcbiAgLy8gdGhpcy5zZWxlY3RlZEdyb3VwID0gbnVsbDtcclxuICB0aGlzLm1vbmV5ID0gbnVsbDtcclxuICB0aGlzLm1vbmV5VmFsID0gMDtcclxuICB0aGlzLmN1ck1vbmV5ID0gMDtcclxuICB0aGlzLm1vbmV5VXBkYXRlRGVsYXkgPSAwLjAwMTtcclxuICB0aGlzLm1vbmV5SW5jcmVtZW50aW5nID0gZmFsc2U7XHJcbiAgdGhpcy5oYXBwaW5lc3NWYWwgPSAwO1xyXG4gIHRoaXMuY3VySGFwcGluZXNzID0gMDtcclxuICB0aGlzLmhhcHBpbmVzc1VwZGF0ZURlbGF5ID0gMC4wMDE7XHJcbiAgdGhpcy5oYXBwaW5lc3NJbmNyZW1lbnRpbmcgPSBmYWxzZTtcclxuICB0aGlzLnRheFRpbWUgPSAyO1xyXG4gIHRoaXMudGF4TW9kID0ge2xvdzogMSwgbWlkOiAxLCBoaWdoOiAxfTtcclxuICB0aGlzLm1pbkhhcHBpbmVzcyA9IDUwO1xyXG5cdHRoaXMuZmF0aWd1ZVBlclRpY2sgPSAxMDtcclxuXHQvLyB0aGlzLm1vbmV5Q2hhbmdlRmFkaW5nID0gZmFsc2U7XHJcblx0dGhpcy5tb25leUNoYW5nZUZhZGVEZWxheSA9IDAuMDE7XHJcblx0dGhpcy5tb25leUNoYW5nZUZhZGVSYXRlID0gMC4wMjU7XHJcblx0dGhpcy5tb25leUNoYW5nZUhvbGREZWxheSA9IDE7XHJcblx0dGhpcy5taWdyYW50RGVsYXkgPSAxO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBHYW1lO1xyXG5cclxuR2FtZS5wcm90b3R5cGUgPSB7XHJcblxyXG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xyXG4gIFx0Ly8gY29uc29sZS5sb2coJ2Zvb2ZmJyk7XHJcblx0ICAvLyBjb25zb2xlLmxvZyh0aGlzKTtcclxuICAgIHRoaXMuZ2FtZS5zdGFnZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIiNlZGVkZWRcIjtcclxuICAgIHRoaXMubWVudV9iZyA9IHRoaXMuZ2FtZS5hZGQuaW1hZ2UoMCwgMCwgJ21lbnVfYmcnKTsgIFxyXG4gICAgdmFyIHggPSAodGhpcy5nYW1lLndpZHRoIC8gMikgLSAxMDA7XHJcbiAgICB2YXIgeSA9ICh0aGlzLmdhbWUuaGVpZ2h0IC8gMikgLSA1MDtcclxuXHJcbiAgICB0aGlzLmJnX21nID0gbmV3IEJhY2tncm91bmRfTWFuYWdlcih0aGlzLmdhbWUsIHRoaXMpO1xyXG5cdFxyXG4gICAgdGhpcy5pbnB1dC5vbkRvd24uYWRkKHRoaXMub25JbnB1dERvd24sIHRoaXMpO1xyXG5cdFxyXG5cdHRoaXMubW9uZXkgPSB0aGlzLmdhbWUuYWRkLnRleHQoMjAsIDIwLCAnJDAnKTtcclxuXHR0aGlzLm1vbmV5LmZvbnQgPSBcIlJvYm90b1wiO1xyXG5cdHRoaXMubW9uZXkuZm9udFNpemUgPSAyNDtcclxuXHR0aGlzLm1vbmV5LmZpbGwgPSAnIzAwMDAwMCc7XHJcblx0dGhpcy5tb25leS50ZXh0ID0gJyQwJztcclxuXHJcblx0dGhpcy5tb25leUNoYW5nZSA9IHRoaXMuZ2FtZS5hZGQudGV4dCg4MCwgMjAsICckMCcpO1xyXG5cdHRoaXMubW9uZXlDaGFuZ2UuZm9udCA9IFwiUm9ib3RvXCI7XHJcblx0dGhpcy5tb25leUNoYW5nZS5mb250U2l6ZSA9IDI0O1xyXG5cdHRoaXMubW9uZXlDaGFuZ2UuZmlsbCA9ICcjMDAwMDAwJztcclxuXHR0aGlzLm1vbmV5Q2hhbmdlLnRleHQgPSAnKyQwJztcclxuXHR0aGlzLm1vbmV5Q2hhbmdlLmFscGhhID0gMDtcclxuXHJcblx0dGhpcy51aWIgPSBuZXcgVUlCdWlsZGVyKHRoaXMpO1xyXG5cdHRoaXMuYmFyID0gdGhpcy51aWIuYnVpbGRQcm9ncmVzc0JhcihcImdyb3dpbmdcIiwgdGhpcy5nYW1lLndpZHRoIC8gMiwgMjUsIDMwMCwgMTYsIDEwMCAtIHRoaXMubWluSGFwcGluZXNzKTtcclxuXHQvL3RoaXMuYmFyLmFkZFZhbHVlKDEwMCk7XHJcblx0dGhpcy5oYXBweSA9IHRoaXMuZ2FtZS5hZGQuc3ByaXRlKHRoaXMuZ2FtZS53aWR0aCAqIC4yOSwgMjUsICdoYXBweWZhY2UnKTtcclxuXHR0aGlzLmhhcHB5LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcblxyXG4gIC8vIFRheCBidXR0b25zXHJcbiAgdGhpcy5yZWRUYXhMb3cgICA9IHRoaXMuZ2FtZS5hZGQuYnV0dG9uKHRoaXMuYmdfbWcuYmdBcnJheVswXS5nZXRWYXJzQ2VudGVyKCkuY2VudGVyLnggLSAxNSwgNzUsICd0YXhSZWR1Y2UnLCB0aGlzLmRlY1RheExvdywgdGhpcyk7XHJcbiAgdGhpcy50ZXh0VGF4TG93ICA9IHRoaXMuZ2FtZS5hZGQudGV4dCh0aGlzLmJnX21nLmJnQXJyYXlbMF0uZ2V0VmFycygpWzBdLCA3OCwgJyQkJyk7XHJcbiAgdGhpcy50ZXh0VGF4TG93LmZvbnQgPSBcIlJvYm90b1wiO1xyXG4gIHRoaXMudGV4dFRheExvdy5mb250U2l6ZSA9IDE4O1xyXG4gIHRoaXMuYWRkVGF4TG93ICAgPSB0aGlzLmdhbWUuYWRkLmJ1dHRvbih0aGlzLmJnX21nLmJnQXJyYXlbMF0uZ2V0VmFyc0NlbnRlcigpLmNlbnRlci54ICsgMTUsIDc1LCAndGF4QWRkJywgdGhpcy5pbmNUYXhMb3csIHRoaXMpO1xyXG4gIHRoaXMucmVkVGF4TG93LmFuY2hvci5zZXRUbyguNSwgLjUpO1xyXG4gIHRoaXMudGV4dFRheExvdy5hbmNob3Iuc2V0VG8oMCwgLjUpO1xyXG4gIHRoaXMuYWRkVGF4TG93LmFuY2hvci5zZXRUbyguNSwgLjUpO1xyXG4gIHRoaXMucmVkVGF4TWlkICAgPSB0aGlzLmdhbWUuYWRkLmJ1dHRvbih0aGlzLmJnX21nLmJnQXJyYXlbMV0uZ2V0VmFyc0NlbnRlcigpLmNlbnRlci54IC0gMTUsIDc1LCAndGF4UmVkdWNlJywgdGhpcy5kZWNUYXhNaWQsIHRoaXMpO1xyXG4gIHRoaXMudGV4dFRheE1pZCAgPSB0aGlzLmdhbWUuYWRkLnRleHQodGhpcy5iZ19tZy5iZ0FycmF5WzFdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCwgNzgsICckJCcpO1xyXG4gIHRoaXMudGV4dFRheE1pZC5mb250ID0gXCJSb2JvdG9cIjtcclxuICB0aGlzLnRleHRUYXhNaWQuZm9udFNpemUgPSAxODtcclxuICB0aGlzLmFkZFRheE1pZCAgID0gdGhpcy5nYW1lLmFkZC5idXR0b24odGhpcy5iZ19tZy5iZ0FycmF5WzFdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCArIDE1LCA3NSwgJ3RheEFkZCcsIHRoaXMuaW5jVGF4TWlkLCB0aGlzKTtcclxuICB0aGlzLnJlZFRheE1pZC5hbmNob3Iuc2V0VG8oLjUsIC41KTtcclxuICB0aGlzLnRleHRUYXhNaWQuYW5jaG9yLnNldFRvKDAsIC41KTtcclxuICB0aGlzLmFkZFRheE1pZC5hbmNob3Iuc2V0VG8oLjUsIC41KTtcclxuICB0aGlzLnJlZFRheEhpZ2ggID0gdGhpcy5nYW1lLmFkZC5idXR0b24odGhpcy5iZ19tZy5iZ0FycmF5WzJdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCAtIDE1LCA3NSwgJ3RheFJlZHVjZScsIHRoaXMuZGVjVGF4SGlnaCwgdGhpcyk7XHJcbiAgdGhpcy50ZXh0VGF4SGlnaCA9IHRoaXMuZ2FtZS5hZGQudGV4dCh0aGlzLmJnX21nLmJnQXJyYXlbMV0uZ2V0VmFyc0NlbnRlcigpLmNlbnRlci54LCA3OCwgJyQkJyk7XHJcbiAgdGhpcy50ZXh0VGF4SGlnaC5mb250ID0gXCJSb2JvdG9cIjtcclxuICB0aGlzLnRleHRUYXhIaWdoLmZvbnRTaXplID0gMTg7XHJcbiAgdGhpcy5hZGRUYXhIaWdoICA9IHRoaXMuZ2FtZS5hZGQuYnV0dG9uKHRoaXMuYmdfbWcuYmdBcnJheVsyXS5nZXRWYXJzQ2VudGVyKCkuY2VudGVyLnggKyAxNSwgNzUsICd0YXhBZGQnLCB0aGlzLmluY1RheEhpZ2gsIHRoaXMpO1xyXG4gIHRoaXMucmVkVGF4SGlnaC5hbmNob3Iuc2V0VG8oLjUsIC41KTtcclxuICB0aGlzLnRleHRUYXhIaWdoLmFuY2hvci5zZXRUbygwLCAuNSk7XHJcbiAgdGhpcy5hZGRUYXhIaWdoLmFuY2hvci5zZXRUbyguNSwgLjUpO1xyXG5cclxuXHR0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKFBoYXNlci5UaW1lci5TRUNPTkQgKiB0aGlzLnRheFRpbWUsIHRoaXMuY29sbGVjdFRheCwgdGhpcyk7XHJcbiAgICB0aGlzLmhtID0gbmV3IEhvdmVyTWVudSh0aGlzLmdhbWUsIDIwMCwgMjAwLCB0aGlzKTtcclxuICAgIC8vIHRoaXMuaG0uYW5jaG9yLnNldFRvKDAuNSwgMSk7XHJcblx0Ly8gdGhpcy5obS52aXNpYmxlID0gZmFsc2U7XHJcblx0dGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZChQaGFzZXIuVGltZXIuU0VDT05EICogdGhpcy5tb25leUNoYW5nZUZhZGVEZWxheSwgdGhpcy5mYWRlTW9uZXlDaGFuZ2UsIHRoaXMpO1xyXG5cdHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoUGhhc2VyLlRpbWVyLlNFQ09ORCAqIHRoaXMubWlncmFudERlbGF5LCB0aGlzLnNwYXduTWlncmFudCwgdGhpcyk7XHJcbiAgfSxcclxuXHJcbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcblx0dGhpcy5iZ19tZy51cGRhdGUoKTtcclxuXHQvL3RoaXMuZ20udXBkYXRlKCk7XHJcblx0dGhpcy51aWIucmVuZGVyKCk7XHJcblx0dmFyIGhhcHBpbmVzcyA9IDA7XHJcblx0ICBmb3IgKHZhciBiZyBpbiB0aGlzLmJnX21nLmJnQXJyYXkpIHtcclxuXHRcdCAgZm9yICh2YXIgZ3JvdXAgaW4gdGhpcy5iZ19tZy5iZ0FycmF5W2JnXS5ncm91cF9tYW5hZ2VyLm1lbWJlcnMpIHtcclxuXHRcdFx0ICBmb3IgKHZhciBwZXJzb24gaW4gdGhpcy5iZ19tZy5iZ0FycmF5W2JnXS5ncm91cF9tYW5hZ2VyLm1lbWJlcnNbZ3JvdXBdLm1lbWJlcnMpIHtcclxuXHRcdFx0XHQgIGhhcHBpbmVzcyArPSB0aGlzLmJnX21nLmJnQXJyYXlbYmddLmdyb3VwX21hbmFnZXIubWVtYmVyc1tncm91cF0ubWVtYmVyc1twZXJzb25dLmhhcHBpbmVzcztcclxuXHRcdFx0ICB9XHJcblx0XHQgIH1cclxuXHQgIH1cclxuXHQgIGhhcHBpbmVzcyAvPSB0aGlzLmJnX21nLm51bVBlb3BsZSgpO1xyXG5cdCAgdGhpcy5zZXRIYXBwaW5lc3MoaGFwcGluZXNzKTtcclxuXHQgIGhhcHBpbmVzcyAtPSB0aGlzLm1pbkhhcHBpbmVzcztcclxuXHQgIC8vIGNvbnNvbGUubG9nKGhhcHBpbmVzcyk7XHJcblx0ICAvLyBjb25zb2xlLmxvZyhoYXBwaW5lc3MpO1xyXG4gICAgdGhpcy5yZWRUYXhMb3cueCAgID0gdGhpcy5iZ19tZy5iZ0FycmF5WzBdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCAtIDMwO1xyXG4gICAgdGhpcy50ZXh0VGF4TG93LnggID0gdGhpcy5iZ19tZy5iZ0FycmF5WzBdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCAtIDE1O1xyXG4gICAgdGhpcy5hZGRUYXhMb3cueCAgID0gdGhpcy5iZ19tZy5iZ0FycmF5WzBdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCArIDMwO1xyXG4gICAgdGhpcy5yZWRUYXhNaWQueCAgID0gdGhpcy5iZ19tZy5iZ0FycmF5WzFdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCAtIDMwO1xyXG4gICAgdGhpcy50ZXh0VGF4TWlkLnggID0gdGhpcy5iZ19tZy5iZ0FycmF5WzFdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCAtIDE1O1xyXG4gICAgdGhpcy5hZGRUYXhNaWQueCAgID0gdGhpcy5iZ19tZy5iZ0FycmF5WzFdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCArIDMwO1xyXG4gICAgdGhpcy5yZWRUYXhIaWdoLnggID0gdGhpcy5iZ19tZy5iZ0FycmF5WzJdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCAtIDMwO1xyXG4gICAgdGhpcy50ZXh0VGF4SGlnaC54ID0gdGhpcy5iZ19tZy5iZ0FycmF5WzJdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCAtIDE1O1xyXG4gICAgdGhpcy5hZGRUYXhIaWdoLnggID0gdGhpcy5iZ19tZy5iZ0FycmF5WzJdLmdldFZhcnNDZW50ZXIoKS5jZW50ZXIueCArIDMwO1xyXG5cclxuICAgIGlmICh0aGlzLmN1ckhhcHBpbmVzcyA8IHRoaXMubWluSGFwcGluZXNzKSB7XHJcbiAgICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCgnR2FtZV9PdmVyJyk7XHJcbiAgXHR9XHJcbiAgXHQvLyBjb25zb2xlLmxvZyh0aGlzLm1vbmV5Q2hhbmdlLmFscGhhKTtcclxuICB9LFxyXG5cclxuICBvbklucHV0RG93bjogZnVuY3Rpb24gKCkge1xyXG5cdCAvLyBjb25zb2xlLmxvZyh0aGlzLmdhbWUud2lkdGgsIHRoaXMuZ2FtZS5oZWlnaHQpO1xyXG4gIH0sXHJcbiAgc3Bhd25NaWdyYW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgXHQvLyBjb25zb2xlLmxvZygnc3Bhd24nKTtcclxuICBcdC8vIHZhciBuZXdNaWdyYW50ID0gbmV3IFBlcnNvbih0aGlzLmdhbWUsIHRoaXMuZ2FtZS53aWR0aCAvIDIsIHRoaXMuZ2FtZS5oZWlnaHQgKyAxNSk7XHJcbiAgXHR2YXIgbmV3TWlncmFudCA9IG5ldyBQZXJzb24odGhpcy5nYW1lLCB0aGlzLmdhbWUud2lkdGggLyAyICsgTWF0aC5yYW5kb20oKSAqIDgwMCAtIDQwMCwgdGhpcy5nYW1lLmhlaWdodCArIDE1KTtcclxuICBcdHRoaXMuZ2FtZS5hZGQuZXhpc3RpbmcobmV3TWlncmFudCk7XHJcbiAgXHR2YXIgYmcgPSB0aGlzLmJnX21nLmJnQXJyYXlbNl07XHJcbiAgXHRiZy5ncm91cF9tYW5hZ2VyLmFkZFBlcnNvbihuZXdNaWdyYW50KTtcclxuICBcdHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoUGhhc2VyLlRpbWVyLlNFQ09ORCAqIHRoaXMubWlncmFudERlbGF5LCB0aGlzLnNwYXduTWlncmFudCwgdGhpcyk7XHJcbiAgXHQvLyBjb25zb2xlLmxvZyhiZylcclxuICB9LFxyXG4gIGNvbGxlY3RUYXg6IGZ1bmN0aW9uICgpIHtcclxuXHQgIC8vIGNvbnNvbGUubG9nKCdjb2xsZWN0IHRheCcpO1xyXG5cdCAgdmFyIHRheGVzID0gMDtcclxuXHQgIGZvciAodmFyIGJnIGluIHRoaXMuYmdfbWcuYmdBcnJheSkge1xyXG5cdFx0ICBmb3IgKHZhciBncm91cCBpbiB0aGlzLmJnX21nLmJnQXJyYXlbYmddLmdyb3VwX21hbmFnZXIubWVtYmVycykge1xyXG5cdCAgXHRcdC8vIGNvbnNvbGUubG9nKHRoaXMuYmdfbWcuYmdBcnJheVtiZ10uZ3JvdXBfbWFuYWdlci5tZW1iZXJzW2dyb3VwXSwgdGhpcy5iZ19tZy5iZ0FycmF5W2JnXS5ncm91cF9tYW5hZ2VyLm1lbWJlcnNbZ3JvdXBdLmhhcHBpbmVzc01vZGlmaWVyKTtcclxuXHRcdFx0ICBmb3IgKHZhciBwZXJzb24gaW4gdGhpcy5iZ19tZy5iZ0FycmF5W2JnXS5ncm91cF9tYW5hZ2VyLm1lbWJlcnNbZ3JvdXBdLm1lbWJlcnMpIHtcclxuXHRcdFx0XHQgIHRheGVzICs9IHRoaXMuYmdfbWcuYmdBcnJheVtiZ10uZ3JvdXBfbWFuYWdlci5tZW1iZXJzW2dyb3VwXS5tZW1iZXJzW3BlcnNvbl0uZ2V0VGF4KCk7XHJcblx0XHRcdFx0ICB0aGlzLmJnX21nLmJnQXJyYXlbYmddLmdyb3VwX21hbmFnZXIubWVtYmVyc1tncm91cF0ubWVtYmVyc1twZXJzb25dLmFnZVRpY2soKTtcclxuXHRcdFx0ICB9XHJcblx0XHRcdCAgaWYgKHRoaXMuYmdfbWcuYmdBcnJheVtiZ10uZ3JvdXBfbWFuYWdlci5iYWNrZ3JvdW5kLnR5cGUgPT0gJ3dvcmsnKSB7XHJcblx0XHRcdCAgXHR0aGlzLmJnX21nLmJnQXJyYXlbYmddLmdyb3VwX21hbmFnZXIubWVtYmVyc1tncm91cF0uYWRkRmF0aWd1ZSh0aGlzLmZhdGlndWVQZXJUaWNrKTtcclxuXHRcdFx0ICB9IGVsc2Uge1xyXG5cdFx0XHQgIFx0dGhpcy5iZ19tZy5iZ0FycmF5W2JnXS5ncm91cF9tYW5hZ2VyLm1lbWJlcnNbZ3JvdXBdLmFkZEZhdGlndWUoLTEgKiB0aGlzLmZhdGlndWVQZXJUaWNrKTtcclxuXHRcdFx0ICB9XHJcblx0XHRcdCAgaWYgKHRoaXMuYmdfbWcuYmdBcnJheVtiZ10uZ3JvdXBfbWFuYWdlci5tZW1iZXJzW2dyb3VwXSkge1xyXG5cdFx0XHQgIFx0Ly8gY29uc29sZS5sb2coJ2EnKTtcclxuXHRcdFx0ICBcdC8vIGNvbnNvbGUubG9nKHRoaXMuYmdfbWcuYmdBcnJheVtiZ10uZ3JvdXBfbWFuYWdlci5tZW1iZXJzW2dyb3VwXSwgdGhpcy5iZ19tZy5iZ0FycmF5W2JnXS5ncm91cF9tYW5hZ2VyLm1lbWJlcnNbZ3JvdXBdLmhhcHBpbmVzc01vZGlmaWVyKTtcclxuXHRcdFx0ICBcdHRoaXMuYmdfbWcuYmdBcnJheVtiZ10uZ3JvdXBfbWFuYWdlci5tZW1iZXJzW2dyb3VwXS5hcHBseUhhcHBpbmVzcygpO1xyXG5cdFx0XHQgIH1cclxuXHRcdCAgfVxyXG5cdCAgfVxyXG5cdCAgdGhpcy5hZGRNb25leSh0YXhlcyk7XHJcblx0ICB0aGlzLm1vbmV5Q2hhbmdlLnRleHQgPSAoKHRheGVzID49IDApID8gJysnIDogJy0nKSArICckJyArIHRheGVzO1xyXG5cdCAgdGhpcy5tb25leUNoYW5nZS5maWxsID0gKHRheGVzID49IDApID8gJyMxNmZiMDQnIDogJyNmZjAwMDAnO1xyXG5cdCAgdGhpcy5tb25leUNoYW5nZS5hbHBoYSA9IDE7XHJcblx0ICB0aGlzLm1vbmV5Q2hhbmdlSG9sZCA9IHRydWU7XHJcblxyXG5cdCAgdGhpcy5nYW1lLnRpbWUuZXZlbnRzLmFkZChQaGFzZXIuVGltZXIuU0VDT05EICogdGhpcy50YXhUaW1lLCB0aGlzLmNvbGxlY3RUYXgsIHRoaXMpO1xyXG4gIH0sXHJcbiAgZmFkZU1vbmV5Q2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgXHRcdC8vIGNvbnNvbGUubG9nKHRoaXMubW9uZXlDaGFuZ2UuYWxwaGEpO1xyXG4gIFx0XHRpZiAodGhpcy5tb25leUNoYW5nZUhvbGQpIHtcclxuICBcdFx0XHR0aGlzLm1vbmV5Q2hhbmdlSG9sZCA9IGZhbHNlO1xyXG4gIFx0XHRcdHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoUGhhc2VyLlRpbWVyLlNFQ09ORCAqIHRoaXMubW9uZXlDaGFuZ2VIb2xkRGVsYXksIHRoaXMuZmFkZU1vbmV5Q2hhbmdlLCB0aGlzKTtcclxuICBcdFx0fSBlbHNlIHtcclxuXHQgIFx0XHR0aGlzLm1vbmV5Q2hhbmdlLmFscGhhIC09IHRoaXMubW9uZXlDaGFuZ2VGYWRlUmF0ZTtcclxuXHQgIFx0XHR0aGlzLmdhbWUudGltZS5ldmVudHMuYWRkKFBoYXNlci5UaW1lci5TRUNPTkQgKiB0aGlzLm1vbmV5Q2hhbmdlRmFkZURlbGF5LCB0aGlzLmZhZGVNb25leUNoYW5nZSwgdGhpcyk7XHJcblx0ICBcdH1cclxuICB9LFxyXG4gIHNldEhhcHBpbmVzczogZnVuY3Rpb24gKGFtdCkge1xyXG5cdCAgdGhpcy5jdXJIYXBwaW5lc3MgPSBhbXQ7XHJcblx0ICBpZiAoIXRoaXMuaGFwcGluZXNzSW5jcmVtZW50aW5nKSB7XHJcblx0XHQgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoUGhhc2VyLlRpbWVyLlNFQ09ORCAqIHRoaXMuaGFwcGluZXNzVXBkYXRlRGVsYXksIHRoaXMuaW5jcmVtZW50SGFwcGluZXNzLCB0aGlzKTtcclxuXHRcdCAgdGhpcy5oYXBwaW5lc3NJbmNyZW1lbnRpbmcgPSB0cnVlO1xyXG5cdCAgfVxyXG4gIH0sXHJcbiAgaW5jcmVtZW50SGFwcGluZXNzOiBmdW5jdGlvbiAoKSB7XHJcblx0aWYgKHRoaXMuaGFwcGluZXNzVmFsID09PSB0aGlzLmN1ckhhcHBpbmVzcykge1xyXG5cdFx0dGhpcy5oYXBwaW5lc3NJbmNyZW1lbnRpbmcgPSBmYWxzZTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0aWYgKHRoaXMuY3VySGFwcGluZXNzID4gdGhpcy5oYXBwaW5lc3NWYWwpIHtcclxuXHRcdHRoaXMuYmFyLmFkZFZhbHVlKDEpO1xyXG5cdFx0dGhpcy5oYXBwaW5lc3NWYWwgKz0gMTtcclxuXHR9IGVsc2UgaWYgKHRoaXMuY3VySGFwcGluZXNzIDwgdGhpcy5oYXBwaW5lc3NWYWwpIHtcclxuXHRcdHRoaXMuYmFyLmFkZFZhbHVlKC0xKTtcclxuXHRcdHRoaXMuaGFwcGluZXNzVmFsIC09IDE7XHJcblx0fVxyXG5cdHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoUGhhc2VyLlRpbWVyLlNFQ09ORCAqIHRoaXMuaGFwcGluZXNzVXBkYXRlRGVsYXksIHRoaXMuaW5jcmVtZW50SGFwcGluZXNzLCB0aGlzKTtcclxuICB9LFxyXG4gIGFkZE1vbmV5OiBmdW5jdGlvbiAoYW10KSB7XHJcblx0ICB0aGlzLmN1ck1vbmV5ICs9IGFtdDtcclxuXHQgIC8vdGhpcy5tb25leS50ZXh0ID0gJyQnICsgbmV3TW9uZXk7XHJcblx0ICBpZiAoIXRoaXMubW9uZXlJbmNyZW1lbnRpbmcpIHtcclxuXHRcdHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoUGhhc2VyLlRpbWVyLlNFQ09ORCAqIHRoaXMubW9uZXlVcGRhdGVEZWxheSwgdGhpcy5pbmNyZW1lbnRNb25leSwgdGhpcyk7XHJcblx0XHR0aGlzLm1vbmV5SW5jcmVtZW50aW5nID0gdHJ1ZTtcclxuXHQgIH1cclxuICB9LFxyXG4gIGluY3JlbWVudE1vbmV5OiBmdW5jdGlvbiAoKSB7XHJcblx0aWYgKHRoaXMubW9uZXlWYWwgPT09IHRoaXMuY3VyTW9uZXkpIHtcclxuXHRcdHRoaXMubW9uZXlJbmNyZW1lbnRpbmcgPSBmYWxzZTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0aWYgKHRoaXMuY3VyTW9uZXkgPiB0aGlzLm1vbmV5VmFsKSB7XHJcblx0XHR0aGlzLm1vbmV5VmFsICs9IDU7XHJcblx0fSBlbHNlIGlmICh0aGlzLmN1ck1vbmV5IDwgdGhpcy5tb25leVZhbCkge1xyXG5cdFx0dGhpcy5tb25leVZhbCAtPSA1O1xyXG5cdH1cclxuXHR0aGlzLm1vbmV5LnRleHQgPSAnJCcgKyB0aGlzLm1vbmV5VmFsO1xyXG5cdHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoUGhhc2VyLlRpbWVyLlNFQ09ORCAqIHRoaXMubW9uZXlVcGRhdGVEZWxheSwgdGhpcy5pbmNyZW1lbnRNb25leSwgdGhpcyk7XHJcbiAgfSxcclxuICBkZWNUYXhMb3c6IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLnRheE1vZC5sb3cgPT0gMSkge1xyXG4gICAgICB0aGlzLnRheE1vZC5sb3cgPSAuNTtcclxuICAgICAgdGhpcy50ZXh0VGF4TG93LnRleHQgPSAnJCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0aGlzLnRheE1vZC5sb3cgPT0gMS41KSB7XHJcbiAgICAgIHRoaXMudGF4TW9kLmxvdyA9IDE7XHJcbiAgICAgIHRoaXMudGV4dFRheExvdy50ZXh0ID0gJyQkJztcclxuICAgIH1cclxuICB9LFxyXG4gIGluY1RheExvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMudGF4TW9kLmxvdyA9PSAuNSkge1xyXG4gICAgICB0aGlzLnRheE1vZC5sb3cgPSAxO1xyXG4gICAgICB0aGlzLnRleHRUYXhMb3cudGV4dCA9ICckJCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0aGlzLnRheE1vZC5sb3cgPT0gMSkge1xyXG4gICAgICB0aGlzLnRheE1vZC5sb3cgPSAxLjU7XHJcbiAgICAgIHRoaXMudGV4dFRheExvdy50ZXh0ID0gJyQkJCc7XHJcbiAgICB9XHJcbiAgfSxcclxuICBkZWNUYXhNaWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLnRheE1vZC5taWQgPT0gMSkge1xyXG4gICAgICB0aGlzLnRheE1vZC5taWQgPSAuNTtcclxuICAgICAgdGhpcy50ZXh0VGF4TWlkLnRleHQgPSAnJCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0aGlzLnRheE1vZC5taWQgPT0gMS41KSB7XHJcbiAgICAgIHRoaXMudGF4TW9kLm1pZCA9IDE7XHJcbiAgICAgIHRoaXMudGV4dFRheE1pZC50ZXh0ID0gJyQkJztcclxuICAgIH1cclxuICB9LFxyXG4gIGluY1RheE1pZDogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMudGF4TW9kLm1pZCA9PSAuNSkge1xyXG4gICAgICB0aGlzLnRheE1vZC5taWQgPSAxO1xyXG4gICAgICB0aGlzLnRleHRUYXhNaWQudGV4dCA9ICckJCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0aGlzLnRheE1vZC5taWQgPT0gMSkge1xyXG4gICAgICB0aGlzLnRheE1vZC5taWQgPSAxLjU7XHJcbiAgICAgIHRoaXMudGV4dFRheE1pZC50ZXh0ID0gJyQkJCc7XHJcbiAgICB9XHJcbiAgfSxcclxuICBkZWNUYXhIaWdoOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy50YXhNb2QuaGlnaCA9PSAxKSB7XHJcbiAgICAgIHRoaXMudGF4TW9kLmhpZ2ggPSAuNTtcclxuICAgICAgdGhpcy50ZXh0VGF4SGlnaC50ZXh0ID0gJyQnO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodGhpcy50YXhNb2QuaGlnaCA9PSAxLjUpIHtcclxuICAgICAgdGhpcy50YXhNb2QuaGlnaCA9IDE7XHJcbiAgICAgIHRoaXMudGV4dFRheEhpZ2gudGV4dCA9ICckJCc7XHJcbiAgICB9XHJcbiAgfSxcclxuICBpbmNUYXhIaWdoOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy50YXhNb2QuaGlnaCA9PSAuNSkge1xyXG4gICAgICB0aGlzLnRheE1vZC5oaWdoID0gMTtcclxuICAgICAgdGhpcy50ZXh0VGF4SGlnaC50ZXh0ID0gJyQkJztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHRoaXMudGF4TW9kLmhpZ2ggPT0gMSkge1xyXG4gICAgICB0aGlzLnRheE1vZC5oaWdoID0gMS41O1xyXG4gICAgICB0aGlzLnRleHRUYXhIaWdoLnRleHQgPSAnJCQkJztcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJ2YXIgR2FtZV9PdmVyID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMudGV4dCA9IG51bGw7XHJcbiAgdGhpcy50ZXh0U21hbGwgPSBudWxsO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBHYW1lX092ZXI7XHJcblxyXG5HYW1lX092ZXIucHJvdG90eXBlID0ge1xyXG5cclxuICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB4ID0gdGhpcy5nYW1lLndpZHRoIC8gMjtcclxuICAgIHZhciB5ID0gdGhpcy5nYW1lLmhlaWdodCAvIDI7XHJcblxyXG4gICAgdmFyIHN0eWxlID0geyBmb250OiBcIjY1cHggQXJpYWxcIiwgZmlsbDogXCIjZmZmZmZmXCIsIGFsaWduOiBcImNlbnRlclwiIH07XHJcbiAgICB2YXIgc21hbGxTdHlsZSA9IHsgZm9udDogJzM1cHggXCJMdWNpZGEgQ29uc29sZVwiJywgZmlsbDogXCIjZmZmZmZmXCIsIGFsaWduOiBcImNlbnRlclwiIH07XHJcblxyXG4gICAgdGhpcy50ZXh0ID0gdGhpcy5hZGQudGV4dCh4IC0gMzAwLCB5IC0gMjAwLCBcIkdhbWUgT3ZlclwiLCBzdHlsZSk7XHJcbiAgICB0aGlzLnRleHRTbWFsbCA9IHRoaXMuYWRkLnRleHQoeCAtIDMwMCwgeSAtIDEwMCwgXCJ5b3VyIGhhcHBpbmVzcyB3ZW50IHVuZGVyIDUwJVxcblwiICsgXCJjbGljayB0byBjb250aW51ZVwiLCBzbWFsbFN0eWxlKTtcclxuICAgIHRoaXMuZ2FtZS50aW1lLmV2ZW50cy5hZGQoUGhhc2VyLlRpbWVyLlNFQ09ORCAqIDMsIHRoaXMuZG9UaGluZywgdGhpcyk7XHJcbiAgfSxcclxuXHJcbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIH0sXHJcblxyXG4gIGRvVGhpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5pbnB1dC5vbkRvd24uYWRkKHRoaXMub25Eb3duLCB0aGlzKTtcclxuICB9LFxyXG5cclxuICBvbkRvd246IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydChwbGF5ZXJTdGF0ZS5jdXJyZW50TGV2ZWwpO1xyXG4gIH1cclxufTsiLCJ2YXIgTWVudSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50ZXh0ID0gbnVsbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWVudTtcblxuTWVudS5wcm90b3R5cGUgPSB7XG5cbiAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHggPSB0aGlzLmdhbWUud2lkdGggLyAyO1xuICAgIHZhciB5ID0gdGhpcy5nYW1lLmhlaWdodCAvIDI7XG5cbiAgICB2YXIgc3R5bGUgPSB7IGZvbnQ6IFwiNjVweCBBcmlhbFwiLCBmaWxsOiBcIiNmZmZmZmZcIiwgYWxpZ246IFwiY2VudGVyXCIgfTtcblxuICAgIHRoaXMudGV4dCA9IHRoaXMuYWRkLnRleHQoeCAtIDMwMCwgeSAtIDIwMCwgXCJQcmVzcyB0byBTdGFydFwiLCBzdHlsZSk7XG5cbiAgICB0aGlzLmlucHV0Lm9uRG93bi5hZGQodGhpcy5vbkRvd24sIHRoaXMpO1xuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICB9LFxuXG4gIG9uRG93bjogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydChwbGF5ZXJTdGF0ZS5jdXJyZW50TGV2ZWwpO1xuICB9XG59O1xuIiwidmFyIFByZWxvYWRlciA9IGZ1bmN0aW9uIChnYW1lKSB7XHJcbiAgdGhpcy5hc3NldCA9IG51bGw7XHJcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBQcmVsb2FkZXI7XHJcblxyXG5QcmVsb2FkZXIucHJvdG90eXBlID0ge1xyXG5cclxuICBwcmVsb2FkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmFzc2V0ID0gdGhpcy5hZGQuc3ByaXRlKDMyMCwgMjQwLCAncHJlbG9hZGVyJyk7XHJcbiAgICB0aGlzLmFzc2V0LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcblxyXG4gICAgdGhpcy5sb2FkLm9uTG9hZENvbXBsZXRlLmFkZE9uY2UodGhpcy5vbkxvYWRDb21wbGV0ZSwgdGhpcyk7XHJcbiAgICB0aGlzLmxvYWQuc2V0UHJlbG9hZFNwcml0ZSh0aGlzLmFzc2V0KTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgndGVzdHNwcml0ZScsICdhc3NldHMvdGVzdC5wbmcnKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnbWVudV9iZycsICdhc3NldHMvbWVudV9iZy5wbmcnKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnYmFja2dyb3VuZCcsICdhc3NldHMvc2VjdG9yQkcucG5nJylcclxuICAgIHRoaXMubG9hZC5pbWFnZSgncGVyc29uJywgJ2Fzc2V0cy9wZXJzb24ucG5nJyk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ3NlbGVjdGlvbicsICdhc3NldHMvc2VsZWN0aW9uLnBuZycpO1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdib29rJywgJ2Fzc2V0cy9ib29rLnBuZycpO1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCd5b3VuZycsICdhc3NldHMveW91bmcucG5nJyk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2FkdWx0JywgJ2Fzc2V0cy9hZHVsdC5wbmcnKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnb2xkJywgJ2Fzc2V0cy9vbGQucG5nJyk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ3RheFJlZHVjZScsICdhc3NldHMvdGF4UmVkdWNlLnBuZycpO1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCd0YXhBZGQnLCAnYXNzZXRzL3RheEFkZC5wbmcnKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnbG9jaycsICdhc3NldHMvbG9jay5wbmcnKTtcclxuICAgIHRoaXMubG9hZC5hdGxhc0pTT05IYXNoKCdjaGV2cm9ucycsICdhc3NldHMvY2hldnJvbnMucG5nJywgJ2Fzc2V0cy9jaGV2cm9ucy5qc29uJyk7XHJcbiAgICB0aGlzLmxvYWQuYXRsYXNKU09OSGFzaCgnYWdlcycsICdhc3NldHMvYWdlcy5wbmcnLCAnYXNzZXRzL2FnZXMuanNvbicpO1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdoYXBweWZhY2UnLCAnYXNzZXRzL2hhcHB5ZmFjZV9iZXR0ZXIucG5nJyk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2JvcmRlcmVkJywgJ2Fzc2V0cy9ib3JkZXJlZC5wbmcnKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnbG93X2RvbGxhcicsICdhc3NldHMvbG93X2RvbGxhci5wbmcnKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnbWVkX2RvbGxhcicsICdhc3NldHMvbWVkX2RvbGxhci5wbmcnKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnaGlnaF9kb2xsYXInLCAnYXNzZXRzL2hpZ2hfZG9sbGFyLnBuZycpO1xyXG4gICAgdGhpcy5sb2FkLnNjcmlwdCgnd2ViZm9udCcsICcvL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL3dlYmZvbnQvMS40Ljcvd2ViZm9udC5qcycpO1xyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5hc3NldC5jcm9wRW5hYmxlZCA9IGZhbHNlO1xyXG4gIH0sXHJcblxyXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCEhdGhpcy5yZWFkeSkge1xyXG4gICAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ0dhbWUnKTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBvbkxvYWRDb21wbGV0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5yZWFkeSA9IHRydWU7XHJcbiAgfVxyXG59O1xyXG4iLCJ2YXIgU3BsYXNoID0gZnVuY3Rpb24gKCkge1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTcGxhc2g7XG5cblNwbGFzaC5wcm90b3R5cGUgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuICB9XG59OyIsInZhciBVdGlscyA9IHtcclxuICAgIGNvbnRhaW5zT2JqZWN0OiBmdW5jdGlvbihvYmosIGxpc3QpIHtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gb2JqKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHRoeXBvdGVudXNlOiBmdW5jdGlvbihhLCBiKSB7XHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGEsIDIpICsgTWF0aC5wb3coYiwgMikpO1xyXG5cdH0sXHJcblx0cmF0aW86IGZ1bmN0aW9uKGEsIGIsIGMpIHtcclxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XHJcblx0XHRcdHJldHVybiBbYSAvIGFdO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xyXG5cdFx0XHRyZXR1cm4gW2EgLyAoYSArIGIpLCBiIC8gKGEgKyBiKV07XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XHJcblx0XHRcdHJldHVybiBbYSAvIChhICsgYiArIGMpLCBiIC8gKGEgKyBiICsgYyksIGMgLyAoYSArIGIgKyBjKV07XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0cmV0dXJuIFtdO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFV0aWxzOyJdfQ==

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"C:\\HACKUCSC\\src\\js\\entities\\background.js":[function(require,module,exports){

var Background = function (game, x, y, income, type) {
    Phaser.Sprite.call(this, game, x, y, 'background');
    game.add.existing(this);
    this.numPeople = 0;
   	this.groups = [];
   	this.type = type;
    this.incomeLevel = null;
    if (income === 'low') {
    	this.incomeLevel = 'low';
    }
    else if (income === 'mid') {
    	this.incomeLevel = 'mid';
    }
    else if (income === 'high') {
    	this.incomeLevel = 'high';
    }
};

Background.prototype = Object.create(Phaser.Sprite.prototype);
Background.prototype.constructor = Background;

Background.prototype.update = function() {
};

module.exports = Background;
},{}],"C:\\HACKUCSC\\src\\js\\entities\\background_manager.js":[function(require,module,exports){
//Controls background elements

var Background = require('./background')
var Player = require('./player')
var Background_Manager = function(game) {
	this.game = game;

	//Create array of backgrounds
	var bgArray = [
		new Background(this.game, 0, 0, 'low', 'work'),												// bgArray[0] == workLow
		new Background(this.game, this.game.width / 3, 0, 'mid', 'work'),							// bgArray[1] == workMid
		new Background(this.game, 2 * this.game.width / 3, 0, 'high', 'work'),						// bgArray[2] == workMid
		new Background(this.game, 0, this.game.height / 3, 'low', 'house'),							// bgArray[3] == houseLow
		new Background(this.game, this.game.width / 3, this.game.height / 3, 'mid', 'house'),			// bgArray[4] == houseMid
		new Background(this.game, 2 * this.game.width / 3, this.game.height / 3, 'high', 'house'),	// bgArray[5] == houseMid
		new Background(this.game, 0, 2 * this.game.height / 3, '', 'unemployed'),					// bgArray[6] == unemployed
	];
	
	this.bgNames = {
		workLow    : bgArray[0],
		workMid    : bgArray[1],
		workHigh   : bgArray[2],
		houseLow   : bgArray[3],
		houseMid   : bgArray[4],
		houseHigh  : bgArray[5],
		unemployed : bgArray[6]
	};
	
	for (var i in bgArray) {
		if (bgArray[i].type == 'work') { 										// Work backgrounds
			if (bgArray[i].incomeLevel === 'low') {
				bgArray[i].tint = 0xe2402b;
			}
			else if (bgArray[i].incomeLevel === 'mid') {
				bgArray[i].tint = 0x56e22b;
			}
			else if (bgArray[i].incomeLevel === 'high') {
				bgArray[i].tint = 0x2b59e2;
			}
		}
		else if (bgArray[i].type == 'house') {									// House backgrounds
			if (bgArray[i].incomeLevel === 'low') {
				bgArray[i].tint = 0xe55340;
			}
			else if (bgArray[i].incomeLevel === 'mid') {
				bgArray[i].tint = 0x6ae246;
			}
			else if (bgArray[i].incomeLevel === 'high') {
				bgArray[i].tint = 0x5476dd;
			}
		}
		else {												// Unemployed background
			bgArray[i].tint = 0x939393;
		}
	}
};

Background_Manager.prototype.constructor = Background_Manager;


function moveGroup(source, destination, group) {
	/*source.numPeople -= group.members.length;
	source.update(); // Used for changing background size
	destination.numPeople += group.members.length;
	source.update();
	*/
	// Check if they can transfer up
	// Automatically update work level?
}
module.exports = Background_Manager;
},{"./background":"C:\\HACKUCSC\\src\\js\\entities\\background.js","./player":"C:\\HACKUCSC\\src\\js\\entities\\player.js"}],"C:\\HACKUCSC\\src\\js\\entities\\player.js":[function(require,module,exports){
var Player = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'testsprite');
    game.add.existing(this);
}

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
};

module.exports = Player;

},{}],"C:\\HACKUCSC\\src\\js\\main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, '-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

},{"./states/boot":"C:\\HACKUCSC\\src\\js\\states\\boot.js","./states/game":"C:\\HACKUCSC\\src\\js\\states\\game.js","./states/menu":"C:\\HACKUCSC\\src\\js\\states\\menu.js","./states/preloader":"C:\\HACKUCSC\\src\\js\\states\\preloader.js","./states/splash":"C:\\HACKUCSC\\src\\js\\states\\splash.js","./utils":"C:\\HACKUCSC\\src\\js\\utils.js"}],"C:\\HACKUCSC\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"C:\\HACKUCSC\\src\\js\\states\\game.js":[function(require,module,exports){
var Player = require('../entities/player');
var Background_Manager = require('../entities/background_manager');

var Game = function () {
  this.testentity = null;
  this.bg_mg = null;
};

module.exports = Game;

Game.prototype = {

  create: function () {
    var x = (this.game.width / 2) - 100;
    var y = (this.game.height / 2) - 50;

    this.bg_mg = new Background_Manager(this.game);

    this.testentity = new Player(this.game, x, y);
    this.testentity.anchor.setTo(0.5, 0.5);

    this.input.onDown.add(this.onInputDown, this);
  },

  update: function () {
    var x, y, cx, cy, dx, dy, angle, scale;

    x = this.input.position.x;
    y = this.input.position.y;
    cx = this.world.centerX;
    cy = this.world.centerY;

    angle = Math.atan2(y - cy, x - cx) * (180 / Math.PI);
    this.testentity.angle = angle;

    dx = x - cx;
    dy = y - cy;
    scale = Math.sqrt(dx * dx + dy * dy) / 100;

    this.testentity.scale.x = scale * 0.6;
    this.testentity.scale.y = scale * 0.6;
  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

},{"../entities/background_manager":"C:\\HACKUCSC\\src\\js\\entities\\background_manager.js","../entities/player":"C:\\HACKUCSC\\src\\js\\entities\\player.js"}],"C:\\HACKUCSC\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],"C:\\HACKUCSC\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test.png');
    this.load.image('background', 'assets/sectorBG.png')
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Menu');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"C:\\HACKUCSC\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"C:\\HACKUCSC\\src\\js\\utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};


module.exports = Utils;
},{}]},{},["C:\\HACKUCSC\\src\\js\\main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

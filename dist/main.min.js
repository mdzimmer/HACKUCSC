(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"C:\\HACKUCSC\\src\\js\\entities\\ProgressBar.js":[function(require,module,exports){
//NOTE: DON'T USE this code to create a ProgressBar. Instead, use the UIBuilder object and call buildProgressBar

var ProgressBar = function(setType, setMaxValue, setGraphics, setRenderables) {
	this.type = setType; //Two types, "growing" (starts at 0, triggers event when full) 
						 //and "shrinking" (starts full, triggers at 0)
	this.bgBorderSize = 2;			//default size of background border
	this.bgBorderColor = 0xAAAAAA;	//default color of background border
	this.bgColor = 0x888888;		//default color of background
	this.paddingHoriz = 5;			//default sum of padding on left and right side inner value bar
	this.paddingVert = 5;			//default sum (i.e. half on each side) of vertical padding of inner value bar
	this.valueBorderSize = 1;		//default size of value border
	this.valueBorderColor = 0x8888FF; //default color of value border
	this.valueColor = 0x000099;		//default color of inner value bar
	this.x = null;
	this.y = null;
	this.width = null;
	this.height = null;
	this.maxValue = setMaxValue;
	this.graphics = setGraphics; //store graphics class (used to draw bar)
	this.renderables = setRenderables;
	
	this.onEvent = function() {}; //overwrite this function to make whatever you want happen when progressBar reaches limit
	
	//switch(this.type) {
	//case 'growing' : 
	if(setType === 'growing') {
		this.value = 0;
		//tryTrigger is called automatically when you add/subtract value, and will trigger the onEvent() function
		this.tryTrigger = function() {
			if(this.value >= this.maxValue) {
				this.onEvent();
			}
		};
		//break;
	}
	else if(setType === 'shrinking') {
	//case 'shrinking' :
		this.value = this.maxValue;
		this.tryTrigger = function() {
			if(this.value <= 0) {
				this.onEvent();
			}
		};
	}
};

ProgressBar.prototype.constructor = ProgressBar;

ProgressBar.prototype.destroy = function() {
	this.graphics.clear();
	this.renderables.unsubscribe(this);
};

//To subtract value, just use negative numbers as argument i.e. foo.addValue(-5);
ProgressBar.prototype.addValue = function (addThis) {
	this.value += addThis;
	if(this.value > this.maxValue) {
		this.value = this.maxValue;
	}
	if(this.value < 0) {
		this.value = 0;
	}
	this.tryTrigger();
};

//Sets the location where progress bar is rendered
ProgressBar.prototype.setLocation = function(setX, setY) {
	this.x = setX;
	this.y = setY;
};

//Sets the size of the progress bar
ProgressBar.prototype.setSize = function(setWidth, setHeight) {
	this.width = setWidth;
	this.height = setHeight;
};

ProgressBar.prototype.setStyle = function(bgBorderSize, bgBorderColor, bgColor, paddingHoriz, paddingVert, valueBorderSize, valueBorderColor, valueColor) {
	this.bgBorderSize = bgBorderSize;
	this.bgBorderColor = bgBorderColor;
	this.bgColor = bgColor;
	this.paddingHoriz = paddingHoriz;
	this.paddingVert = paddingVert;
	this.valueBorderSize = valueBorderSize;
	this.valueBorderColor = valueBorderColor;
	this.valueColor = valueColor;
};

//update for progress bar, called just before drawing progress bar
//Overwrite this function if desired
ProgressBar.prototype.update = function() {};

//Renders progressBar
ProgressBar.prototype.render = function() {
	this.update();
	this.graphics.clear();
	//Draw background of bar
	this.graphics.lineStyle(this.bgBorderSize, this.bgBorderColor, 1); //sets border color and size
	this.graphics.beginFill(this.bgColor); //sets color of background fill
	this.graphics.drawRect(this.x-this.width/2, this.y-this.height/2, this.width, this.height);
	this.graphics.endFill();
	//Draw value of bar
	var percentage = this.value / this.maxValue;
	var barWidth = this.width - this.paddingHoriz;
	var barHeight = this.height - this.paddingVert;
	this.graphics.lineStyle(this.valueBorderSize, this.valueBorderColor, 1);
	this.graphics.beginFill(this.valueColor);
	this.graphics.drawRect(this.x-(barWidth/2), this.y-(barHeight/2), barWidth*percentage, barHeight);
	this.graphics.endFill();
};

module.exports = ProgressBar;
},{}],"C:\\HACKUCSC\\src\\js\\entities\\background.js":[function(require,module,exports){
var Group_Manager = require('./groupManager');
var Person = require('./person');

var Background = function (game, baseX, baseY, hRatio, vRatio, income, type, state) {
    Phaser.Sprite.call(this, game, (baseX * hRatio * game.width), (baseY * vRatio * game.height) + 100, 'background');
    game.add.existing(this);
    this.baseX = baseX;
    this.baseY = baseY;
    this.hRatio = hRatio;
    this.vRatio = vRatio;
    this.newHRatio = hRatio;
    this.newVRatio = vRatio;
    this.minRatio = .1;
    this.group_manager = new Group_Manager(this.game, state);
	this.group_manager.background = this;
   	this.type = type;
    this.incomeLevel = income;
	this.state = state
};

Background.prototype = Object.create(Phaser.Sprite.prototype);
Background.prototype.constructor = Background;

Background.prototype.getVars = function() {
    //return x & y and width & height of visible
    return [this.x, this.y, this.hRatio * (this.game.width), this.vRatio * (this.game.height - this.myManager.border)];
};

Background.prototype.getVarsCenter = function() {
    // //return x & y of center and width & height of visible
    var visWidth = this.hRatio * (this.game.width);
    var visHeight = this.vRatio * (this.game.height - this.myManager.border);
    return {width : visWidth, height : visHeight, center : {x : this.x + visWidth / 2, y : this.y + visHeight / 2}};
};

Background.prototype.numPeople = function() {
    var num = this.group_manager.numPeople();
    if (num === 0) return 1;
    else return num;
};

Background.prototype.update = function() {
	if (this.newHRatio < this.minRatio) this.newHRatio = this.minRatio;
    if (this.newVRatio < this.minRatio) this.newVRatio = this.minRatio;
    if (this.hRatio !== this.newHRatio) {
        if (this.hRatio + .01 < this.newHRatio) this.hRatio += .01;
        else if (this.hRatio - .01 > this.newHRatio) this.hRatio -= .01;
        else this.hRatio = this.newHRatio;
    }
    if (this.vRatio !== this.newVRatio) {
        if (this.vRatio + .01 < this.newVRatio) this.vRatio += .01;
        else if (this.vRatio - .01 > this.newVRatio) this.vRatio -= .01;
        else this.vRatio = this.newVRatio;
    }
    if (this.type === 'unemployed')
        this.hRatio = 1;
    this.group_manager.update();
};



module.exports = Background;
},{"./groupManager":"C:\\HACKUCSC\\src\\js\\entities\\groupManager.js","./person":"C:\\HACKUCSC\\src\\js\\entities\\person.js"}],"C:\\HACKUCSC\\src\\js\\entities\\background_manager.js":[function(require,module,exports){
//Controls background elements

var Background = require('./background');
var Person = require('./person');
var util = require('../utils');

var Group = require('./group');

var Background_Manager = function(game, state) {
	this.game = game;
	this.state = state;
	//Create array of backgrounds
	this.bgArray = [
		new Background(this.game, 0, 0, .33, .33, Person.EDULEVEL.low , 'work' , state),	// this.bgArray[0] == workLow
		new Background(this.game, 1, 0, .33, .33, Person.EDULEVEL.mid , 'work' , state),	// this.bgArray[1] == workMid
		new Background(this.game, 2, 0, .33, .33, Person.EDULEVEL.high, 'work' , state),	// this.bgArray[2] == workMid
		new Background(this.game, 0, 1, .33, .33, Person.EDULEVEL.low , 'house', state),	// this.bgArray[3] == houseLow
		new Background(this.game, 1, 1, .33, .33, Person.EDULEVEL.mid , 'house', state),	// this.bgArray[4] == houseMid
		new Background(this.game, 2, 1, .33, .33, Person.EDULEVEL.high, 'house', state),	// this.bgArray[5] == houseMid
		new Background(this.game, 0, 2,   1, .33, '',              'unemployed', state)		// this.bgArray[6] == unemployed
	];
	for (bg in this.bgArray) {
		this.bgArray[bg].myManager = this;
	}
	
	for (var i in this.bgArray) {
		if (this.bgArray[i].type == 'work') {
			if (this.bgArray[i].incomeLevel === Person.EDULEVEL.low) {
				this.bgArray[i].tint = 0xe2402b;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.mid) {
				this.bgArray[i].tint = 0x56e22b;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.high) {
				this.bgArray[i].tint = 0x2b59e2;
			}
		}
		else if (this.bgArray[i].type == 'house') {
			if (this.bgArray[i].incomeLevel === Person.EDULEVEL.low) {
				this.bgArray[i].tint = 0xe55340;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.mid) {
				this.bgArray[i].tint = 0x6ae246;
			}
			else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.high) {
				this.bgArray[i].tint = 0x5476dd;
			}
		}
		else { // Unemployed background
			this.bgArray[i].tint = 0x939393;
		}
		this.border = 100;
	}
	
	var test = this.bgArray[6].group_manager;
	var testFlock = new Group(this.game, this.game.width / 2 + 100, (this.game.height - this.border) / 2 + 100, state);
    for (var i = 0; i < 10; i++) {
    	var testPerson = new Person(this.game, this.game.width / 2 + i * 15, (this.game.height - this.border) / 2 + i * 15, i);
    	this.game.add.existing(testPerson);
    	testFlock.addMember(testPerson);
    }
    test.addMember(testFlock);
	// testFlock = new Group(this.game, this.game.width / 2 - 100, (this.game.height - this.border) / 2 + 100, state);
	// for (var i = 0; i < 10; i++) {
    	// var testPerson = new Person(this.game, this.game.width / 2 + i * 15 - 100, (this.game.height - this.border) / 2 + i * 15 + 100, i);
    	// this.game.add.existing(testPerson);
    	// testFlock.addMember(testPerson);
    // }
    // test.addMember(testFlock);
};

Background_Manager.prototype.constructor = Background_Manager;

/*Background_Manager.BGNAMES = {
		workLow    : this.bgArray[0],
		workMid    : this.bgArray[1],
		workHigh   : this.bgArray[2],
		houseLow   : this.bgArray[3],
		houseMid   : this.bgArray[4],
		houseHigh  : this.bgArray[5],
		unemployed : this.bgArray[6]
};*/

Background_Manager.prototype.sendTo = function(source, destination, group) {
	// console.log(destination);
	if (destination === null) {
		return;
	}
	var transType = this.transferType(source, destination, group)
	if (transType.can) {	// Check if they can transfer up
		source.group_manager.transfer(destination.group_manager, group);
		if (transType.educate) {
			group.startEducation();
		}
		this.updateRatios(destination);
		var test = destination.getVarsCenter();
		// console.log(test);
	}
};
Background_Manager.prototype.numPeople = function() {
	var count = 0;
	for (var i in this.bgArray) {
		count += this.bgArray[i].group_manager.numPeople();
	}
	return count;
};
Background_Manager.prototype.transferType = function(source, destination, group) {
	var groupEdu = group.members[0].eduLevel;
	var can = this.canTransfer(source, destination, group);
	// console.log(destination);
	// console.log(destination.type, destination.incomeLevel);
	var educate = (destination.type === 'house' && destination.incomeLevel) > groupEdu;
	return {can : can, educate : educate};
};
Background_Manager.prototype.canTransfer = function(source, destination, group) {
	// console.log(source, destination, group);
	if (source === null || destination === null) return false;
	var sourceEdu = group.members[0].eduLevel;
	if (destination.type === 'unemployed') {
		return true;
	}
	if (sourceEdu === Person.EDULEVEL.unemployed) {
		if (destination.incomeLevel === Person.EDULEVEL.low && destination.type === 'house') {
			return true;
		}
	} else if (sourceEdu === Person.EDULEVEL.low) {
		if (destination.incomeLevel === Person.EDULEVEL.low) {
			return true;
		} else if (destination.incomeLevel === Person.EDULEVEL.mid) {
			if (destination.type === 'house') {
				return true;
			}
		}
	} else if (sourceEdu === Person.EDULEVEL.mid) {
		if (destination.incomeLevel === Person.EDULEVEL.low) {
			return true;
		} else if (destination.incomeLevel === Person.EDULEVEL.mid) {
			return true;
		} else if (destination.incomeLevel === Person.EDULEVEL.high) {
			if (destination.type === 'house') {
				return true;
			}
		}
	} else if (sourceEdu === Person.EDULEVEL.high) {
		return true;
	}
	return false;
};

Background_Manager.prototype.whereClicked = function() {
	for (var i in this.bgArray) {
		var curDimensions = this.bgArray[i].getVars();
		var mouseX = this.game.input.x;
		var mouseY = this.game.input.y;
		if(i == 6) console.log('curDimensions: ' + curDimensions);
		if (mouseX > curDimensions[0] && mouseX <= curDimensions[0] + curDimensions[2]) {
			if (mouseY > curDimensions[1] && mouseY <= curDimensions[1] + curDimensions[3]) {
				return this.bgArray[i];
			}
		}
	}
	return null;
};

Background_Manager.prototype.findOther = function(source, destination) {
	if (source.type === 'work' && destination.type === 'work') {
		if (source.incomeLevel === Person.EDULEVEL.low) {
			if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[2];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[1];
		}
		else if (source.incomeLevel === Person.EDULEVEL.mid) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[2];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[0];
		}
		else if (source.incomeLevel === Person.EDULEVEL.high) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[1];
			else if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[0];
		}
	}
	else if (source.type === 'house' && destination.type === 'house') {
		if (source.incomeLevel === Person.EDULEVEL.low) {
			if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[5];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[4];
		}
		else if (source.incomeLevel === Person.EDULEVEL.mid) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[5];
			else if (destination.incomeLevel === Person.EDULEVEL.high) return this.bgArray[3];
		}
		else if (source.incomeLevel === Person.EDULEVEL.high) {
			if (destination.incomeLevel === Person.EDULEVEL.low) return this.bgArray[4];
			else if (destination.incomeLevel === Person.EDULEVEL.mid) return this.bgArray[3];
		}
	}
};

Background_Manager.prototype.updateRatios = function(destination) {
	if (destination.type === 'work') {
		var hRatios = util.ratio(this.bgArray[0].numPeople(), this.bgArray[1].numPeople(), this.bgArray[2].numPeople());
	}
	else{
		var hRatios = util.ratio(this.bgArray[3].numPeople(), this.bgArray[4].numPeople(), this.bgArray[5].numPeople());
	}
	var employed = 0;
	for (var j = 0; j < 6; j++)
		employed += this.bgArray[j].numPeople();
	var vRatios = util.ratio(this.bgArray[6].numPeople(), employed);
	for (var i = 0 in this.bgArray) {
		if (i !== 6) {		// If not unemployed bg
			if (i < 3) {	// If work bg
				this.bgArray[i].newHRatio = hRatios[i];
				this.bgArray[i].newVRatio = vRatios[1] / 2;
			}
			else {			// If house bg
				this.bgArray[i].newHRatio = hRatios[i - 3];
				this.bgArray[i].newVRatio = vRatios[1] / 2;
			}
		}
		else bgArray[i].newVRatio = vRatios[0]; // Unemployed bg
	}
	console.log(this.bgArray[0].hRatio);
	console.log(this.bgArray[3].hRatio);
	console.log(this.bgArray[6].minRatio);
};

Background_Manager.prototype.update = function() {
	for (var i in this.bgArray) {
    	if (this.bgArray[i].incomeLevel === Person.EDULEVEL.mid) {
    		this.bgArray[i].x = this.bgArray[0].getVars()[2];
    	}
    	else if (this.bgArray[i].incomeLevel === Person.EDULEVEL.high) {
    	    this.bgArray[i].x = this.bgArray[1].getVars()[0] + this.bgArray[1].getVars()[2];
    	}
    	this.bgArray[i].y = (this.bgArray[i].baseY * this.bgArray[i].vRatio * (this.game.height - this.border)) + this.border;
		this.bgArray[i].update();
	}
	var test = this.bgArray[3].getVarsCenter();
};

module.exports = Background_Manager;
},{"../utils":"C:\\HACKUCSC\\src\\js\\utils.js","./background":"C:\\HACKUCSC\\src\\js\\entities\\background.js","./group":"C:\\HACKUCSC\\src\\js\\entities\\group.js","./person":"C:\\HACKUCSC\\src\\js\\entities\\person.js"}],"C:\\HACKUCSC\\src\\js\\entities\\group.js":[function(require,module,exports){
//controls flocking for a group of person objects
var util = require('../utils');

var Group = function (game, centerX, centerY, state) {
	this.game = game;
	this.members = [];
	this.minDist = 20;
	//this.noise = 10;
	this.center = {x : centerX, y : centerY};
	this.clickDist = 50;
	this.selected = false;
	this.selection = this.game.add.sprite(this.center.x, this.center.y, 'selection');
	this.selection.anchor.setTo(0.5, 0.5);
	this.selection.width = 100;
	this.selection.height = 100;
	this.selection.visible = false;
	this.velocity = {x : 0, y : 0};
	this.speed = .05;
	this.state = state;
	this.book = this.game.add.sprite(this.center.x, this.center.y, 'book');
	this.book.anchor.setTo(0.5, 0.5);
	this.book.width = 25;
	this.book.height = 25;
	this.book.visible = false;
	this.learningTime = .01;
	
	this.state.input.onDown.add(this.onInputDown, this);
}
Group.prototype.constructor = Group;
Group.prototype.update = function() {
	// console.log(this.center);
	//update center
	var newX = this.center.x + this.velocity.x * this.speed;
	var newY = this.center.y + this.velocity.y * this.speed;
	this.changeCenter({x : newX, y : newY});
	for (var member in this.members) {
		member = this.members[member];
		var velocity = {x:0, y:0};
		var diff = {x:0, y:0};
		diff.x = this.center.x - member.x;
		diff.y = this.center.y - member.y;
		velocity.x += diff.x;
		velocity.y += diff.y;
		for (var other in this.members) {
			other = this.members[other];
			//ignore self
			if (other === member) {
				continue;
			}
			var oDiff = {x:0, y:0};
			oDiff.x = other.x - member.x;
			oDiff.y = other.y - member.y;
			var totalDist = util.hypotenuse(oDiff.x, oDiff.y);
			if (totalDist <= this.minDist) {
				velocity.x = -1 * oDiff.x;
				velocity.y = -1 * oDiff.y;
				// velocity.x -= oDiff.x;
				// velocity.y -= oDiff.y;
				break;
			}
		}
		// if (util.hypotenuse(velocity.x, velocity.y) < this.minVelocity) {
			// velocity.x = velocity.y = 0;
		// }
		member.velocity = velocity;
	}
};
Group.prototype.addMember = function(member) {
	this.members.push(member);
	member.group = this;
};
Group.prototype.onInputDown = function() {
	// console.log('a');
	if (this.selected) {
		// console.log('c');
		// console.log(this.myManager, this.myManager.background);
		var bg = this.myManager.background.myManager.whereClicked();
		// console.log(bg);
		this.myManager.background.myManager.sendTo(this.myManager.background, bg, this);
		this.setSelected(false);
	} else if (this.clicked()) {
		this.click();
	}
};
Group.prototype.startEducation = function() {
	this.learning = false;
	this.book.visible = true;
	this.state.game.time.events.add(Phaser.Timer.SECOND * this.learningTime, this.endEducation, this);
};
Group.prototype.endEducation = function() {
	for (var member in this.members) {
		this.members[member].eduLevel += 1;
	}
	this.learning = false;
	this.book.visible = false;
};
Group.prototype.clicked = function() {
	var mouseX = this.game.input.x;
	var mouseY = this.game.input.y;
	var diffX = mouseX - this.center.x;
	var diffY = mouseY - this.center.y;
	var totalDiff = util.hypotenuse(diffX, diffY);
	if (totalDiff <= this.clickDist) {
		return true;
	}
	return false;
};
Group.prototype.click = function() {
	if (this.selected) {
		this.setSelected(false);
	} else {
		this.setSelected(true);
	}
};
Group.prototype.move = function() {
	var mouseX = this.game.input.x;
	var mouseY = this.game.input.y;
	this.changeCenter({x : mouseX, y : mouseY});
	this.setSelected(false);
	// console.log({x : mouseX, y : mouseY});s
};
Group.prototype.setSelected = function(newSelected) {
	this.selected = newSelected;
	this.selection.visible = newSelected;
};
Group.prototype.changeCenter = function(newCenter) {
	this.selection.x = newCenter.x;
	this.selection.y = newCenter.y;
	this.book.x = newCenter.x;
	this.book.y = newCenter.y;
	this.center = newCenter;
};
Group.prototype.numPeople = function() {
	return this.members.length;
};
Group.prototype.mouseDown = function() {
	
};

module.exports = Group;













},{"../utils":"C:\\HACKUCSC\\src\\js\\utils.js"}],"C:\\HACKUCSC\\src\\js\\entities\\groupManager.js":[function(require,module,exports){
var Util = require('../utils');

var GroupManager = function (game) {
	this.game = game;
	this.members = [];
	/*
	this.bound = {
		upper : center.y - height / 2,
		lower : center.y + height / 2,
		left : center.x - width / 2,
		right : center.x + width / 2
	};
	this.width = width;
	this.height = height;
	this.center = center;
	this.minDist = width / 2;
	*/
	/*
	Phaser.Sprite.call(this, game, x, y, 'person');
	this.velocity = {x:0, y:0};
	this.width = 10;
	this.height = 10;
	this.speed = .05;
	this.id = id;
	*/
};
GroupManager.prototype.constructor = GroupManager;
GroupManager.prototype.update = function() {
	// console.log(this.center);
	//update bounds
	if (this.background) {
		var vars = this.background.getVarsCenter();
		this.width = vars.width;
		this.height = vars.height;
		this.center = vars.center;
		// console.log(vars);
	} else {
		return;
	}
	//update member velocity
	for (var member in this.members) {
		member = this.members[member];
		var velocity = {x : 0, y : 0};
		// console.log(this.center, member.center);
		var diffX = this.center.x - member.center.x;
		var diffY = this.center.y - member.center.y;
		velocity.x = diffX;
		velocity.y = diffY;
		for (var other in this.members) {
			other = this.members[other];
			if (other === member) {
				continue;
			}
			var oDiffx = other.center.x - member.center.x;
			var oDiffy = other.center.y - member.center.y;
			var hyp = Util.hypotenuse(oDiffx, oDiffy);
			//console.log(hyp);
			if (hyp <= this.minDist) {
				// console.log('b', hyp);
				velocity.x = -1 * oDiffx;
				velocity.y = -1 * oDiffy;
				break;
			} else {
				// console.log('a');
			}
		}
		member.velocity = velocity;
	}
	//update members
	for (member in this.members) {
		this.members[member].update();
	}
};
GroupManager.prototype.transfer = function(otherGM, myMember) {
	var testVals = otherGM.background.getVarsCenter();
	// console.log('transfer to', otherGM.background.type, otherGM.background.incomeLevel, testVals.center.y, testVals.y, testVals.visHeight, testVals.vRatio);
	/*
	if (!(myMember in this.members)) {
		console.log('ERROR', myMember, 'not in', this);
		return;
	}
	*/
	var index = this.members.indexOf(myMember);
	this.members.splice(index, 1);
	otherGM.addMember(myMember);
};
GroupManager.prototype.addMember = function(member) {
	this.members.push(member);
	member.myManager = this;
	var smaller = (this.width < this.height) ? this.width : this.height;
	this.minDist = smaller / this.members.length;
	// console.log(this.minDist);
};
GroupManager.prototype.numPeople = function() {
	var count = 0;
	for (var member in this.members) {
		member = this.members[member];
		count += member.numPeople();
	}
	return count;
};

module.exports = GroupManager;












},{"../utils":"C:\\HACKUCSC\\src\\js\\utils.js"}],"C:\\HACKUCSC\\src\\js\\entities\\person.js":[function(require,module,exports){
var Person = function (game, x, y, id) {
	Phaser.Sprite.call(this, game, x, y, 'person');
	this.velocity = {x:0, y:0};
	this.width = 10;
	this.height = 10;
	this.speed = .05;
	this.id = id;
	this.eduLevel = Person.EDULEVEL.unemployed;
	this.happiness = 100;
};
Person.prototype = Object.create(Phaser.Sprite.prototype);
Person.prototype.constructor = Person;

Person.EDULEVEL = {
	unemployed : -1,
	low  : 0,
	mid  : 1,
	high : 2
};

Person.prototype.update = function() {
	this.x += this.velocity.x * this.speed;
	this.y += this.velocity.y * this.speed;
	//console.log(this.velocity);
};
//TODO adjust tax by tax rate and happiness
Person.prototype.getTax = function() {
	// console.log('get tax', this.group.myManager.background.type);
	if (this.group.myManager.background.type === 'house') {
		if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.low) {
			return -1;
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.mid) {
			return -2;
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.high) {
			return -3;
		}
	} else if (this.group.myManager.background.type === 'work') {
		if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.low) {
			return 1;
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.mid) {
			return 2;
		} else if (this.group.myManager.background.incomeLevel === Person.EDULEVEL.high) {
			return 3;
		}
	}
	return 0;
};

module.exports = Person;
},{}],"C:\\HACKUCSC\\src\\js\\entities\\player.js":[function(require,module,exports){
var Player = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'testsprite');
    game.add.existing(this);
	this.speed = 0.1;
}

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
	//this.x += this.velocity;
};

module.exports = Player;

},{}],"C:\\HACKUCSC\\src\\js\\entities\\uiBuilder.js":[function(require,module,exports){
var ProgressBar = require('./ProgressBar');

var UIBuilder = function(setGameState) {
	//Ensure that cannot create multiple instances of this class
	if(UIBuilder.prototype.exists) {
		return UIBuilder.prototype.existingReference;
	}
	
	this.gameState = setGameState;
	this.renderables = [];
	//Create and store a graphics object (used for stuff like drawing rectangles)
	UIBuilder.prototype.exists = true;
	UIBuilder.prototype.existingReference = this;
};

UIBuilder.prototype.constructor = UIBuilder;
//These var's help create the singleton functionality
UIBuilder.prototype.exists = false;
UIBuilder.prototype.existingReference = null;

//Use this function to create a progress bar
//Usage: type: can be "growing" or "shrinking", this will effect if bar starts at 0 and goes up or vis versa
//		 maxValue: sets the max value of the progress bar, i.e. using 100 creates a bar from 0 to 100
//		 x,y: sets location
//		 DON'T FORGET to overwrite the onEvent() function for the progress bar after creating it
//			-onEvent() is automatically called when bar fills/shrinks past limit (depending on bar type)
UIBuilder.prototype.buildProgressBar = function(type, x, y, width, height, maxValue) {
	//create and format new prog bar
	var graphics = this.gameState.game.add.graphics(0,0);
	var newProgBar = new ProgressBar(type, maxValue, graphics, this.renderables);
	newProgBar.setLocation(x,y);
	newProgBar.setSize(width, height);
	//subscribe to 'renderables' so that render() is called automatically
	// this.renderables.subscribe(newProgBar);
	this.renderables.push(newProgBar);
	return newProgBar;
};
UIBuilder.prototype.render = function() {
	for (renderable in this.renderables) {
		this.renderables[renderable].render();
	}
};

module.exports = UIBuilder;
},{"./ProgressBar":"C:\\HACKUCSC\\src\\js\\entities\\ProgressBar.js"}],"C:\\HACKUCSC\\src\\js\\main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, '-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');

//game.stage.backgroundColor = "#ffffff";

},{"./states/boot":"C:\\HACKUCSC\\src\\js\\states\\boot.js","./states/game":"C:\\HACKUCSC\\src\\js\\states\\game.js","./states/menu":"C:\\HACKUCSC\\src\\js\\states\\menu.js","./states/preloader":"C:\\HACKUCSC\\src\\js\\states\\preloader.js","./states/splash":"C:\\HACKUCSC\\src\\js\\states\\splash.js","./utils":"C:\\HACKUCSC\\src\\js\\utils.js"}],"C:\\HACKUCSC\\src\\js\\states\\boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"C:\\HACKUCSC\\src\\js\\states\\game.js":[function(require,module,exports){
var Player = require('../entities/player');
var Background_Manager = require('../entities/background_manager');
var Person = require('../entities/person');
var Group = require('../entities/group');
var GroupManager = require('../entities/groupManager');
var UIBuilder = require('../entities/uiBuilder');

var Game = function () {
  this.testentity = null;
  //this.flocks = [];
  this.bg_mg = null;
  // this.selectedGroup = null;
  this.money = null;
  this.moneyVal = 0;
  this.curMoney = 0;
  this.moneyUpdateDelay = 0.001;
  this.moneyIncrementing = false;
  this.happinessVal = 0;
  this.curHappiness = 0;
  this.happinessUpdateDelay = 0.001;
  this.happinessIncrementing = false;
  this.taxTime = 3;
};

module.exports = Game;

Game.prototype = {

  create: function () {
	  // console.log(this);
	this.game.stage.backgroundColor = "#ffffff";
	  
    var x = (this.game.width / 2) - 100;
    var y = (this.game.height / 2) - 50;

    this.bg_mg = new Background_Manager(this.game, this);
	
    this.input.onDown.add(this.onInputDown, this);
	
	this.money = this.game.add.text(10, 10, '$0');
	this.money.font = 'VT323';
	this.money.fontSize = 24;
	this.money.fill = '#ffffff';
    this.money.setShadow(3, 3, 'rgba(0,0,0,0.5)', 5);
	
	this.uib = new UIBuilder(this);
	this.bar = this.uib.buildProgressBar("growing", this.game.width / 2, 25, 300, 25, 100);
	//this.bar.addValue(100);
	this.happy = this.game.add.sprite(this.game.width * .73, 25, 'happyface');
	this.happy.width = 40;
	this.happy.height = 40;
	this.happy.anchor.setTo(0.5, 0.5);
	
	this.game.time.events.add(Phaser.Timer.SECOND * this.taxTime, this.collectTax, this);
  },

  update: function () {
	this.bg_mg.update();
	//this.gm.update();
	this.uib.render();
	var happiness = 0;
	  for (var bg in this.bg_mg.bgArray) {
		  for (var group in this.bg_mg.bgArray[bg].group_manager.members) {
			  for (var person in this.bg_mg.bgArray[bg].group_manager.members[group].members) {
				  happiness += this.bg_mg.bgArray[bg].group_manager.members[group].members[person].happiness;
			  }
		  }
	  }
	  happiness /= this.bg_mg.numPeople();
	  // console.log(happiness);
	  this.setHappiness(happiness);
  },

  onInputDown: function () {
	 // console.log(this.game.width, this.game.height);
  },
  collectTax: function () {
	  // console.log('collect tax');
	  var taxes = 0;
	  for (var bg in this.bg_mg.bgArray) {
		  for (var group in this.bg_mg.bgArray[bg].group_manager.members) {
			  for (var person in this.bg_mg.bgArray[bg].group_manager.members[group].members) {
				  taxes += this.bg_mg.bgArray[bg].group_manager.members[group].members[person].getTax();
			  }
		  }
	  }
	  this.addMoney(taxes);
	  this.game.time.events.add(Phaser.Timer.SECOND * this.taxTime, this.collectTax, this);
  },
  setHappiness: function (amt) {
	  this.curHappiness = amt;
	  if (!this.happinessIncrementing) {
		  this.game.time.events.add(Phaser.Timer.SECOND * this.happinessUpdateDelay, this.incrementHappiness, this);
		  this.happinessIncrementing = true;
	  }
  },
  incrementHappiness: function () {
	if (this.happinessVal === this.curHappiness) {
		this.happinessIncrementing = false;
		return;
	}
	if (this.curHappiness > this.happinessVal) {
		this.bar.addValue(1);
		this.happinessVal += 1;
	} else if (this.curHappiness < this.happinessVal) {
		this.bar.addValue(-1);
		this.happinessVal -= 1;
	}
	this.game.time.events.add(Phaser.Timer.SECOND * this.happinessUpdateDelay, this.incrementHappiness, this);
  },
  addMoney: function (amt) {
	  this.curMoney += amt;
	  //this.money.text = '$' + newMoney;
	  if (!this.moneyIncrementing) {
		this.game.time.events.add(Phaser.Timer.SECOND * this.moneyUpdateDelay, this.incrementMoney, this);
		this.moneyIncrementing = true;
	  }
  },
  incrementMoney: function () {
	if (this.moneyVal === this.curMoney) {
		this.moneyIncrementing = false;
		return;
	}
	if (this.curMoney > this.moneyVal) {
		this.moneyVal += 1;
	} else if (this.curMoney < this.moneyVal) {
		this.moneyVal -= 1;
	}
	this.money.text = '$' + this.moneyVal;
	this.game.time.events.add(Phaser.Timer.SECOND * this.moneyUpdateDelay, this.incrementMoney, this);
  }
};














},{"../entities/background_manager":"C:\\HACKUCSC\\src\\js\\entities\\background_manager.js","../entities/group":"C:\\HACKUCSC\\src\\js\\entities\\group.js","../entities/groupManager":"C:\\HACKUCSC\\src\\js\\entities\\groupManager.js","../entities/person":"C:\\HACKUCSC\\src\\js\\entities\\person.js","../entities/player":"C:\\HACKUCSC\\src\\js\\entities\\player.js","../entities/uiBuilder":"C:\\HACKUCSC\\src\\js\\entities\\uiBuilder.js"}],"C:\\HACKUCSC\\src\\js\\states\\menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],"C:\\HACKUCSC\\src\\js\\states\\preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test.png');
    this.load.image('background', 'assets/sectorBG.png')
    this.load.image('person', 'assets/person.png');
    this.load.image('selection', 'assets/selection.png');
    this.load.image('book', 'assets/book.png');
    // this.load.image('happyface', 'assets/happyface.png');
    // this.load.image('sadface', 'assets/sadface.png');
	this.load.image('happyface', 'assets/happyface_better.png');
	this.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Game');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"C:\\HACKUCSC\\src\\js\\states\\splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"C:\\HACKUCSC\\src\\js\\utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
	hypotenuse: function(a, b) {
		return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
	},
	ratio: function(a, b, c) {
		if (arguments.length === 1) {
			return [a / a];
		}
		else if (arguments.length === 2) {
			return [a / (a + b), b / (a + b)];
		}
		else if (arguments.length === 3) {
			return [a / (a + b + c), b / (a + b + c), c / (a + b + c)];
		}
		else {
			return [];
		}
	}
};


module.exports = Utils;
},{}]},{},["C:\\HACKUCSC\\src\\js\\main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
